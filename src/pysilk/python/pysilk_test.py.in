#! @PYTHON@
#######################################################################
# Copyright (C) 2008-2020 by Carnegie Mellon University.
#
# @OPENSOURCE_LICENSE_START@
# See license information in ../../../LICENSE.txt
# @OPENSOURCE_LICENSE_END@
#
#######################################################################

#######################################################################
# $SiLK: pysilk_test.py.in 01d273aa43de 2020-04-16 15:57:54Z mthomas $
#######################################################################

import pickle
import unittest
import datetime
import operator
import tempfile
import warnings
import sys
import os
import os.path
from silk import *
from silk.site import have_site_config, sensors, classtypes

if sys.hexversion >= 0x02050000:
    operator_isub = operator.isub
    operator_iadd = operator.iadd
    operator_iand = operator.iand
    operator_ior  = operator.ior
    operator_ixor = operator.ixor
else:
    def operator_isub(a, b):
        a -= b
    def operator_iadd(a, b):
        a += b
    def operator_iand(a, b):
        a &= b
    def operator_ior(a, b):
        a |= b
    def operator_ixor(a, b):
        a ^= b

if sys.hexversion >= 0x02050000:
    versionedAttributeError = AttributeError
else:
    versionedAttributeError = TypeError

def tempname(tmpdir):
    if sys.hexversion >= 0x03000000:
        # Python 3.x version
        tmp = tempfile.NamedTemporaryFile(dir=tmpdir, delete=True)
        name = tmp.name
        tmp.close()
        return name
    else:
        # Python 2.x version
        return os.tempnam(tmpdir)

# A list of names of Bag key_type and counter_type values used in this
# code.  Placed here to make them easy to find and modify in the event
# that the names change.
bag_types = {
    "custom":   "custom",
    "any_ipv4": "any-IPv4",
    "any_ipv6": "any-IPv6",
    "any_port": "any-port",
    "sport":    "sPort",
    "dport":    "dPort",
    "sipv6":    "sIPv6",
    "dipv4":    "dIPv4",
    "records":  "records"
    }


class TestSetupException(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

class TestIPAddr(unittest.TestCase):

    def testIPAddrConstruction(self):
        a = IPAddr("0.0.0.0")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("0.0.0.0")
        self.assertEqual(a, b)
        a = IPAddr("255.255.255.255")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("255.255.255.255")
        self.assertEqual(a, b)
        a = IPAddr("10.0.0.0")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("10.0.0.0")
        self.assertEqual(a, b)
        a = IPAddr("10.10.10.10")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("10.10.10.10")
        self.assertEqual(a, b)
        a = IPAddr("10.11.12.13")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("10.11.12.13")
        self.assertEqual(a, b)
        a = IPAddr(" 10.0.0.0")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr(" 10.0.0.0")
        self.assertEqual(a, b)
        a = IPAddr("10.0.0.0 ")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("10.0.0.0 ")
        self.assertEqual(a, b)
        a = IPAddr("  10.0.0.0  ")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("  10.0.0.0  ")
        self.assertEqual(a, b)
        a = IPAddr("010.000.000.000")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("010.000.000.000")
        self.assertEqual(a, b)
        a = IPAddr("4294967295")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("4294967295")
        self.assertEqual(a, b)
        a = IPAddr("167772160")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("167772160")
        self.assertEqual(a, b)
        a = IPAddr("168430090")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("168430090")
        self.assertEqual(a, b)
        a = IPAddr("168496141")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("168496141")
        self.assertEqual(a, b)
        a = IPAddr("167772160")
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr("167772160")
        self.assertEqual(a, b)
        a = IPAddr(IPAddr("0.0.0.0"))
        self.assertEqual(type(a), IPv4Addr)
        b = IPv4Addr(IPAddr("0.0.0.0"))
        self.assertEqual(a, b)
        if ipv6_enabled():
            a = IPAddr("0:0:0:0:0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
            self.assertEqual(a, b)
            a = IPAddr("10:0:0:0:0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("10:0:0:0:0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("10:10:10:10:10:10:10:10")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("10:10:10:10:10:10:10:10")
            self.assertEqual(a, b)
            a = IPAddr("1010:1010:1010:1010:1010:1010:1010:1010")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("1010:1010:1010:1010:1010:1010:1010:1010")
            self.assertEqual(a, b)
            a = IPAddr("1011:1213:1415:1617:2021:2223:2425:2627")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("1011:1213:1415:1617:2021:2223:2425:2627")
            self.assertEqual(a, b)
            a = IPAddr("f0ff:f2f3:f4f5:f6f7:202f:2223:2425:2627")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("f0ff:f2f3:f4f5:f6f7:202f:2223:2425:2627")
            self.assertEqual(a, b)
            a = IPAddr("f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7")
            self.assertEqual(a, b)
            a = IPAddr("     f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("     f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7")
            self.assertEqual(a, b)
            a = IPAddr("f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7     ")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7     ")
            self.assertEqual(a, b)
            a = IPAddr("   f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7  ")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("   f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7  ")
            self.assertEqual(a, b)
            a = IPAddr("::")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::")
            self.assertEqual(a, b)
            a = IPAddr("0::0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::0")
            self.assertEqual(a, b)
            a = IPAddr("0:0::0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0::0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0::0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0::0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0::0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0::0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0::0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0::0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0:0::0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0:0::0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0::0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0::0:0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0::0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0::0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0::0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0::0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("0:0::0:0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0::0:0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("0::0:0:0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::0:0:0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("0::0:0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::0:0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("0::0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("0::0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("0::0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::0:0")
            self.assertEqual(a, b)
            a = IPAddr("::0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0:0:0:0:0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0:0:0:0:0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0:0:0::")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0:0:0::")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0:0::0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0:0::0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0::")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0::")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0::")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0::")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0::")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0::")
            self.assertEqual(a, b)
            a = IPAddr("0:0::")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0::")
            self.assertEqual(a, b)
            a = IPAddr("0::")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0:0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0:0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0::0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0::0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0::0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0::0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0::0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0::0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0:0::0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0::0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0::0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("::0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0:0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0:0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0:0:0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0:0:0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("::0:0:0:0:0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("::0:0:0:0:0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0::0:0:0:0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0::0:0:0:0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0:0::0:0:0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0::0:0:0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0::0:0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0::0:0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0::0:0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0::0:0.0.0.0")
            self.assertEqual(a, b)
            a = IPAddr("0:0:0:0:0::0.0.0.0")
            self.assertEqual(type(a), IPv6Addr)
            b = IPv6Addr("0:0:0:0:0::0.0.0.0")
            self.assertEqual(a, b)
        else:
            self.assertRaises(NotImplementedError, IPAddr, '::')
            self.assertRaises(NotImplementedError, IPv6Addr, '::')


    def testIPAddrString(self):
        self.assertEqual(str(IPAddr("0.0.0.0")), "0.0.0.0")
        self.assertEqual(str(IPAddr("255.255.255.255")), "255.255.255.255")
        self.assertEqual(str(IPAddr("10.0.0.0")), "10.0.0.0")
        self.assertEqual(str(IPAddr("10.10.10.10")), "10.10.10.10")
        self.assertEqual(str(IPAddr("10.11.12.13")), "10.11.12.13")
        self.assertEqual(IPAddr("0.0.0.0").padded(), "000.000.000.000")
        self.assertEqual(IPAddr("255.255.255.255").padded(), "255.255.255.255")
        self.assertEqual(IPAddr("10.0.0.0").padded(), "010.000.000.000")
        self.assertEqual(IPAddr("10.10.10.10").padded(), "010.010.010.010")
        self.assertEqual(IPAddr("10.11.12.13").padded(), "010.011.012.013")
        if ipv6_enabled():
            self.assertEqual(str(IPAddr("0:0:0:0:0:0:0:0")), "::")
            self.assertEqual(
                str(IPAddr("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")),
                "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
            self.assertEqual(str(IPAddr("10:0:0:0:0:0:0:0")), "10::")
            self.assertEqual(str(IPAddr("10:10:10:10:10:10:10:10")),
                             "10:10:10:10:10:10:10:10")
            self.assertEqual(
                    str(IPAddr("1010:1010:1010:1010:1010:1010:1010:1010")),
                    "1010:1010:1010:1010:1010:1010:1010:1010")
            self.assertEqual(
                str(IPAddr("1011:1213:1415:1617:2021:2223:2425:2627")),
                "1011:1213:1415:1617:2021:2223:2425:2627")
            self.assertEqual(
                str(IPAddr("f0ff:f2f3:f4f5:f6f7:202f:2223:2425:2627")),
                "f0ff:f2f3:f4f5:f6f7:202f:2223:2425:2627")
            self.assertEqual(
                str(IPAddr("f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7")),
                "f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7")
            self.assertEqual(str(IPAddr("1234::5678")), "1234::5678")
            self.assertEqual(IPAddr("0:0:0:0:0:0:0:0").padded(),
                             "0000:0000:0000:0000:0000:0000:0000:0000")
            self.assertEqual(
                IPAddr("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff").padded(),
                "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
            self.assertEqual(IPAddr("10:0:0:0:0:0:0:0").padded(),
                             "0010:0000:0000:0000:0000:0000:0000:0000")
            self.assertEqual(IPAddr("10:10:10:10:10:10:10:10").padded(),
                             "0010:0010:0010:0010:0010:0010:0010:0010")
            self.assertEqual(
                IPAddr("1010:1010:1010:1010:1010:1010:1010:1010").padded(),
                    "1010:1010:1010:1010:1010:1010:1010:1010")
            self.assertEqual(
                IPAddr("1011:1213:1415:1617:2021:2223:2425:2627").padded(),
                "1011:1213:1415:1617:2021:2223:2425:2627")
            self.assertEqual(
                IPAddr("f0ff:f2f3:f4f5:f6f7:202f:2223:2425:2627").padded(),
                "f0ff:f2f3:f4f5:f6f7:202f:2223:2425:2627")
            self.assertEqual(
                IPAddr("f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7").padded(),
                "f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7")
            self.assertEqual(IPAddr("1234::5678").padded(),
                             "1234:0000:0000:0000:0000:0000:0000:5678")

    def testIPAddrInt(self):
        self.assertEqual(int(IPAddr("0.0.0.0")), 0)
        self.assertEqual(int(IPAddr("255.255.255.255")), 4294967295)
        self.assertEqual(int(IPAddr("10.0.0.0")), 167772160)
        self.assertEqual(int(IPAddr("10.10.10.10")), 168430090)
        self.assertEqual(int(IPAddr("10.11.12.13")), 168496141)
        self.assertEqual(int(IPAddr(" 10.0.0.0")), 167772160)
        self.assertEqual(int(IPAddr("10.0.0.0 ")), 167772160)
        self.assertEqual(int(IPAddr("  10.0.0.0  ")), 167772160)
        self.assertEqual(int(IPAddr("010.000.000.000")), 167772160)
        self.assertEqual(int(IPAddr("4294967295")), 4294967295)
        self.assertEqual(int(IPAddr("167772160")), 167772160)
        self.assertEqual(int(IPAddr("168430090")), 168430090)
        self.assertEqual(int(IPAddr("168496141")), 168496141)
        self.assertEqual(int(IPAddr("167772160")), 167772160)
        if ipv6_enabled():
            self.assertEqual(int(IPAddr("0:0:0:0:0:0:0:0")), 0)
            self.assertEqual(int(IPAddr(
                        "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")),
                             0xffffffffffffffffffffffffffffffff)
            self.assertEqual(int(IPAddr("10:0:0:0:0:0:0:0")),
                             0x00100000000000000000000000000000)
            self.assertEqual(int(IPAddr("10:10:10:10:10:10:10:10")),
                             0x00100010001000100010001000100010)
            self.assertEqual(int(IPAddr(
                        "1010:1010:1010:1010:1010:1010:1010:1010")),
                             0x10101010101010101010101010101010)
            self.assertEqual(int(IPAddr(
                        "1011:1213:1415:1617:2021:2223:2425:2627")),
                             0x10111213141516172021222324252627)
            self.assertEqual(int(IPAddr(
                        "f0ff:f2f3:f4f5:f6f7:202f:2223:2425:2627")),
                             0xf0fff2f3f4f5f6f7202f222324252627)
            self.assertEqual(int(IPAddr(
                        "f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7")),
                             0xf0fffaf3f4f5f6f7a0afaaa3a4a5a6a7)
            self.assertEqual(int(IPAddr("::")), 0)
            self.assertEqual(int(IPAddr("0::0")), 0)
            self.assertEqual(int(IPAddr("0:0::0")), 0)
            self.assertEqual(int(IPAddr("0:0:0::0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0::0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0::0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0:0::0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0::0:0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0::0:0:0")), 0)
            self.assertEqual(int(IPAddr("0:0:0::0:0:0:0")), 0)
            self.assertEqual(int(IPAddr("0:0::0:0:0:0:0")), 0)
            self.assertEqual(int(IPAddr("0::0:0:0:0:0:0")), 0)
            self.assertEqual(int(IPAddr("0::0:0:0:0:0")), 0)
            self.assertEqual(int(IPAddr("0::0:0:0:0")), 0)
            self.assertEqual(int(IPAddr("0::0:0:0")), 0)
            self.assertEqual(int(IPAddr("0::0:0")), 0)
            self.assertEqual(int(IPAddr("::0")), 0)
            self.assertEqual(int(IPAddr("::0:0")), 0)
            self.assertEqual(int(IPAddr("::0:0:0")), 0)
            self.assertEqual(int(IPAddr("::0:0:0:0")), 0)
            self.assertEqual(int(IPAddr("::0:0:0:0:0")), 0)
            self.assertEqual(int(IPAddr("::0:0:0:0:0:0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0:0:0::")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0:0::0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0::")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0::")), 0)
            self.assertEqual(int(IPAddr("0:0:0::")), 0)
            self.assertEqual(int(IPAddr("0:0::")), 0)
            self.assertEqual(int(IPAddr("0::")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0:0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0::0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0::0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0:0:0::0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0:0::0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0::0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("::0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("::0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("::0:0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("::0:0:0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("::0:0:0:0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("::0:0:0:0:0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0::0:0:0:0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0:0::0:0:0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0:0:0::0:0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0::0:0.0.0.0")), 0)
            self.assertEqual(int(IPAddr("0:0:0:0:0::0.0.0.0")), 0)
            self.assertEqual(int(IPAddr(
                        "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255")),
                             0xffffffffffffffffffffffffffffffff)
            self.assertEqual(int(IPAddr(
                        "1010:1010:1010:1010:1010:1010:16.16.16.16")),
                             0x10101010101010101010101010101010)
            self.assertEqual(int(IPAddr(
                        "1011:1213:1415:1617:2021:2223:36.37.38.39")),
                             0x10111213141516172021222324252627)

    def testIPAddrFromInt(self):
        self.assertEqual(int(IPv4Addr(0)), 0)
        self.assertEqual(int(IPv4Addr(4294967295)), 4294967295)
        self.assertEqual(int(IPv4Addr(167772160)), 167772160)
        self.assertEqual(int(IPv4Addr(168430090)), 168430090)
        self.assertEqual(int(IPv4Addr(168496141)), 168496141)
        self.assertEqual(int(IPv4Addr(167772160)), 167772160)
        self.assertRaises(ValueError, IPv4Addr, -1)
        self.assertRaises(ValueError, IPv4Addr, 0x100000000)
        if ipv6_enabled():
            self.assertEqual(int(IPv6Addr(0xffffffffffffffffffffffffffffffff)),
                             0xffffffffffffffffffffffffffffffff)
            self.assertEqual(int(IPv6Addr(0x10101010101010101010101010101010)),
                             0x10101010101010101010101010101010)
            self.assertEqual(int(IPv6Addr(0x10111213141516172021222324252627)),
                             0x10111213141516172021222324252627)
            self.assertRaises(ValueError, IPv6Addr, -1)
            self.assertRaises(ValueError, IPv6Addr,
                              0x100000000000000000000000000000000)
        else:
            self.assertRaises(NotImplementedError, IPv6Addr, 0)

    def testIPAddrBadStrings(self):
        if ipv6_enabled():
            badipv6 = ValueError
        else:
            badipv6 = NotImplementedError
        self.assertRaises(ValueError, IPAddr, "010.000.000.000x")
        self.assertRaises(ValueError, IPAddr, "010.000.000.000a")
        self.assertRaises(ValueError, IPAddr, "010.000.000.000|")
        self.assertRaises(badipv6, IPAddr, "       10.0.0.0:80")
        self.assertRaises(ValueError, IPAddr, "10.0.0.0       .")
        self.assertRaises(ValueError, IPAddr, "      167772160|")
        self.assertRaises(ValueError, IPAddr, "    10.10.10.10.10  ")
        self.assertRaises(ValueError, IPAddr, "")
        self.assertRaises(ValueError, IPAddr, "  ")
        self.assertRaises(ValueError, IPAddr, "     -167772160")
        self.assertRaises(ValueError, IPAddr, "     -167772160|")
        self.assertRaises(ValueError, IPAddr, "      167772160.")
        self.assertRaises(ValueError, IPAddr, " 256.256.256.256")
        self.assertRaises(ValueError, IPAddr, "  10.")
        self.assertRaises(ValueError, IPAddr, "  10.x.x.x  ")
        self.assertRaises(ValueError, IPAddr, "  .10.10.10.10  ")
        self.assertRaises(ValueError, IPAddr, "  10..10.10.10  ")
        self.assertRaises(ValueError, IPAddr, "  10.10..10.10  ")
        self.assertRaises(ValueError, IPAddr, "  10.10.10..10  ")
        self.assertRaises(ValueError, IPAddr, "  10.10.10.10.  ")
        self.assertRaises(badipv6, IPAddr, "  10.10:10.10   ")
        self.assertRaises(ValueError, IPAddr,
                          "10.0.0.98752938745983475983475039248759")
        self.assertRaises(ValueError, IPAddr, "10.0|0.0")
        self.assertRaises(ValueError, IPAddr, " 10.  0.  0.  0")
        self.assertRaises(ValueError, IPAddr, "10 .   0.  0.  0")
        self.assertRaises(badipv6, IPAddr, " -10:0:0:0:0:0:0:0")
        self.assertRaises(badipv6, IPAddr, " 10000:0:0:0:0:0:0:0")
        self.assertRaises(badipv6, IPAddr, " 0:0:0:0:0:0:0:10000")
        self.assertRaises(badipv6, IPAddr, "  10:")
        self.assertRaises(badipv6, IPAddr, "0:0:0:0:0:0:0")
        self.assertRaises(badipv6, IPAddr, "  10:10.10:10::")
        self.assertRaises(badipv6, IPAddr, "  :10:10:10:10::")
        self.assertRaises(badipv6, IPAddr, "  ::10:10:10:10:STUFF")
        self.assertRaises(badipv6, IPAddr, "  ::10:10:10:10:")
        self.assertRaises(badipv6, IPAddr, "  10:10:10:::10")
        self.assertRaises(badipv6, IPAddr, "  10::10:10::10")
        self.assertRaises(badipv6, IPAddr, "  10:10::10::10")
        self.assertRaises(badipv6, IPAddr, "  10::10::10:10")
        self.assertRaises(badipv6, IPAddr, "  10:x:x:x:x:x:x:x  ")
        self.assertRaises(badipv6, IPAddr,
                          "f0ff:faf3:f4f5:f6f7:a0af:aaa3:a4a5:a6a7:ffff")
        self.assertRaises(badipv6, IPAddr,
                          ("11:12:13:14:15:16:17:"
                           "98752938745983475983475039248759"))
        self.assertRaises(badipv6, IPAddr, "10:0|0:0:0:0:0:0")
        self.assertRaises(badipv6, IPAddr,
                          " 10:  0:  0:  0: 10: 10: 10: 10")
        self.assertRaises(badipv6, IPAddr, "10 :10:10:10:10:10:10:10")
        self.assertRaises(badipv6, IPAddr, ":10:10:10:10:10:10:10:10")
        self.assertRaises(badipv6, IPAddr, "0:0:0:0:0:0:0:0:0.0.0.0")
        self.assertRaises(badipv6, IPAddr, "0:0:0:0:0:0:0:0.0.0.0")
        self.assertRaises(badipv6, IPAddr, "::0.0.0.0:0")
        self.assertRaises(badipv6, IPAddr, "0::0.0.0.0:0")
        self.assertRaises(badipv6, IPAddr, "0::0.0.0.0.0")
        self.assertRaises(ValueError, IPv4Addr, "::")
        if ipv6_enabled():
            self.assertRaises(ValueError, IPv6Addr, "0.0.0.0")
        else:
            self.assertRaises(NotImplementedError, IPv6Addr, "0.0.0.0")


    def testIPAddrBadTypes(self):
        self.assertRaises(TypeError, IPAddr, 2.4)

    def testIPAddrOrdering(self):
        self.assertTrue(IPv4Addr(0) == IPv4Addr(IPv4Addr(0)))
        self.assertTrue(IPv4Addr(0) <  IPv4Addr(256))
        self.assertTrue(IPv4Addr(256) >  IPv4Addr(0))
        self.assertTrue(IPv4Addr(256) != IPv4Addr(0))
        self.assertTrue(IPv4Addr(0xffffffff) == IPv4Addr(0xffffffff))
        if ipv6_enabled():
            self.assertTrue(IPv6Addr(0xffffffff) < IPAddr("ffff::"))
            self.assertTrue(IPv6Addr(0xffffffff) != IPAddr("255.255.255.255"))
            self.assertTrue(IPAddr("255.255.255.255") >
                         IPAddr("::255.255.255.255"))
            self.assertTrue(IPAddr("0.0.0.0") == IPAddr("::ffff:0.0.0.0"))
            self.assertTrue(IPAddr("0.0.0.0") < IPAddr("::ffff:0.0.0.1"))

    def testIPAddrIPv6(self):
        if ipv6_enabled():
            self.assertTrue(IPAddr("::").is_ipv6())
            self.assertTrue(IPAddr("::ffff:0.0.0.1").is_ipv6())
        self.assertTrue(not IPAddr("0.0.0.0").is_ipv6())
        self.assertTrue(not IPAddr("0.0.0.1").is_ipv6())

    def testIPAddrConvert(self):
        a = IPAddr("0.0.0.0")
        self.assertEqual(a, IPv4Addr(a))
        self.assertEqual(a, a.to_ipv4())
        if ipv6_enabled():
            b = IPAddr("::")
            c = IPAddr("::ffff:0.0.0.0")
            self.assertEqual(b, IPv6Addr(b))
            self.assertEqual(c, IPv6Addr(c))
            self.assertEqual(c, IPv6Addr(a))
            self.assertEqual(c, a.to_ipv6())
            self.assertEqual(a, IPv4Addr(c))
            self.assertEqual(a, c.to_ipv6())
            self.assertRaises(ValueError, IPv4Addr, b)
            self.assertEqual(None, b.to_ipv4())
        else:
            self.assertRaises(NotImplementedError, a.to_ipv6)
            self.assertRaises(NotImplementedError, IPv6Addr, a)

    def testIPAddrOctets(self):
        a = IPAddr("10.11.12.13")
        self.assertEqual(a.octets(), (10, 11, 12, 13))
        if ipv6_enabled():
            a = IPAddr("2001:db8:10:11::12:13")
            self.assertEqual(a.octets(), (0x20, 0x01, 0x0d, 0xb8,
                                          0x00, 0x10, 0x00, 0x11,
                                          0x00, 0x00, 0x00, 0x00,
                                          0x00, 0x12, 0x00, 0x13))

    def testIPAddrMasking(self):
        a = IPAddr("10.11.12.13")
        self.assertEqual(a, a.mask_prefix(32))
        self.assertEqual(IPAddr("0.0.0.0"), a.mask_prefix(0))
        self.assertRaises(ValueError, a.mask_prefix, 33)
        b = IPAddr("0.0.0.0")
        self.assertEqual(b, a.mask(b))
        self.assertEqual(b, b.mask(a))
        self.assertEqual(b, b.mask(b))
        b = IPAddr("255.255.255.0")
        c = IPAddr("10.11.12.0")
        self.assertEqual(c, a.mask(b))
        self.assertEqual(c, a.mask_prefix(24))
        self.assertEqual(c, c.mask(b))
        self.assertEqual(c, c.mask_prefix(24))
        b = IPAddr("255.255.0.0")
        c = IPAddr("10.11.0.0")
        self.assertEqual(c, a.mask(b))
        self.assertEqual(c, a.mask_prefix(16))
        self.assertEqual(c, c.mask(b))
        self.assertEqual(c, c.mask_prefix(16))
        if ipv6_enabled():
            a = IPAddr("2001:db8:10:11::12:13")
            self.assertEqual(a, a.mask_prefix(128))
            self.assertEqual(IPAddr("::"), a.mask_prefix(0))
            self.assertRaises(ValueError, a.mask_prefix, 129)
            b = IPAddr("::")
            self.assertEqual(b, a.mask(b))
            self.assertEqual(b, b.mask(a))
            self.assertEqual(b, b.mask(b))
            b = IPAddr("ffff:ffff:ffff:ffff:ffff:ffff:ffff:0")
            c = IPAddr("2001:db8:10:11::12:0")
            self.assertEqual(c, a.mask(b))
            self.assertEqual(c, a.mask_prefix(112))
            self.assertEqual(c, c.mask(b))
            self.assertEqual(c, c.mask_prefix(112))
            b = IPAddr("ffff:ffff:ffff:ffff::")
            c = IPAddr("2001:db8:10:11::")
            self.assertEqual(c, a.mask(b))
            self.assertEqual(c, a.mask_prefix(64))
            self.assertEqual(c, c.mask(b))
            self.assertEqual(c, c.mask_prefix(64))
            # Mixed IPv4 and IPv6
            a = IPAddr("::FFFF:10.11.12.13")
            self.assertEqual(a, a.mask_prefix(128))
            b = IPAddr("::FFFF:0.0.0.0")
            self.assertEqual(b, a.mask(b))
            self.assertEqual(b, b.mask(a))
            self.assertEqual(b, b.mask(b))
            b = IPAddr("255.255.255.0")
            c = IPAddr("::FFFF:10.11.12.0")
            self.assertEqual(c, a.mask(b))
            self.assertEqual(c, a.mask_prefix(120))
            self.assertEqual(c, c.mask(b))
            self.assertEqual(c, c.mask_prefix(120))
            b = IPAddr("255.255.0.0")
            c = IPAddr("::FFFF:10.11.0.0")
            self.assertEqual(c, a.mask(b))
            self.assertEqual(c, a.mask_prefix(112))
            self.assertEqual(c, c.mask(b))
            self.assertEqual(c, c.mask_prefix(112))

    def testPickle(self):
        self.assertRaises(TypeError, pickle.dumps,
                          IPAddr("1.2.3.4"))
        for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
            self.assertRaises(TypeError, pickle.dumps,
                              IPAddr("1.2.3.4"), i)
        if ipv6_enabled():
            self.assertRaises(TypeError, pickle.dumps, IPAddr("::"))
            for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
                self.assertRaises(TypeError, pickle.dumps,
                                  IPAddr("::"), i)


class TestIPWildcard(unittest.TestCase):

    def testIPWildcardConstruction(self):
        IPWildcard("0.0.0.0")
        IPWildcard("255.255.255.255")
        IPWildcard("     255.255.255.255")
        IPWildcard("255.255.255.255     ")
        IPWildcard("   255.255.255.255  ")
        IPWildcard("0.0.0.0/31")
        IPWildcard("255.255.255.254-255")
        IPWildcard("3,2,1.4.5.6")
        IPWildcard("0.0.0.1,31,51,71,91,101,121,141,161,181,211,231,251")
        IPWildcard("0,255.0,255.0,255.0,255")
        IPWildcard("1.1.128.0/22")
        IPWildcard("128.x.0.0")
        IPWildcard("128.0-255.0.0")
        IPWildcard("128.0,128-255,1-127.0.0")
        IPWildcard("128.0,128,129-253,255-255,254,1-127.0.0")
        IPWildcard("128.0,128-255,1-127.0.0  ")
        IPWildcard("  128.0,128-255,1-127.0.0  ")
        IPWildcard("  128.0,128-255,,1-127.0.0  ")
        IPWildcard(IPWildcard("0.0.0.0"))
        if ipv6_enabled():
            IPWildcard("0:0:0:0:0:0:0:0")
            IPWildcard("::")
            IPWildcard("::0.0.0.0")
            IPWildcard("1:2:3:4:5:6:7:8")
            IPWildcard("1:203:405:607:809:a0b:c0d:e0f")
            IPWildcard("1:203:405:607:809:a0b:12.13.14.15")
            IPWildcard("::FFFF")
            IPWildcard("::FFFF:FFFF")
            IPWildcard("::0.0.255.255")
            IPWildcard("::255.255.255.255")
            IPWildcard("FFFF::")
            IPWildcard("0,FFFF::0,FFFF")
            IPWildcard("::FFFF:0,10.0.0.0,10")
            IPWildcard("::FFFF:0.0,160.0,160.0")
            IPWildcard("0:0:0:0:0:0:0:0/127")
            IPWildcard("::/127")
            IPWildcard("0:0:0:0:0:0:0:0/110")
            IPWildcard("0:0:0:0:0:0:0:0/95")
            IPWildcard("0:ffff::0/127")
            IPWildcard("0:ffff::0.0.0.0,1")
            IPWildcard("0:ffff::0.0.0.0-10")
            IPWildcard("0:ffff::0.0.0.x")
            IPWildcard("::ffff:0:0:0:0:0:0/110")
            IPWildcard("0:ffff::/112")
            IPWildcard("0:ffff:0:0:0:0:0:x")
            IPWildcard("0:ffff:0:0:0:0:0:x")
            IPWildcard("0:ffff:0:0:0:0:0:0-ffff")
            IPWildcard("0:ffff:0:0:0:0:0.0.x.x")
            IPWildcard("0:ffff:0:0:0:0:0.0.0-255.128-254,0-126,255,127")
            IPWildcard("0:ffff:0:0:0:0:0.0.128-254,0-126,255,127.x")
            IPWildcard("0:ffff:0:0:0:0:0.0.0.0/112")
            IPWildcard("0:ffff:0:0:0:0:0.0,1.x.x")
            IPWildcard("0:ffff:0:0:0:0:0:0-10,10-20,24,23,22,21,25-ffff")
            IPWildcard("0:ffff::x")
            IPWildcard("0:ffff:0:0:0:0:0:aaab-ffff,aaaa-aaaa,0-aaa9")
            IPWildcard("0:ffff:0:0:0:0:0:ff00/120")
            IPWildcard("0:ffff:0:0:0:0:0:ffff/120")
            IPWildcard("::ff00:0/104")
            IPWildcard("::x")
            IPWildcard("x::")
            IPWildcard("x::10.10.10.10")
            IPWildcard(IPWildcard("::"))

    def testIPWildcardBadStrings(self):
        self.assertRaises(ValueError, IPWildcard, "0.0.0.0/33")
        self.assertRaises(ValueError, IPWildcard, "0.0.0.2-0")
        self.assertRaises(ValueError, IPWildcard, "0.0.0.256")
        self.assertRaises(ValueError, IPWildcard, "0.0.256.0")
        self.assertRaises(ValueError, IPWildcard, "0.0.0256.0")
        self.assertRaises(ValueError, IPWildcard, "0.256.0.0")
        self.assertRaises(ValueError, IPWildcard, "0.0.0.0.0")
        self.assertRaises(ValueError, IPWildcard, "0.0.x.0/31")
        self.assertRaises(ValueError, IPWildcard, "0.0.x.0:0")
        self.assertRaises(ValueError, IPWildcard, "0.0.0,1.0/31")
        self.assertRaises(ValueError, IPWildcard, "0.0.0-1.0/31")
        self.assertRaises(ValueError, IPWildcard, "0.0.0-1-.0")
        self.assertRaises(ValueError, IPWildcard, "0.0.0--1.0")
        self.assertRaises(ValueError, IPWildcard, "0.0.0.0 junk")
        self.assertRaises(ValueError, IPWildcard, "0.0.-0-1.0")
        self.assertRaises(ValueError, IPWildcard, "0.0.-1.0")
        self.assertRaises(ValueError, IPWildcard, "0.0.0..0")
        self.assertRaises(ValueError, IPWildcard, ".0.0.0.0")
        self.assertRaises(ValueError, IPWildcard, "0.0.0.0.")
        self.assertRaises(ValueError, IPWildcard, "1-FF::/16")
        self.assertRaises(ValueError, IPWildcard, "1,2::/16")
        self.assertRaises(ValueError, IPWildcard, "1::2::3")
        self.assertRaises(ValueError, IPWildcard, ":1::")
        self.assertRaises(ValueError, IPWildcard, ":1:2:3:4:5:6:7:8")
        self.assertRaises(ValueError, IPWildcard, "1:2:3:4:5:6:7:8:")
        self.assertRaises(ValueError, IPWildcard, "1:2:3:4:5:6:7.8.9:10")
        self.assertRaises(ValueError, IPWildcard, "1:2:3:4:5:6:7:8.9.10.11")
        self.assertRaises(ValueError, IPWildcard, ":")
        self.assertRaises(ValueError, IPWildcard, "1:2:3:4:5:6:7")
        self.assertRaises(ValueError, IPWildcard, "1:2:3:4:5:6:7/16")
        self.assertRaises(ValueError, IPWildcard, "FFFFF::")
        self.assertRaises(ValueError, IPWildcard, "::FFFFF")
        self.assertRaises(ValueError, IPWildcard, "1:FFFFF::7:8")
        self.assertRaises(ValueError, IPWildcard, "1:AAAA-FFFF0::")
        self.assertRaises(ValueError, IPWildcard, "FFFFF-AAAA::")
        self.assertRaises(ValueError, IPWildcard, "FFFF-AAAA::")
        self.assertRaises(ValueError, IPWildcard, "2-1::")
        self.assertRaises(ValueError, IPWildcard, "1:FFFF-0::")
        self.assertRaises(ValueError, IPWildcard, "1::FFFF-AAAA")
        self.assertRaises(ValueError, IPWildcard, ":::")
        self.assertRaises(ValueError, IPWildcard, "1:2:3:$::")
        self.assertRaises(ValueError, IPWildcard, "1.2.3.4:ffff::")
        self.assertRaises(ValueError, IPWildcard, "x")

    def testIPWildcardContainment(self):
        wild = IPWildcard("0.0.0.0")
        self.assertTrue(IPAddr("0.0.0.0") in wild)
        self.assertTrue(IPAddr("0.0.0.1") not in wild)
        self.assertTrue("0.0.0.0" in wild)
        self.assertTrue("0.0.0.1" not in wild)
        wild = IPWildcard("0.0.0.0/31")
        self.assertTrue(IPAddr("0.0.0.0") in wild)
        self.assertTrue(IPAddr("0.0.0.1") in wild)
        self.assertTrue(IPAddr("0.0.0.2") not in wild)
        self.assertTrue("0.0.0.0" in wild)
        self.assertTrue("0.0.0.1" in wild)
        self.assertTrue("0.0.0.2" not in wild)
        wild = IPWildcard("255.255.255.254-255")
        self.assertTrue(IPAddr("255.255.255.254") in wild)
        self.assertTrue(IPAddr("255.255.255.255") in wild)
        self.assertTrue(IPAddr("255.255.255.253") not in wild)
        self.assertTrue("255.255.255.254" in wild)
        self.assertTrue("255.255.255.255" in wild)
        self.assertTrue("255.255.255.253" not in wild)
        wild = IPWildcard("3,2,1.4.5.6")
        self.assertTrue(IPAddr("1.4.5.6") in wild)
        self.assertTrue(IPAddr("2.4.5.6") in wild)
        self.assertTrue(IPAddr("3.4.5.6") in wild)
        self.assertTrue(IPAddr("4.4.5.6") not in wild)
        self.assertTrue("1.4.5.6" in wild)
        self.assertTrue("2.4.5.6" in wild)
        self.assertTrue("3.4.5.6" in wild)
        self.assertTrue("4.4.5.6" not in wild)
        wild = IPWildcard("0,255.0,255.0,255.0,255")
        self.assertTrue(IPAddr("0.0.0.0") in wild)
        self.assertTrue(IPAddr("0.0.0.255") in wild)
        self.assertTrue(IPAddr("0.0.255.0") in wild)
        self.assertTrue(IPAddr("0.255.0.0") in wild)
        self.assertTrue(IPAddr("255.0.0.0") in wild)
        self.assertTrue(IPAddr("255.255.0.0") in wild)
        self.assertTrue(IPAddr("255.0.255.0") in wild)
        self.assertTrue(IPAddr("255.0.0.255") in wild)
        self.assertTrue(IPAddr("0.255.0.255") in wild)
        self.assertTrue(IPAddr("0.255.255.0") in wild)
        self.assertTrue(IPAddr("0.0.255.255") in wild)
        self.assertTrue(IPAddr("0.255.255.255") in wild)
        self.assertTrue(IPAddr("255.0.255.255") in wild)
        self.assertTrue(IPAddr("255.255.0.255") in wild)
        self.assertTrue(IPAddr("255.255.255.0") in wild)
        self.assertTrue(IPAddr("255.255.255.255") in wild)
        self.assertTrue(IPAddr("255.255.255.254") not in wild)
        self.assertTrue(IPAddr("255.255.254.255") not in wild)
        self.assertTrue(IPAddr("255.254.255.255") not in wild)
        self.assertTrue(IPAddr("254.255.255.255") not in wild)
        self.assertTrue("0.0.0.0" in wild)
        self.assertTrue("0.0.0.255" in wild)
        self.assertTrue("0.0.255.0" in wild)
        self.assertTrue("0.255.0.0" in wild)
        self.assertTrue("255.0.0.0" in wild)
        self.assertTrue("255.255.0.0" in wild)
        self.assertTrue("255.0.255.0" in wild)
        self.assertTrue("255.0.0.255" in wild)
        self.assertTrue("0.255.0.255" in wild)
        self.assertTrue("0.255.255.0" in wild)
        self.assertTrue("0.0.255.255" in wild)
        self.assertTrue("0.255.255.255" in wild)
        self.assertTrue("255.0.255.255" in wild)
        self.assertTrue("255.255.0.255" in wild)
        self.assertTrue("255.255.255.0" in wild)
        self.assertTrue("255.255.255.255" in wild)
        self.assertTrue("255.255.255.254" not in wild)
        self.assertTrue("255.255.254.255" not in wild)
        self.assertTrue("255.254.255.255" not in wild)
        self.assertTrue("254.255.255.255" not in wild)
        if ipv6_enabled():
            wild = IPWildcard("::")
            self.assertTrue(IPAddr("::") in wild)
            self.assertTrue(IPAddr("::1") not in wild)
            self.assertTrue("::" in wild)
            self.assertTrue("::1" not in wild)
            wild = IPWildcard("::/127")
            self.assertTrue(IPAddr("::") in wild)
            self.assertTrue(IPAddr("::1") in wild)
            self.assertTrue(IPAddr("::2") not in wild)
            self.assertTrue("::" in wild)
            self.assertTrue("::1" in wild)
            self.assertTrue("::2" not in wild)
            wild = IPWildcard("0:ffff::0.0.0.0,1")
            self.assertTrue(IPAddr("0:ffff::0.0.0.0") in wild)
            self.assertTrue(IPAddr("0:ffff::0.0.0.1") in wild)
            self.assertTrue(IPAddr("0:ffff::0.0.0.2") not in wild)
            self.assertTrue("0:ffff::0.0.0.0" in wild)
            self.assertTrue("0:ffff::0.0.0.1" in wild)
            self.assertTrue("0:ffff::0.0.0.2" not in wild)
            wild = IPWildcard("0:ffff:0:0:0:0:0.253-254.125-126,255.x")
            self.assertTrue(IPAddr("0:ffff::0.253.125.1") in wild)
            self.assertTrue(IPAddr("0:ffff::0.254.125.2") in wild)
            self.assertTrue(IPAddr("0:ffff::0.253.126.3") in wild)
            self.assertTrue(IPAddr("0:ffff::0.254.126.4") in wild)
            self.assertTrue(IPAddr("0:ffff::0.253.255.5") in wild)
            self.assertTrue(IPAddr("0:ffff::0.254.255.6") in wild)
            self.assertTrue(IPAddr("0:ffff::0.255.255.7") not in wild)
            self.assertTrue("0:ffff::0.253.125.1" in wild)
            self.assertTrue("0:ffff::0.254.125.2" in wild)
            self.assertTrue("0:ffff::0.253.126.3" in wild)
            self.assertTrue("0:ffff::0.254.126.4" in wild)
            self.assertTrue("0:ffff::0.253.255.5" in wild)
            self.assertTrue("0:ffff::0.254.255.6" in wild)
            self.assertTrue("0:ffff::0.255.255.7" not in wild)
            wild = IPWildcard("0.0.0.0")
            self.assertTrue("::ffff:0:0" in wild)
            self.assertTrue("::" not in wild)
            wild = IPWildcard("::ffff:0:0")
            self.assertTrue("0.0.0.0" in wild)
            wild = IPWildcard("::")
            self.assertTrue("0.0.0.0" not in wild)

    def testIPWildcardIteration(self):
        self.assertEqual(set(IPWildcard("0.0.0.0")), set([IPAddr("0.0.0.0")]))
        self.assertEqual(set(IPWildcard("0.0.0.0/31")),
                         set(IPAddr(x) for x in ["0.0.0.0", "0.0.0.1"]))
        self.assertEqual(set(IPWildcard("255.255.255.254-255")),
                         set(IPAddr(x) for x in ["255.255.255.254",
                                                 "255.255.255.255"]))
        self.assertEqual(set(IPWildcard("3,2,1.4.5.6")),
                         set(IPAddr(x) for x in ["1.4.5.6",
                                                 "2.4.5.6",
                                                 "3.4.5.6"]))
        self.assertEqual(set(IPWildcard("0,255.0,255.0,255.0,255")),
                         set(IPAddr(x) for x in ["0.0.0.0",
                                                 "0.0.0.255",
                                                 "0.0.255.0",
                                                 "0.255.0.0",
                                                 "255.0.0.0",
                                                 "255.255.0.0",
                                                 "255.0.255.0",
                                                 "255.0.0.255",
                                                 "0.255.0.255",
                                                 "0.255.255.0",
                                                 "0.0.255.255",
                                                 "0.255.255.255",
                                                 "255.0.255.255",
                                                 "255.255.0.255",
                                                 "255.255.255.0",
                                                 "255.255.255.255"]))
        if ipv6_enabled():
            self.assertEqual(set(IPWildcard("::")), set([IPAddr("::")]))
            self.assertEqual(set(IPWildcard("::/127")),
                             set(IPAddr(x) for x in ["::0", "::1"]))
            self.assertEqual(set(IPWildcard("0:ffff::0.0.0.0,1")),
                             set(IPAddr(x) for x in
                                 ["0:ffff::0", "0:ffff::1"]))
            self.assertEqual(set(IPWildcard(
                        "0:ffff::0.253-254.125-126,255.1")),
                             set(IPAddr(x) for x in ["0:ffff::0.253.125.1",
                                                     "0:ffff::0.253.126.1",
                                                     "0:ffff::0.253.255.1",
                                                     "0:ffff::0.254.125.1",
                                                     "0:ffff::0.254.126.1",
                                                     "0:ffff::0.254.255.1"]))

    def testIPWildcardIsIPv6(self):
        wild = IPWildcard("0.0.0.0")
        self.assertEqual(wild.is_ipv6(), False)
        wild = IPWildcard("0.0.0.0/31")
        self.assertEqual(wild.is_ipv6(), False)
        wild = IPWildcard("255.255.255.254-255")
        self.assertEqual(wild.is_ipv6(), False)
        wild = IPWildcard("3,2,1.4.5.6")
        self.assertEqual(wild.is_ipv6(), False)
        wild = IPWildcard("0,255.0,255.0,255.0,255")
        self.assertEqual(wild.is_ipv6(), False)
        if ipv6_enabled():
            wild = IPWildcard("::")
            self.assertEqual(wild.is_ipv6(), True)
            wild = IPWildcard("::/127")
            self.assertEqual(wild.is_ipv6(), True)
            wild = IPWildcard("0:ffff::0.0.0.0,1")
            self.assertEqual(wild.is_ipv6(), True)
            wild = IPWildcard("0:ffff:0:0:0:0:0.253-254.125-126,255.x")
            self.assertEqual(wild.is_ipv6(), True)

    def testPickle(self):
        self.assertRaises(TypeError, pickle.dumps,
                          IPWildcard("1.2.3.4"))
        for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
            self.assertRaises(TypeError, pickle.dumps,
                              IPWildcard("1.2.3.4"), i)
        if ipv6_enabled():
            self.assertRaises(TypeError, pickle.dumps,
                              IPWildcard("::"))
            for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
                self.assertRaises(TypeError, pickle.dumps,
                                  IPWildcard("::"), i)

class TestTCPFlags(unittest.TestCase):

    def testTCPFlagsConstruction(self):
        for i in range(0, 256):
            TCPFlags(i)
        TCPFlags('F')
        TCPFlags('S')
        TCPFlags('R')
        TCPFlags('P')
        TCPFlags('U')
        TCPFlags('E')
        TCPFlags('C')
        TCPFlags('  A  ')
        TCPFlags('FSRPUECA')
        TCPFlags('f')
        TCPFlags('s')
        TCPFlags('r')
        TCPFlags('p')
        TCPFlags('u')
        TCPFlags('e')
        TCPFlags('c')
        TCPFlags('  a  ')
        TCPFlags('fsrpueca')
        TCPFlags('aa')
        TCPFlags('')
        TCPFlags(TCPFlags(0))
        TCPFlags(TCPFlags(''))

    def testTCPFlagsBadValues(self):
        self.assertRaises(ValueError, TCPFlags, -1)
        self.assertRaises(ValueError, TCPFlags, 256)
        self.assertRaises(ValueError, TCPFlags, 'x')
        self.assertRaises(ValueError, TCPFlags, 'fsrpuecax')

    def testTCPFlagsString(self):
        self.assertEqual(str(TCPFlags('FSRPAUEC')), 'FSRPAUEC')
        self.assertEqual(str(TCPFlags('F')), 'F')
        self.assertEqual(str(TCPFlags('C')), 'C')
        self.assertEqual(str(TCPFlags('FSRAUEC')), 'FSRAUEC')
        self.assertEqual(TCPFlags('FSRPAUEC').padded(), 'FSRPAUEC')
        self.assertEqual(TCPFlags('F').padded(), 'F       ')
        self.assertEqual(TCPFlags('C').padded(), '       C')
        self.assertEqual(TCPFlags('FSRAUEC').padded(), 'FSR AUEC')

    def testTCPFlagsMembers(self):
        flags = TCPFlags('fsrpueca')
        self.assertEqual(flags.fin, True)
        self.assertEqual(flags.syn, True)
        self.assertEqual(flags.rst, True)
        self.assertEqual(flags.psh, True)
        self.assertEqual(flags.ack, True)
        self.assertEqual(flags.urg, True)
        self.assertEqual(flags.ece, True)
        self.assertEqual(flags.cwr, True)
        flags = TCPFlags('')
        self.assertEqual(flags.fin, False)
        self.assertEqual(flags.syn, False)
        self.assertEqual(flags.rst, False)
        self.assertEqual(flags.psh, False)
        self.assertEqual(flags.ack, False)
        self.assertEqual(flags.urg, False)
        self.assertEqual(flags.ece, False)
        self.assertEqual(flags.cwr, False)

    def testTCPFlagsConstants(self):
        self.assertEqual(TCPFlags('f'), TCP_FIN)
        self.assertEqual(TCPFlags('s'), TCP_SYN)
        self.assertEqual(TCPFlags('r'), TCP_RST)
        self.assertEqual(TCPFlags('p'), TCP_PSH)
        self.assertEqual(TCPFlags('a'), TCP_ACK)
        self.assertEqual(TCPFlags('u'), TCP_URG)
        self.assertEqual(TCPFlags('e'), TCP_ECE)
        self.assertEqual(TCPFlags('c'), TCP_CWR)

    def testTCPFlagsIntConv(self):
        self.assertEqual(int(TCP_FIN), 1)
        self.assertEqual(int(TCP_SYN), 2)
        self.assertEqual(int(TCP_RST), 4)
        self.assertEqual(int(TCP_PSH), 8)
        self.assertEqual(int(TCP_ACK), 16)
        self.assertEqual(int(TCP_URG), 32)
        self.assertEqual(int(TCP_ECE), 64)
        self.assertEqual(int(TCP_CWR), 128)

    def testTCPFlagsInequality(self):
        self.assertTrue(TCPFlags('f') == TCPFlags ('F'))
        self.assertTrue(TCPFlags('f') != TCPFlags ('FA'))

    def testTCPFlagsBinary(self):
        self.assertEqual(~TCPFlags('fsrp'), TCPFlags('ueca'))
        self.assertEqual(TCPFlags('fsrp') & TCPFlags('fpua'), TCPFlags('fp'))
        self.assertEqual(TCPFlags('frp') | TCPFlags('fa'), TCPFlags('frpa'))
        self.assertEqual(TCPFlags('frp') ^ TCPFlags('fa'), TCPFlags('rpa'))
        self.assertTrue(TCPFlags('a'))
        self.assertTrue(not TCPFlags(''))

    def testTCPFlagsMatches(self):
        self.assertEqual(TCPFlags('fsrp').matches('fs/fsau'), True)
        self.assertEqual(TCPFlags('fsrp').matches('fs/fspu'), False)
        self.assertEqual(TCPFlags('fs').matches('fs'), True)
        self.assertEqual(TCPFlags('fsa').matches('fs'), True)
        self.assertRaises(ValueError, TCPFlags('').matches, 'a/s/')
        self.assertRaises(ValueError, TCPFlags('').matches, 'x')

    def testPickle(self):
        self.assertRaises(TypeError, pickle.dumps,
                          TCPFlags('AUE'))
        for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
            self.assertRaises(TypeError, pickle.dumps,
                              TCPFlags('AUE'), i)


class TestRWRec(unittest.TestCase):

    def testRWRecEmptyRec(self):
        RWRec()

    def testRWRecMostlyFullRec(self):
        RWRec(application = 1, bytes = 2, dip = "3.4.5.6", dport = 7,
              duration = datetime.timedelta(8),
              initial_tcpflags = TCPFlags(9), input = 10,
              nhip = "11.12.13.14", output = 15, packets = 16,
              protocol = 6, session_tcpflags = TCPFlags(18),
              sip = "19.20.21.22", sport = 23,
              stime = datetime.datetime.utcnow(), tcpflags = TCPFlags(25))
        RWRec({'application': 1, 'bytes': 2, 'dip': "3.4.5.6", 'dport': 7,
               'duration': datetime.timedelta(8),
               'initial_tcpflags': TCPFlags(9), 'input': 10,
               'nhip': "11.12.13.14", 'output': 15, 'packets': 16,
               'protocol': 6, 'session_tcpflags': TCPFlags(18),
               'sip': "19.20.21.22", 'sport': 23,
               'stime': datetime.datetime.utcnow(),
               'tcpflags': TCPFlags(25)})

    def testRWRecCreationWithTimes(self):
        start = datetime.datetime.utcnow()
        duration = datetime.timedelta(minutes = 10)
        end   = start + duration
        a = RWRec(stime = start, duration = duration)
        b = RWRec(stime = start, etime = end)
        self.assertEqual(a, b)
        c = RWRec(stime = start, etime = end, duration = duration)
        self.assertEqual(a, c)

    def testRWRecIntegerFields(self):
        rec = RWRec()
        rec.application = 1
        rec.bytes = 2
        rec.dport = 3
        rec.input = 4
        rec.output = 5
        rec.packets = 6
        rec.protocol = 7
        rec.sport = 8
        self.assertEqual(rec.application, 1)
        self.assertEqual(rec.bytes, 2)
        self.assertEqual(rec.dport, 3)
        self.assertEqual(rec.input, 4)
        self.assertEqual(rec.output, 5)
        self.assertEqual(rec.packets, 6)
        self.assertEqual(rec.protocol, 7)
        self.assertEqual(rec.sport, 8)
        self.assertRaises(ValueError, setattr, rec, 'application', -1)
        self.assertRaises(ValueError, setattr, rec, 'bytes', -1)
        self.assertRaises(ValueError, setattr, rec, 'dport', -1)
        self.assertRaises(ValueError, setattr, rec, 'input', -1)
        self.assertRaises(ValueError, setattr, rec, 'output', -1)
        self.assertRaises(ValueError, setattr, rec, 'packets', -1)
        self.assertRaises(ValueError, setattr, rec, 'protocol', -1)
        self.assertRaises(ValueError, setattr, rec, 'sport', -1)
        self.assertRaises(ValueError, setattr, rec, 'application', 0x10000)
        self.assertRaises(ValueError, setattr, rec, 'bytes', 0x100000000)
        self.assertRaises(ValueError, setattr, rec, 'dport', 0x10000)
        self.assertRaises(ValueError, setattr, rec, 'input', 0x10000)
        self.assertRaises(ValueError, setattr, rec, 'output', 0x10000)
        self.assertRaises(ValueError, setattr, rec, 'packets', 0x100000000)
        self.assertRaises(ValueError, setattr, rec, 'protocol', 0x100)
        self.assertRaises(ValueError, setattr, rec, 'sport', 0x10000)
        self.assertRaises(TypeError, setattr, rec, 'application', '0')
        self.assertRaises(TypeError, setattr, rec, 'bytes', '0')
        self.assertRaises(TypeError, setattr, rec, 'dport', '0')
        self.assertRaises(TypeError, setattr, rec, 'input', '0')
        self.assertRaises(TypeError, setattr, rec, 'output', '0')
        self.assertRaises(TypeError, setattr, rec, 'packets', '0')
        self.assertRaises(TypeError, setattr, rec, 'protocol', '0')
        self.assertRaises(TypeError, setattr, rec, 'sport', '0')

    def testRWRecIPFields(self):
        rec = RWRec()
        rec.sip = IPAddr("1.2.3.4")
        rec.dip = IPAddr("5.6.7.8")
        rec.nhip = IPAddr("9.10.11.12")
        self.assertEqual(rec.sip, IPAddr("1.2.3.4"))
        self.assertEqual(rec.dip, IPAddr("5.6.7.8"))
        self.assertEqual(rec.nhip, IPAddr("9.10.11.12"))
        rec.sip = "1.2.3.4"
        rec.dip = "5.6.7.8"
        rec.nhip = "9.10.11.12"
        self.assertEqual(rec.sip, IPAddr("1.2.3.4"))
        self.assertEqual(rec.dip, IPAddr("5.6.7.8"))
        self.assertEqual(rec.nhip, IPAddr("9.10.11.12"))
        self.assertRaises(ValueError, setattr, rec, 'sip', '0.0.0')
        self.assertRaises(ValueError, setattr, rec, 'dip', '0.0.0')
        self.assertRaises(ValueError, setattr, rec, 'nhip', '0.0.0')
        self.assertRaises(ValueError, setattr, rec, 'sip', '::x')
        self.assertRaises(ValueError, setattr, rec, 'dip', '::x')
        self.assertRaises(ValueError, setattr, rec, 'nhip', '::x')
        self.assertRaises(TypeError, setattr, rec, 'sip', 0)
        self.assertRaises(TypeError, setattr, rec, 'dip', 0)
        self.assertRaises(TypeError, setattr, rec, 'nhip', 0)
        if ipv6_enabled():
            rec.sip = IPAddr("0102:0304:0506::1.2.3.4")
            rec.dip = IPAddr("0708:090a:0b0c::5.6.7.8")
            rec.nhip = IPAddr("0d0e:0f10:1112::9.10.11.12")
            self.assertEqual(rec.sip, IPAddr("0102:0304:0506::1.2.3.4"))
            self.assertEqual(rec.dip, IPAddr("0708:090a:0b0c::5.6.7.8"))
            self.assertEqual(rec.nhip, IPAddr("0d0e:0f10:1112::9.10.11.12"))
            rec.sip = "0102:0304:0506::1.2.3.4"
            rec.dip = "0708:090a:0b0c::5.6.7.8"
            rec.nhip = "0d0e:0f10:1112::9.10.11.12"
            self.assertEqual(rec.sip, IPAddr("0102:0304:0506::1.2.3.4"))
            self.assertEqual(rec.dip, IPAddr("0708:090a:0b0c::5.6.7.8"))
            self.assertEqual(rec.nhip, IPAddr("0d0e:0f10:1112::9.10.11.12"))

    def testRWRecFlagsFields(self):
        rec = RWRec(protocol=6)
        self.assertEqual(rec.tcpflags, TCPFlags(''))
        self.assertEqual(rec.initial_tcpflags, None)
        self.assertEqual(rec.session_tcpflags, None)
        rec.tcpflags = TCPFlags('a')
        self.assertEqual(rec.tcpflags, TCPFlags('a'))
        self.assertEqual(rec.initial_tcpflags, None)
        self.assertEqual(rec.session_tcpflags, None)
        rec.initial_tcpflags = TCPFlags('p')
        self.assertEqual(rec.tcpflags, TCPFlags('p'))
        self.assertEqual(rec.initial_tcpflags, TCPFlags('p'))
        self.assertEqual(rec.session_tcpflags, TCPFlags(''))
        rec.session_tcpflags = TCPFlags('u')
        self.assertEqual(rec.tcpflags, TCPFlags('pu'))
        self.assertEqual(rec.initial_tcpflags, TCPFlags('p'))
        self.assertEqual(rec.session_tcpflags, TCPFlags('u'))
        rec.tcpflags = 'a'
        self.assertEqual(rec.tcpflags, TCPFlags('a'))
        self.assertEqual(rec.initial_tcpflags, None)
        self.assertEqual(rec.session_tcpflags, None)
        rec.initial_tcpflags = 'p'
        self.assertEqual(rec.tcpflags, TCPFlags('p'))
        self.assertEqual(rec.initial_tcpflags, TCPFlags('p'))
        self.assertEqual(rec.session_tcpflags, TCPFlags(''))
        rec.session_tcpflags = 'u'
        self.assertEqual(rec.tcpflags, TCPFlags('pu'))
        self.assertEqual(rec.initial_tcpflags, TCPFlags('p'))
        self.assertEqual(rec.session_tcpflags, TCPFlags('u'))
        rec.tcpflags = 16
        self.assertEqual(rec.tcpflags, TCPFlags('a'))
        self.assertEqual(rec.initial_tcpflags, None)
        self.assertEqual(rec.session_tcpflags, None)
        rec.session_tcpflags = 8
        self.assertEqual(rec.tcpflags, TCPFlags('p'))
        self.assertEqual(rec.initial_tcpflags, TCPFlags(''))
        self.assertEqual(rec.session_tcpflags, TCPFlags('p'))
        rec.initial_tcpflags = 32
        self.assertEqual(rec.tcpflags, TCPFlags('pu'))
        self.assertEqual(rec.initial_tcpflags, TCPFlags('u'))
        self.assertEqual(rec.session_tcpflags, TCPFlags('p'))
        rec.protocol = 17
        self.assertEqual(rec.tcpflags, TCPFlags('pu'))
        self.assertEqual(rec.initial_tcpflags, None)
        self.assertEqual(rec.session_tcpflags, None)
        self.assertRaises(AttributeError, setattr, rec, 'initial_tcpflags', 16)
        self.assertRaises(AttributeError, setattr, rec, 'session_tcpflags', 16)
        rec.protocol = 6
        self.assertRaises(ValueError, setattr, rec, 'tcpflags', -1)
        self.assertRaises(ValueError, setattr, rec, 'tcpflags', 'x')
        self.assertRaises(ValueError, setattr, rec, 'tcpflags', 256)
        self.assertRaises(ValueError, setattr, rec, 'initial_tcpflags', -1)
        self.assertRaises(ValueError, setattr, rec, 'initial_tcpflags', 'x')
        self.assertRaises(ValueError, setattr, rec, 'initial_tcpflags', 256)
        self.assertRaises(ValueError, setattr, rec, 'session_tcpflags', -1)
        self.assertRaises(ValueError, setattr, rec, 'session_tcpflags', 'x')
        self.assertRaises(ValueError, setattr, rec, 'session_tcpflags', 256)

    def testRWRecSiteBasedFields(self):
        rec = RWRec()
        if have_site_config():
            s = sensors()[0]
            classtype = classtypes()[0]
            rec.sensor = s
            rec.classtype = classtype
            self.assertEqual(rec.sensor, s)
            self.assertEqual(rec.classtype, classtype)
            self.assertEqual(rec.classname, classtype[0])
            self.assertEqual(rec.typename, classtype[1])
        self.assertRaises(TypeError, setattr, rec, 'sensor', 1)
        self.assertRaises(TypeError, setattr, rec, 'classtype', (1, 1))
        self.assertRaises(versionedAttributeError, setattr, rec,
                          'classname', 'all')
        self.assertRaises(versionedAttributeError, setattr, rec,
                          'typename', 'in')

    def testRWRecBitFields(self):
        rec = RWRec()
        self.assertEqual(rec.finnoack, False)
        self.assertEqual(rec.timeout_killed, False)
        self.assertEqual(rec.timeout_started, False)
        rec.finnoack = True
        self.assertEqual(rec.finnoack, True)
        self.assertEqual(rec.timeout_killed, False)
        self.assertEqual(rec.timeout_started, False)
        rec.timeout_killed = True
        self.assertEqual(rec.finnoack, True)
        self.assertEqual(rec.timeout_killed, True)
        self.assertEqual(rec.timeout_started, False)
        rec.timeout_started = True
        self.assertEqual(rec.finnoack, True)
        self.assertEqual(rec.timeout_killed, True)
        self.assertEqual(rec.timeout_started, True)
        rec.finnoack = False
        rec.timeout_killed = False
        rec.timeout_started = False
        self.assertEqual(rec.finnoack, False)
        self.assertEqual(rec.timeout_killed, False)
        self.assertEqual(rec.timeout_started, False)

    def testRWRecIPV6Conversion(self):
        if ipv6_enabled():
            rec = RWRec()
            self.assertEqual(rec.sip.is_ipv6(), False)
            self.assertEqual(rec.dip.is_ipv6(), False)
            self.assertEqual(rec.nhip.is_ipv6(), False)
            rec.sip = "::"
            self.assertEqual(rec.sip.is_ipv6(), True)
            self.assertEqual(rec.dip.is_ipv6(), True)
            self.assertEqual(rec.nhip.is_ipv6(), True)
            self.assertEqual(rec.dip, IPAddr("::ffff:0000:0000"))
            self.assertEqual(rec.nhip, IPAddr("::ffff:0000:0000"))
            rec.sip = "0.0.0.0"
            self.assertEqual(rec.sip.is_ipv6(), True)
            self.assertEqual(rec.dip.is_ipv6(), True)
            self.assertEqual(rec.nhip.is_ipv6(), True)
            self.assertEqual(rec.sip, IPAddr("::ffff:0000:0000"))
            self.assertEqual(rec.dip, IPAddr("::ffff:0000:0000"))
            self.assertEqual(rec.nhip, IPAddr("::ffff:0000:0000"))

    def testRWRecIsWeb(self):
        self.assertEqual(RWRec().is_web(), False)
        self.assertEqual(RWRec(sport=80).is_web(), False)
        self.assertEqual(RWRec(dport=80).is_web(), False)
        self.assertEqual(RWRec(sport=8080).is_web(), False)
        self.assertEqual(RWRec(dport=8080).is_web(), False)
        self.assertEqual(RWRec(sport=443).is_web(), False)
        self.assertEqual(RWRec(dport=443).is_web(), False)
        self.assertEqual(RWRec(protocol=6, sport=80).is_web(), True)
        self.assertEqual(RWRec(protocol=6, dport=80).is_web(), True)
        self.assertEqual(RWRec(protocol=6, sport=8080).is_web(), True)
        self.assertEqual(RWRec(protocol=6, dport=8080).is_web(), True)
        self.assertEqual(RWRec(protocol=6, sport=443).is_web(), True)
        self.assertEqual(RWRec(protocol=6, dport=443).is_web(), True)
        rec = RWRec(protocol=6, sport=80, dport=80)
        self.assertEqual(rec.is_web(), True)
        rec.sport = 0
        self.assertEqual(rec.is_web(), True)
        rec.dport = 0
        self.assertEqual(rec.is_web(), False)

    def testRWRecIsICMP(self):
        self.assertEqual(RWRec().is_icmp(), False)
        self.assertEqual(RWRec(protocol=1).is_icmp(), True)
        if ipv6_enabled():
            self.assertEqual(RWRec(protocol=58).is_web(), False)
            self.assertEqual(RWRec(protocol=58, sip="::").is_icmp(), True)

    def testRWRecEquality(self):
        reca = RWRec()
        recb = RWRec()
        self.assertEqual(reca == recb, True)
        self.assertEqual(reca != recb, False)
        reca.input = 1
        self.assertEqual(reca == recb, False)
        self.assertEqual(reca != recb, True)
        recb.input = 1
        self.assertEqual(reca == recb, True)
        self.assertEqual(reca != recb, False)

    def testRWRecAsDict(self):
        rec = RWRec(sip="1.1.1.1", input=4)
        recdict = rec.as_dict()
        self.assertEqual(recdict['sip'] == IPAddr("1.1.1.1"), True)
        self.assertEqual(recdict['input'] == 4, True)

    def testRWRecTimeFields(self):
        rec = RWRec(stime=datetime.datetime(year=2000,month=6,day=15),
                    duration = datetime.timedelta(days=1,minutes=1))
        self.assertEqual(rec.stime,
                         datetime.datetime(year=2000,month=6,day=15))
        self.assertEqual(rec.duration, datetime.timedelta(days=1,minutes=1))
        self.assertEqual(rec.etime, datetime.datetime(year=2000,month=6,day=16,
                                                      minute=1))
        rec = RWRec(stime=datetime.datetime(year=1970,month=1,day=1),
                    duration = datetime.timedelta(minutes=1))
        self.assertEqual(rec.stime, datetime.datetime(year=1970,month=1,day=1))
        self.assertEqual(rec.duration, datetime.timedelta(minutes=1))
        self.assertEqual(rec.etime, datetime.datetime(year=1970,month=1,day=1,
                                                      minute=1))
        rec.etime = datetime.datetime(year=1970,month=1,day=1,minute=2)
        self.assertEqual(rec.stime, datetime.datetime(year=1970,month=1,day=1))
        self.assertEqual(rec.duration, datetime.timedelta(minutes=2))
        self.assertEqual(rec.etime, datetime.datetime(year=1970,month=1,day=1,
                                                      minute=2))
        rec.stime = datetime.datetime(year=1970,month=1,day=1,minute=1)
        self.assertEqual(rec.stime, datetime.datetime(year=1970,month=1,day=1,
                                                      minute=1))
        self.assertEqual(rec.duration, datetime.timedelta(minutes=2))
        self.assertEqual(rec.etime, datetime.datetime(year=1970,month=1,day=1,
                                                      minute=3))
        rec.duration = datetime.timedelta(minutes=1)
        self.assertEqual(rec.stime, datetime.datetime(year=1970,month=1,day=1,
                                                      minute=1))
        self.assertEqual(rec.duration, datetime.timedelta(minutes=1))
        self.assertEqual(rec.etime, datetime.datetime(year=1970,month=1,day=1,
                                                      minute=2))
        rec.stime = datetime.datetime(year=2038,month=1,day=19,
                                      hour=3,minute=14,second=7)
        self.assertRaises(ValueError, setattr, rec, 'stime',
                          datetime.datetime(year=1969,month=12,day=31))
        self.assertRaises(ValueError, setattr, rec, 'stime',
                          datetime.datetime(
                              year=2038,month=1,day=19,
                              hour=3,minute=14,second=8))
        rec.duration = datetime.timedelta(milliseconds=0xffffffff)
        self.assertRaises(ValueError, setattr, rec, 'duration',
                          datetime.timedelta(milliseconds=0x100000000))
        self.assertRaises(ValueError, setattr, rec, 'etime',
                          rec.stime +
                          datetime.timedelta(milliseconds=0x100000000))
        self.assertEqual(rec.etime, rec.stime + rec.duration)
        rec.etime = rec.stime + datetime.timedelta(milliseconds=0xffffffff)
        self.assertRaises(ValueError, setattr, rec, 'etime',
                          rec.stime +
                          datetime.timedelta(milliseconds=0x100000000))

    def testRWRecIPConversion(self):
        a = RWRec()
        self.assertEqual(a.is_ipv6(), False)
        b = a.to_ipv4()
        self.assertEqual(b.is_ipv6(), False)
        self.assertEqual(b.sip, IPAddr("0.0.0.0"))
        self.assertEqual(b.dip, IPAddr("0.0.0.0"))
        self.assertEqual(b.nhip, IPAddr("0.0.0.0"))
        if ipv6_enabled():
            c = a.to_ipv6()
            self.assertEqual(a.is_ipv6(), False)
            self.assertEqual(c.is_ipv6(), True)
            self.assertEqual(c.sip, IPAddr("::ffff:0.0.0.0"))
            self.assertEqual(c.dip, IPAddr("::ffff:0.0.0.0"))
            self.assertEqual(c.nhip, IPAddr("::ffff:0.0.0.0"))
            d = c.to_ipv4()
            e = c.to_ipv6()
            self.assertEqual(a.is_ipv6(), False)
            self.assertEqual(b.is_ipv6(), False)
            self.assertEqual(c.is_ipv6(), True)
            self.assertEqual(d.is_ipv6(), False)
            self.assertEqual(e.is_ipv6(), True)
            self.assertEqual(d.sip, IPAddr("0.0.0.0"))
            self.assertEqual(d.dip, IPAddr("0.0.0.0"))
            self.assertEqual(d.nhip, IPAddr("0.0.0.0"))
            self.assertEqual(e.sip, IPAddr("::ffff:0.0.0.0"))
            self.assertEqual(e.dip, IPAddr("::ffff:0.0.0.0"))
            self.assertEqual(e.nhip, IPAddr("::ffff:0.0.0.0"))
            a.sip = IPAddr("::")
            self.assertEqual(a.is_ipv6(), True)
            self.assertEqual(a.sip, IPAddr("::"))
            f = a.to_ipv4()
            self.assertEqual(a.is_ipv6(), True)
            self.assertEqual(a.sip, IPAddr("::"))
            self.assertEqual(f, None)

    def testPickle(self):
        self.assertRaises(TypeError, pickle.dumps,
                          RWRec())
        for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
            self.assertRaises(TypeError, pickle.dumps,
                              RWRec(), i)


class TestIPSet(unittest.TestCase):

    def setUp(self):
        warnings.simplefilter("ignore", RuntimeWarning)
        self.tmpdir = tempfile.mkdtemp()
        self.tmpfile = tempname(self.tmpdir)
        warnings.simplefilter("default", RuntimeWarning)

    def rmfile(self):
        os.remove(self.tmpfile)

    def tearDown(self):
        try:
            self.rmfile()
        except:
            pass
        os.rmdir(self.tmpdir)

    def testIPSetConstruction(self):
        s = IPSet()
        s.save(self.tmpfile)
        s = IPSet.load(self.tmpfile)
        self.rmfile()
        self.assertEqual(0, s.cardinality())
        IPSet(["1.2.3.4"])
        IPSet(["1.2.3.4", "5.6.7.8"])
        IPSet(IPAddr(x) for x in ["1.2.3.4"])
        IPSet(IPAddr(x) for x in ["1.2.3.4", "5.6.7.8"])
        IPSet(["1.2.3.4", IPAddr("5.6.7.8")])
        if IPSet.supports_ipv6():
            IPSet(["2001:db8:1:2::3:4"])
            IPSet(["2001:db8:1:2::3:4", "10.10.10.10"])
            IPSet(["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            IPSet(IPAddr(x) for x in ["2001:db8:1:2::3:4"])
            IPSet(IPAddr(x) for x in ["2001:db8:1:2::3:4",
                                      "2001:db8:5:6::7:8"])
            IPSet(["2001:db8:1:2::3:4", IPAddr("2001:db8:5:6::7:8")])

    def testIPSetAddAndIn(self):
        s = IPSet()
        s.add("1.2.3.4")
        self.assertEqual("1.2.3.4" in s, True)
        self.assertEqual("0.0.0.0" not in s, True)
        self.assertEqual(IPAddr("1.2.3.4") in s, True)
        self.assertEqual(IPAddr("0.0.0.0") not in s, True)
        s.add(IPAddr("5.6.7.8"))
        self.assertEqual("1.2.3.4" in s, True)
        self.assertEqual("5.6.7.8" in s, True)
        self.assertEqual("0.0.0.0" not in s, True)
        self.assertEqual(IPAddr("1.2.3.4") in s, True)
        self.assertEqual(IPAddr("5.6.7.8") in s, True)
        self.assertEqual(IPAddr("0.0.0.0") not in s, True)
        self.assertRaises(TypeError, s.add, 0)
        s = IPSet()
        s.add_range("10.2.4.1", "10.2.4.255")
        s.add_range(IPAddr("10.2.5.0"), "10.2.5.254")
        s.add_range(IPAddr("10.2.4.0"), IPAddr("10.2.4.0"))
        s.add(IPAddr("10.2.5.255"))
        self.assertEqual(s, IPSet("10.2.4.0/23"))
        self.assertRaises(ValueError, s.add_range,
                          IPAddr("10.10.10.10"), IPAddr("10.10.10.9"))
        if IPSet.supports_ipv6():
            s = IPSet()
            s.add("2001:db8:1:2::3:4")
            self.assertEqual("2001:db8:1:2::3:4" in s, True)
            self.assertEqual("2001:db8:0:0::0:0" not in s, True)
            self.assertEqual(IPAddr("2001:db8:1:2::3:4") in s, True)
            self.assertEqual(IPAddr("2001:db8:0:0::0:0") not in s, True)
            s.add(IPAddr("2001:db8:5:6::7:8"))
            self.assertEqual("2001:db8:1:2::3:4" in s, True)
            self.assertEqual("2001:db8:5:6::7:8" in s, True)
            self.assertEqual("2001:db8:0:0::0:0" not in s, True)
            self.assertEqual(IPAddr("2001:db8:1:2::3:4") in s, True)
            self.assertEqual(IPAddr("2001:db8:5:6::7:8") in s, True)
            self.assertEqual(IPAddr("2001:db8:0:0::0:0") not in s, True)
            self.assertRaises(TypeError, s.add, 0)

    def testIPSetTypeAndConvert(self):
        a = IPSet(["1.2.3.4"])
        ac = a.copy()
        self.assertEqual(a.is_ipv6(), False)
        a.convert(4)
        self.assertEqual(a.is_ipv6(), False)
        self.assertEqual(a, ac)
        self.assertRaises(ValueError, a.convert, 5)
        if not IPSet.supports_ipv6():
            self.assertRaises(ValueError, a.convert, 6)
        else:
            b = IPSet(["::ffff:1.2.3.4"])
            bc = b.copy()
            self.assertEqual(b.is_ipv6(), True)
            b.convert(6)
            self.assertEqual(b.is_ipv6(), True)
            self.assertEqual(b, bc)
            self.assertRaises(ValueError, b.convert, 5)
            a.convert(6)
            self.assertEqual(a.is_ipv6(), True)
            self.assertEqual(a, ac)
            b.convert(4)
            self.assertEqual(b.is_ipv6(), False)
            self.assertEqual(b, bc)
            a.add("::")
            self.assertRaises(ValueError, a.convert, 4)

    def testIPSetIPPromotion(self):
        if not IPSet.supports_ipv6():
            return
        s = IPSet()
        self.assertEqual(s.is_ipv6(), False)
        s.add("1.2.3.4")
        self.assertEqual(s.is_ipv6(), False)
        s.add("2001:db8:1:2::3:4")
        self.assertEqual(s.is_ipv6(), True)
        self.assertEqual("1.2.3.4" in s, True)
        self.assertEqual("0.0.0.0" not in s, True)
        self.assertEqual(IPAddr("1.2.3.4") in s, True)
        self.assertEqual(IPAddr("0.0.0.0") not in s, True)
        self.assertEqual("2001:db8:1:2::3:4" in s, True)
        self.assertEqual("2001:db8:0:0::0:0" not in s, True)
        self.assertEqual(IPAddr("2001:db8:1:2::3:4") in s, True)
        self.assertEqual(IPAddr("2001:db8:0:0::0:0") not in s, True)
        self.assertEqual("::ffff:1.2.3.4" in s, True)
        self.assertEqual("::ffff:0.0.0.0" not in s, True)
        self.assertEqual(IPAddr("::ffff:1.2.3.4") in s, True)
        self.assertEqual(IPAddr("::ffff:0.0.0.0") not in s, True)

    def testIPSetCopy(self):
        s1 = IPSet()
        s2 = s1
        s3 = s1.copy()
        self.assertTrue(s1 == s2 == s3)
        self.assertTrue(s1 is s2)
        self.assertTrue(s1 is not s3)
        s1.add("1.2.3.4")
        s1.add("5.6.7.8")
        s3 = s1.copy()
        self.assertTrue(s1 == s2 == s3)
        self.assertTrue(s1 is s2)
        self.assertTrue(s1 is not s3)
        if IPSet.supports_ipv6():
            s1 = IPSet()
            # force set to be IPv6
            s1.add("::")
            s1.remove("::")
            s2 = s1
            s3 = s1.copy()
            self.assertTrue(s1 == s2 == s3)
            self.assertTrue(s1 is s2)
            self.assertTrue(s1 is not s3)
            s1.add("::ffff:1.2.3.4")
            s3 = s1.copy()
            self.assertTrue(s1 == s2 == s3)
            self.assertTrue(s1 is s2)
            self.assertTrue(s1 is not s3)
            s1.add("2001:db8:1:2::3:4")
            s1.add("2001:db8:5:6::7:8")
            s3 = s1.copy()
            self.assertTrue(s1 == s2 == s3)
            self.assertTrue(s1 is s2)
            self.assertTrue(s1 is not s3)

    def testIPSetRemove(self):
        s = IPSet()
        s.add("1.2.3.4")
        s.add("5.6.7.8")
        self.assertTrue("1.2.3.4" in s)
        self.assertTrue("5.6.7.8" in s)
        s.remove("1.2.3.4")
        self.assertTrue("1.2.3.4" not in s)
        self.assertTrue("5.6.7.8" in s)
        s.remove("5.6.7.8")
        self.assertTrue("1.2.3.4" not in s)
        self.assertTrue("5.6.7.8" not in s)
        self.assertRaises(KeyError, s.remove, "1.2.3.4")
        if IPSet.supports_ipv6():
            s = IPSet()
            s.add("2001:db8:1:2::3:4")
            s.add("2001:db8:5:6::7:8")
            self.assertTrue("2001:db8:1:2::3:4" in s)
            self.assertTrue("2001:db8:5:6::7:8" in s)
            s.remove("2001:db8:1:2::3:4")
            self.assertTrue("2001:db8:1:2::3:4" not in s)
            self.assertTrue("2001:db8:5:6::7:8" in s)
            s.remove("2001:db8:5:6::7:8")
            self.assertTrue("2001:db8:1:2::3:4" not in s)
            self.assertTrue("2001:db8:5:6::7:8" not in s)
            self.assertRaises(KeyError, s.remove, "2001:db8:1:2::3:4")

    def testIPSetDiscard(self):
        s = IPSet()
        s.add("1.2.3.4")
        s.add("5.6.7.8")
        self.assertTrue("1.2.3.4" in s)
        self.assertTrue("5.6.7.8" in s)
        s.discard("1.2.3.4")
        self.assertTrue("1.2.3.4" not in s)
        self.assertTrue("5.6.7.8" in s)
        s.discard("5.6.7.8")
        self.assertTrue("1.2.3.4" not in s)
        self.assertTrue("5.6.7.8" not in s)
        s.discard("1.2.3.4")
        self.assertTrue("1.2.3.4" not in s)
        self.assertTrue("5.6.7.8" not in s)
        if IPSet.supports_ipv6():
            s = IPSet()
            s.add("2001:db8:1:2::3:4")
            s.add("2001:db8:5:6::7:8")
            self.assertTrue("2001:db8:1:2::3:4" in s)
            self.assertTrue("2001:db8:5:6::7:8" in s)
            s.discard("2001:db8:1:2::3:4")
            self.assertTrue("2001:db8:1:2::3:4" not in s)
            self.assertTrue("2001:db8:5:6::7:8" in s)
            s.discard("2001:db8:5:6::7:8")
            self.assertTrue("2001:db8:1:2::3:4" not in s)
            self.assertTrue("2001:db8:5:6::7:8" not in s)
            s.discard("2001:db8:1:2::3:4")
            self.assertTrue("2001:db8:1:2::3:4" not in s)
            self.assertTrue("2001:db8:5:6::7:8" not in s)

    def testIPSetClear(self):
        s = IPSet()
        s.add("1.2.3.4")
        s.add("5.6.7.8")
        self.assertTrue("1.2.3.4" in s)
        self.assertTrue("5.6.7.8" in s)
        s.clear()
        self.assertTrue("1.2.3.4" not in s)
        self.assertTrue("5.6.7.8" not in s)
        if IPSet.supports_ipv6():
            s = IPSet()
            s.add("2001:db8:1:2::3:4")
            s.add("2001:db8:5:6::7:8")
            self.assertTrue("2001:db8:1:2::3:4" in s)
            self.assertTrue("2001:db8:5:6::7:8" in s)
            s.clear()
            self.assertTrue("2001:db8:1:2::3:4" not in s)
            self.assertTrue("2001:db8:5:6::7:8" not in s)

    def testIPSetLenAndCard(self):
        s = IPSet()
        self.assertEqual(len(s), 0)
        self.assertEqual(s.cardinality(), 0)
        s.add("1.2.3.4")
        s.add("5.6.7.8")
        self.assertEqual(len(s), 2)
        self.assertEqual(s.cardinality(), 2)
        s.remove("1.2.3.4")
        self.assertEqual(len(s), 1)
        self.assertEqual(s.cardinality(), 1)
        if IPSet.supports_ipv6():
            s = IPSet()
            # force set to be IPv6
            s.add("::")
            s.remove("::")
            self.assertEqual(len(s), 0)
            self.assertEqual(s.cardinality(), 0)
            s.add("2001:db8:1:2::3:4")
            s.add("2001:db8:5:6::7:8")
            self.assertEqual(len(s), 2)
            self.assertEqual(s.cardinality(), 2)
            s.remove("2001:db8:1:2::3:4")
            self.assertEqual(len(s), 1)
            self.assertEqual(s.cardinality(), 1)

    def testIPSetSubsetSuperset(self):
        s1 = IPSet()
        s2 = IPSet()
        self.assertTrue(s1.issubset(s2))
        self.assertTrue(s2.issubset(s1))
        self.assertTrue(s1.issuperset(s2))
        self.assertTrue(s2.issuperset(s1))
        self.assertTrue(s1 <= s2)
        self.assertTrue(s2 <= s1)
        self.assertTrue(s1 >= s2)
        self.assertTrue(s2 >= s1)
        s1.add("1.2.3.4")
        s1.add("5.6.7.8")
        s2.add("5.6.7.8")
        self.assertEqual(s1.issubset(s2), False)
        self.assertEqual(s2.issubset(s1), True)
        self.assertEqual(s1.issuperset(s2), True)
        self.assertEqual(s2.issuperset(s1), False)
        self.assertEqual(s1 <= s2, False)
        self.assertEqual(s2 <= s1, True)
        self.assertEqual(s1 >= s2, True)
        self.assertEqual(s2 >= s1, False)
        self.assertEqual(s2.issubset(["1.2.3.4", "5.6.7.8"]), True)
        self.assertEqual(s2.issubset(["1.2.3.4"]), False)
        self.assertEqual(s1.issuperset(["1.2.3.4"]), True)
        self.assertEqual(s1.issuperset(["1.2.3.4", "0.0.0.0"]), False)
        self.assertRaises(TypeError, operator.le, s2,  ["1.2.3.4", "5.6.7.8"])
        self.assertRaises(TypeError, operator.ge, s1, ["1.2.3.4"])
        if IPSet.supports_ipv6():
            s1 = IPSet()
            s2 = IPSet()
            # force sets to be IPv6
            s1.add("::")
            s1.remove("::")
            s2.add("::")
            s2.remove("::")
            self.assertTrue(s1.issubset(s2))
            self.assertTrue(s2.issubset(s1))
            self.assertTrue(s1.issuperset(s2))
            self.assertTrue(s2.issuperset(s1))
            self.assertTrue(s1 <= s2)
            self.assertTrue(s2 <= s1)
            self.assertTrue(s1 >= s2)
            self.assertTrue(s2 >= s1)
            s1.add("::ffff:1.2.3.4")
            s1.add("2001:db8:1:2::3:4")
            s1.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:5:6::7:8")
            self.assertEqual(s1.issubset(s2), False)
            self.assertEqual(s2.issubset(s1), True)
            self.assertEqual(s1.issuperset(s2), True)
            self.assertEqual(s2.issuperset(s1), False)
            self.assertEqual(s1 <= s2, False)
            self.assertEqual(s2 <= s1, True)
            self.assertEqual(s1 >= s2, True)
            self.assertEqual(s2 >= s1, False)
            self.assertEqual(s2.issubset(["2001:db8:1:2::3:4",
                                          "2001:db8:5:6::7:8"]),
                             True)
            self.assertEqual(s2.issubset(["2001:db8:1:2::3:4"]), False)
            self.assertEqual(s1.issuperset(["2001:db8:1:2::3:4"]), True)
            self.assertEqual(s1.issuperset(["2001:db8:1:2::3:4",
                                            "2001:db8:0:0::0:0"]),
                             False)
            s3 = IPSet("1.2.3.4")
            self.assertEqual(s1.issubset(s3), False)
            self.assertEqual(s3.issubset(s1), True)
            self.assertEqual(s1.issuperset(s3), True)
            self.assertEqual(s3.issuperset(s1), False)
            self.assertEqual(s1 <= s3, False)
            self.assertEqual(s3 <= s1, True)
            self.assertEqual(s1 >= s3, True)
            self.assertEqual(s3 >= s1, False)
            self.assertRaises(TypeError, operator.le, s2,
                              ["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            self.assertRaises(TypeError, operator.ge, s1,
                              ["2001:db8:1:2::3:4"])

    def testIPSetUnion(self):
        s1 = IPSet()
        s2 = IPSet()
        s1.add("1.2.3.4")
        s1.add("5.6.7.8")
        s2.add("5.6.7.8")
        s2.add("9.10.11.12")
        s3 = s1.union(s2)
        s4 = s2.union(s1)
        s5 = s1.copy()
        s5.update(s2)
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(s1 <= s3)
        self.assertTrue(s2 <= s3)
        self.assertTrue(s1 <= s4)
        self.assertTrue(s2 <= s4)
        self.assertTrue(s1 <= s5)
        self.assertTrue(s2 <= s5)
        self.assertEqual(s3.cardinality(), 3)
        self.assertEqual(s4.cardinality(), 3)
        self.assertEqual(s5.cardinality(), 3)
        s3 = s1 | s2
        s4 = s2 | s1
        s5 = s1.copy()
        s5 |= s2
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(s1 <= s3)
        self.assertTrue(s2 <= s3)
        self.assertTrue(s1 <= s4)
        self.assertTrue(s2 <= s4)
        self.assertTrue(s1 <= s5)
        self.assertTrue(s2 <= s5)
        self.assertEqual(s3.cardinality(), 3)
        self.assertEqual(s4.cardinality(), 3)
        self.assertEqual(s5.cardinality(), 3)
        s3 = s1.union(["5.6.7.8", "9.10.11.12"])
        s4 = s2.union(["1.2.3.4", "5.6.7.8"])
        s5 = s1.copy()
        s5.update(["5.6.7.8", "9.10.11.12"])
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(s1 <= s3)
        self.assertTrue(s2 <= s3)
        self.assertTrue(s1 <= s4)
        self.assertTrue(s2 <= s4)
        self.assertTrue(s1 <= s5)
        self.assertTrue(s2 <= s5)
        self.assertEqual(s3.cardinality(), 3)
        self.assertEqual(s4.cardinality(), 3)
        self.assertEqual(s5.cardinality(), 3)
        s6 = s1.copy()
        s6.update(IPWildcard("10.x.x.10"))
        self.assertEqual("10.10.10.10" in s6, True)
        self.assertEqual("10.0.255.10" in s6, True)
        self.assertEqual("10.0.0.10" in s6, True)
        self.assertEqual("10.255.255.10" in s6, True)
        self.assertEqual("10.10.10.0" not in s6, True)
        self.assertEqual("0.10.10.10" not in s6, True)
        self.assertEqual(s6.cardinality(), 0x10002)
        self.assertEqual(s1.__or__(["5.6.7.8", "9.10.11.12"]), NotImplemented)
        self.assertEqual(s2.__or__(["1.2.3.4", "5.6.7.8"]), NotImplemented)
        self.assertRaises(TypeError, operator.or_, s1,
                          ["5.6.7.8", "9.10.11.12"])
        self.assertRaises(TypeError, operator.or_, s2, ["1.2.3.4", "5.6.7.8"])
        self.assertRaises(TypeError, operator_ior, s5,
                          ["5.6.7.8", "9.10.11.12"])
        s7 = s1.union(s2, IPWildcard("10.x.x.10"),
                      ["192.168.1.2", "192.168.3.4"])
        s8 = s1.copy()
        s8.update(s2, IPWildcard("10.x.x.10"),
                      ["192.168.1.2", "192.168.3.4"])
        self.assertTrue(s7 == s8)
        self.assertEqual("1.2.3.4" in s8, True)
        self.assertEqual("5.6.7.8" in s8, True)
        self.assertEqual("192.168.1.2" in s8, True)
        self.assertEqual("10.10.10.10" in s8, True)
        self.assertEqual("10.0.255.10" in s8, True)
        self.assertEqual("10.0.0.10" in s8, True)
        self.assertEqual("10.255.255.10" in s8, True)
        self.assertEqual("10.10.10.0" not in s8, True)
        self.assertEqual("0.10.10.10" not in s8, True)
        if IPSet.supports_ipv6():
            s1 = IPSet()
            s2 = IPSet()
            s1.add("2001:db8:1:2::3:4")
            s1.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:9:10::11:12")
            s3 = s1.union(s2)
            s4 = s2.union(s1)
            s5 = s1.copy()
            s5.update(s2)
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(s1 <= s3)
            self.assertTrue(s2 <= s3)
            self.assertTrue(s1 <= s4)
            self.assertTrue(s2 <= s4)
            self.assertTrue(s1 <= s5)
            self.assertTrue(s2 <= s5)
            self.assertEqual(s3.cardinality(), 3)
            self.assertEqual(s4.cardinality(), 3)
            self.assertEqual(s5.cardinality(), 3)
            s3 = s1 | s2
            s4 = s2 | s1
            s5 = s1.copy()
            s5 |= s2
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(s1 <= s3)
            self.assertTrue(s2 <= s3)
            self.assertTrue(s1 <= s4)
            self.assertTrue(s2 <= s4)
            self.assertTrue(s1 <= s5)
            self.assertTrue(s2 <= s5)
            self.assertEqual(s3.cardinality(), 3)
            self.assertEqual(s4.cardinality(), 3)
            self.assertEqual(s5.cardinality(), 3)
            s3 = s1.union(["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            s4 = s2.union(["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            s5 = s1.copy()
            s5.update(["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(s1 <= s3)
            self.assertTrue(s2 <= s3)
            self.assertTrue(s1 <= s4)
            self.assertTrue(s2 <= s4)
            self.assertTrue(s1 <= s5)
            self.assertTrue(s2 <= s5)
            self.assertEqual(s3.cardinality(), 3)
            self.assertEqual(s4.cardinality(), 3)
            self.assertEqual(s5.cardinality(), 3)
            s6 = s1.copy()
            s6.update(IPWildcard("::ffff:10.x.x.10"))
            self.assertEqual("::ffff:10.10.10.10" in s6, True)
            self.assertEqual("::ffff:10.0.255.10" in s6, True)
            self.assertEqual("::ffff:10.0.0.10" in s6, True)
            self.assertEqual("::ffff:10.255.255.10" in s6, True)
            self.assertEqual("::ffff:10.10.10.0" not in s6, True)
            self.assertEqual("::ffff:0.10.10.10" not in s6, True)
            self.assertEqual(s6.cardinality(), 0x10002)
            s7 = IPSet("1.2.3.4")
            s8 = IPSet("::")
            s9 = IPSet("3.4.5.6").convert(6)
            (a, b, c) = (s7 | s8), (s7 | s9), (s8 | s9)
            (d, e, f) = (s8 | s7), (s9 | s7), (s9 | s8)
            self.assertTrue(a == d and b == e and c == f)
            for x in (a, b, c, d, e, f):
                self.assertTrue(x.cardinality() == 2)
            self.assertEqual(s1.__or__(["2001:db8:5:6::7:8",
                                        "2001:db8:9:10::11:12"]),
                             NotImplemented)
            self.assertEqual(s2.__or__(["2001:db8:1:2::3:4",
                                        "2001:db8:5:6::7:8"]),
                             NotImplemented)
            self.assertRaises(TypeError, operator.or_, s1,
                              ["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            self.assertRaises(TypeError, operator.or_, s2,
                              ["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            self.assertRaises(TypeError, operator_ior, s5,
                              ["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])

    def testIPSetIntersection(self):
        s1 = IPSet()
        s2 = IPSet()
        s1.add("1.2.3.4")
        s1.add("5.6.7.8")
        s2.add("5.6.7.8")
        s2.add("9.10.11.12")
        s3 = s1.intersection(s2)
        s4 = s2.intersection(s1)
        s5 = s1.copy()
        s5.intersection_update(s2)
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(s1 >= s3)
        self.assertTrue(s2 >= s3)
        self.assertTrue(s1 >= s4)
        self.assertTrue(s2 >= s4)
        self.assertTrue(s1 >= s5)
        self.assertTrue(s2 >= s5)
        self.assertEqual(s3.cardinality(), 1)
        self.assertEqual(s4.cardinality(), 1)
        self.assertEqual(s5.cardinality(), 1)
        s3 = s1 & s2
        s4 = s2 & s1
        s5 = s1.copy()
        s5 &= s2
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(s1 >= s3)
        self.assertTrue(s2 >= s3)
        self.assertTrue(s1 >= s4)
        self.assertTrue(s2 >= s4)
        self.assertTrue(s1 >= s5)
        self.assertTrue(s2 >= s5)
        self.assertEqual(s3.cardinality(), 1)
        self.assertEqual(s4.cardinality(), 1)
        self.assertEqual(s5.cardinality(), 1)
        s3 = s1.intersection(["5.6.7.8", "9.10.11.12"])
        s4 = s2.intersection(["1.2.3.4", "5.6.7.8"])
        s5 = s1.copy()
        s5.intersection_update(["5.6.7.8", "9.10.11.12"])
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(s1 >= s3)
        self.assertTrue(s2 >= s3)
        self.assertTrue(s1 >= s4)
        self.assertTrue(s2 >= s4)
        self.assertTrue(s1 >= s5)
        self.assertTrue(s2 >= s5)
        self.assertEqual(s3.cardinality(), 1)
        self.assertEqual(s4.cardinality(), 1)
        self.assertEqual(s5.cardinality(), 1)
        s5 = s1.copy()
        self.assertEqual(s1.__and__(["5.6.7.8", "9.10.11.12"]), NotImplemented)
        self.assertEqual(s2.__and__(["1.2.3.4", "5.6.7.8"]), NotImplemented)
        self.assertRaises(TypeError, operator.and_, s1,
                          ["5.6.7.8", "9.10.11.12"])
        self.assertRaises(TypeError, operator.and_, s2, ["1.2.3.4", "5.6.7.8"])
        self.assertRaises(TypeError, operator_iand, s5,
                          ["5.6.7.8", "9.10.11.12"])
        s6 = s1.intersection(s2, ["5.6.7.8", "9.10.11.12"])
        s7 = s1.copy()
        s7.intersection_update(s2, ["5.6.7.8", "9.10.11.12"])
        self.assertEqual(s6, s7)
        self.assertEqual("5.6.7.8" in s6, True)
        self.assertEqual(len(s6), 1)
        if IPSet.supports_ipv6():
            s1 = IPSet()
            s2 = IPSet()
            s1.add("2001:db8:1:2::3:4")
            s1.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:9:10::11:12")
            s3 = s1.intersection(s2)
            s4 = s2.intersection(s1)
            s5 = s1.copy()
            s5.intersection_update(s2)
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(s1 >= s3)
            self.assertTrue(s2 >= s3)
            self.assertTrue(s1 >= s4)
            self.assertTrue(s2 >= s4)
            self.assertTrue(s1 >= s5)
            self.assertTrue(s2 >= s5)
            self.assertEqual(s3.cardinality(), 1)
            self.assertEqual(s4.cardinality(), 1)
            self.assertEqual(s5.cardinality(), 1)
            s3 = s1 & s2
            s4 = s2 & s1
            s5 = s1.copy()
            s5 &= s2
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(s1 >= s3)
            self.assertTrue(s2 >= s3)
            self.assertTrue(s1 >= s4)
            self.assertTrue(s2 >= s4)
            self.assertTrue(s1 >= s5)
            self.assertTrue(s2 >= s5)
            self.assertEqual(s3.cardinality(), 1)
            self.assertEqual(s4.cardinality(), 1)
            self.assertEqual(s5.cardinality(), 1)
            s3 = s1.intersection(["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            s4 = s2.intersection(["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            s5 = s1.copy()
            s5.intersection_update(["2001:db8:5:6::7:8",
                                    "2001:db8:9:10::11:12"])
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(s1 >= s3)
            self.assertTrue(s2 >= s3)
            self.assertTrue(s1 >= s4)
            self.assertTrue(s2 >= s4)
            self.assertTrue(s1 >= s5)
            self.assertTrue(s2 >= s5)
            self.assertEqual(s3.cardinality(), 1)
            self.assertEqual(s4.cardinality(), 1)
            self.assertEqual(s5.cardinality(), 1)
            s6 = IPSet(["1.2.3.4", "3.4.5.6", "8.9.10.11"])
            s7 = IPSet(["::", "::ffff:8.9.10.11", "::ffff:6.5.4.3"])
            s8 = IPSet(["3.4.5.6", "6.5.4.3", "2.7.6.5"]).convert(6)
            (a, b, c) = (s7 & s8), (s7 & s6), (s8 & s6)
            (d, e, f) = (s8 & s7), (s6 & s7), (s6 & s8)
            self.assertTrue(a == d and b == e and c == f)
            for x in (a, b, c, d, e, f):
                self.assertTrue(x.cardinality() == 1)
            self.assertEqual(s1.__and__(["2001:db8:5:6::7:8",
                                         "2001:db8:9:10::11:12"]),
                             NotImplemented)
            self.assertEqual(s2.__and__(["2001:db8:1:2::3:4",
                                         "2001:db8:5:6::7:8"]), NotImplemented)
            self.assertRaises(TypeError, operator.and_, s1,
                              ["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            self.assertRaises(TypeError, operator.and_, s2,
                              ["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            self.assertRaises(TypeError, operator_iand, s5,
                              ["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])

    def testIPSetDifference(self):
        s1 = IPSet()
        s2 = IPSet()
        s1.add("1.2.3.4")
        s1.add("5.6.7.8")
        s2.add("5.6.7.8")
        s2.add("9.10.11.12")
        s3 = s1.difference(s2)
        s4 = s2.difference(s1)
        s5 = s1.copy()
        s5.difference_update(s2)
        self.assertNotEqual(s3, s4)
        self.assertNotEqual(s5, s4)
        self.assertTrue(s1 >= s3)
        self.assertTrue(not (s3 & s2))
        self.assertTrue(s1 >= s5)
        self.assertTrue(not (s5 & s2))
        self.assertTrue(s2 >= s4)
        self.assertTrue(not (s4 & s1))
        self.assertEqual(s3.cardinality(), 1)
        self.assertEqual(s4.cardinality(), 1)
        self.assertEqual(s5.cardinality(), 1)
        s3 = s1 - s2
        s4 = s2 - s1
        s5 = s1.copy()
        s5 -= s2
        self.assertNotEqual(s3, s4)
        self.assertNotEqual(s5, s4)
        self.assertTrue(s1 >= s3)
        self.assertTrue(not (s3 & s2))
        self.assertTrue(s1 >= s5)
        self.assertTrue(not (s5 & s2))
        self.assertTrue(s2 >= s4)
        self.assertTrue(not (s4 & s1))
        self.assertEqual(s3.cardinality(), 1)
        self.assertEqual(s4.cardinality(), 1)
        self.assertEqual(s5.cardinality(), 1)
        s3 = s1.difference(["5.6.7.8", "9.10.11.12"])
        s4 = s2.difference(["1.2.3.4", "5.6.7.8"])
        s5 = s1.copy()
        s5.difference_update(["5.6.7.8", "9.10.11.12"])
        self.assertNotEqual(s3, s4)
        self.assertNotEqual(s5, s4)
        self.assertTrue(s1 >= s3)
        self.assertTrue(not (s3 & s2))
        self.assertTrue(s1 >= s5)
        self.assertTrue(not (s5 & s2))
        self.assertTrue(s2 >= s4)
        self.assertTrue(not (s4 & s1))
        self.assertEqual(s3.cardinality(), 1)
        self.assertEqual(s4.cardinality(), 1)
        self.assertEqual(s5.cardinality(), 1)
        self.assertEqual(s1.__sub__(["5.6.7.8", "9.10.11.12"]), NotImplemented)
        self.assertEqual(s2.__sub__(["1.2.3.4", "5.6.7.8"]), NotImplemented)
        self.assertRaises(TypeError, operator.sub, s1,
                          ["5.6.7.8", "9.10.11.12"])
        self.assertRaises(TypeError, operator.sub, s2, ["1.2.3.4", "5.6.7.8"])
        self.assertRaises(TypeError, operator_isub,
                          s5, ["5.6.7.8", "9.10.11.12"])
        s6 = s1.copy()
        s6.add("7.7.7.7")
        s6.add("8.8.8.8")
        s7 = s6.copy()
        s8 = s6.difference(s2, ["8.8.8.8", "9.9.9.9"])
        s7.difference_update(s2, ["8.8.8.8", "9.9.9.9"])
        self.assertEqual(s8, s7)
        self.assertEqual(len(s7), 2)
        self.assertEqual("1.2.3.4" in s7, True)
        self.assertEqual("7.7.7.7" in s7, True)
        if IPSet.supports_ipv6():
            s1 = IPSet()
            s2 = IPSet()
            s1.add("2001:db8:1:2::3:4")
            s1.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:9:10::11:12")
            s3 = s1.difference(s2)
            s4 = s2.difference(s1)
            s5 = s1.copy()
            s5.difference_update(s2)
            self.assertNotEqual(s3, s4)
            self.assertNotEqual(s5, s4)
            self.assertTrue(s1 >= s3)
            self.assertTrue(not (s3 & s2))
            self.assertTrue(s1 >= s5)
            self.assertTrue(not (s5 & s2))
            self.assertTrue(s2 >= s4)
            self.assertTrue(not (s4 & s1))
            self.assertEqual(s3.cardinality(), 1)
            self.assertEqual(s4.cardinality(), 1)
            self.assertEqual(s5.cardinality(), 1)
            s3 = s1 - s2
            s4 = s2 - s1
            s5 = s1.copy()
            s5 -= s2
            self.assertNotEqual(s3, s4)
            self.assertNotEqual(s5, s4)
            self.assertTrue(s1 >= s3)
            self.assertTrue(not (s3 & s2))
            self.assertTrue(s1 >= s5)
            self.assertTrue(not (s5 & s2))
            self.assertTrue(s2 >= s4)
            self.assertTrue(not (s4 & s1))
            self.assertEqual(s3.cardinality(), 1)
            self.assertEqual(s4.cardinality(), 1)
            self.assertEqual(s5.cardinality(), 1)
            s3 = s1.difference(["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            s4 = s2.difference(["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            s5 = s1.copy()
            s5.difference_update(["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            self.assertNotEqual(s3, s4)
            self.assertNotEqual(s5, s4)
            self.assertTrue(s1 >= s3)
            self.assertTrue(not (s3 & s2))
            self.assertTrue(s1 >= s5)
            self.assertTrue(not (s5 & s2))
            self.assertTrue(s2 >= s4)
            self.assertTrue(not (s4 & s1))
            self.assertEqual(s3.cardinality(), 1)
            self.assertEqual(s4.cardinality(), 1)
            self.assertEqual(s5.cardinality(), 1)
            s6 = IPSet(["1.2.3.4", "3.4.5.6", "8.9.10.11"])
            s7 = IPSet(["::", "::ffff:8.9.10.11", "::ffff:6.5.4.3"])
            s8 = IPSet(["3.4.5.6", "6.5.4.3", "2.7.6.5"]).convert(6)
            (a, b, c) = (s7 - s8), (s7 - s6), (s8 - s6)
            (d, e, f) = (s8 - s7), (s6 - s7), (s6 - s8)
            for x in (a, b, c, d, e, f):
                self.assertTrue(x.cardinality() == 2)
            self.assertEqual(s1.__sub__(["2001:db8:5:6::7:8",
                                         "2001:db8:9:10::11:12"]),
                             NotImplemented)
            self.assertEqual(s2.__sub__(["2001:db8:1:2::3:4",
                                         "2001:db8:5:6::7:8"]),
                             NotImplemented)
            self.assertRaises(TypeError, operator.sub, s1,
                              ["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            self.assertRaises(TypeError, operator.sub, s2,
                              ["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            self.assertRaises(TypeError, operator_isub, s5,
                              ["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])

    def testIPSetSymmetricDifference(self):
        s1 = IPSet()
        s2 = IPSet()
        s1.add("1.2.3.4")
        s1.add("5.6.7.8")
        s2.add("5.6.7.8")
        s2.add("9.10.11.12")
        s3 = s1.symmetric_difference(s2)
        s4 = s2.symmetric_difference(s1)
        s5 = s1.copy()
        s5.symmetric_difference_update(s2)
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(not s1 >= s3)
        self.assertTrue(not s2 >= s3)
        self.assertTrue(not s1 >= s4)
        self.assertTrue(not s2 >= s4)
        self.assertTrue(not s1 >= s5)
        self.assertTrue(not s2 >= s5)
        self.assertTrue(not s1 <= s3)
        self.assertTrue(not s2 <= s3)
        self.assertTrue(not s1 <= s4)
        self.assertTrue(not s2 <= s4)
        self.assertTrue(not s1 <= s5)
        self.assertTrue(not s2 <= s5)
        self.assertEqual(s3.cardinality(), 2)
        self.assertEqual(s4.cardinality(), 2)
        self.assertEqual(s5.cardinality(), 2)
        s3 = s1 ^ s2
        s4 = s2 ^ s1
        s5 = s1.copy()
        s5 ^= s2
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(not s1 >= s3)
        self.assertTrue(not s2 >= s3)
        self.assertTrue(not s1 >= s4)
        self.assertTrue(not s2 >= s4)
        self.assertTrue(not s1 >= s5)
        self.assertTrue(not s2 >= s5)
        self.assertTrue(not s1 <= s3)
        self.assertTrue(not s2 <= s3)
        self.assertTrue(not s1 <= s4)
        self.assertTrue(not s2 <= s4)
        self.assertTrue(not s1 <= s5)
        self.assertTrue(not s2 <= s5)
        self.assertEqual(s3.cardinality(), 2)
        self.assertEqual(s4.cardinality(), 2)
        self.assertEqual(s5.cardinality(), 2)
        s3 = s1.symmetric_difference(["5.6.7.8", "9.10.11.12"])
        s4 = s2.symmetric_difference(["1.2.3.4", "5.6.7.8"])
        s5 = s1.copy()
        s5.symmetric_difference_update(["5.6.7.8", "9.10.11.12"])
        self.assertTrue(s3 == s4 == s5)
        self.assertTrue(not s1 >= s3)
        self.assertTrue(not s2 >= s3)
        self.assertTrue(not s1 >= s4)
        self.assertTrue(not s2 >= s4)
        self.assertTrue(not s1 >= s5)
        self.assertTrue(not s2 >= s5)
        self.assertTrue(not s1 <= s3)
        self.assertTrue(not s2 <= s3)
        self.assertTrue(not s1 <= s4)
        self.assertTrue(not s2 <= s4)
        self.assertTrue(not s1 <= s5)
        self.assertTrue(not s2 <= s5)
        self.assertEqual(s3.cardinality(), 2)
        self.assertEqual(s4.cardinality(), 2)
        self.assertEqual(s5.cardinality(), 2)
        s5 = s1.copy()
        self.assertRaises(TypeError, operator.xor, s1,
                          ["5.6.7.8", "9.10.11.12"])
        self.assertRaises(TypeError, operator.xor, s2,
                          ["1.2.3.4", "5.6.7.8"])
        self.assertRaises(TypeError, operator_ixor, s5,
                          ["5.6.7.8", "9.10.11.12"])
        if IPSet.supports_ipv6():
            s1 = IPSet()
            s2 = IPSet()
            s1.add("2001:db8:1:2::3:4")
            s1.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:5:6::7:8")
            s2.add("2001:db8:9:10::11:12")
            s3 = s1.symmetric_difference(s2)
            s4 = s2.symmetric_difference(s1)
            s5 = s1.copy()
            s5.symmetric_difference_update(s2)
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(not s1 >= s3)
            self.assertTrue(not s2 >= s3)
            self.assertTrue(not s1 >= s4)
            self.assertTrue(not s2 >= s4)
            self.assertTrue(not s1 >= s5)
            self.assertTrue(not s2 >= s5)
            self.assertTrue(not s1 <= s3)
            self.assertTrue(not s2 <= s3)
            self.assertTrue(not s1 <= s4)
            self.assertTrue(not s2 <= s4)
            self.assertTrue(not s1 <= s5)
            self.assertTrue(not s2 <= s5)
            self.assertEqual(s3.cardinality(), 2)
            self.assertEqual(s4.cardinality(), 2)
            self.assertEqual(s5.cardinality(), 2)
            s3 = s1 ^ s2
            s4 = s2 ^ s1
            s5 = s1.copy()
            s5 ^= s2
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(not s1 >= s3)
            self.assertTrue(not s2 >= s3)
            self.assertTrue(not s1 >= s4)
            self.assertTrue(not s2 >= s4)
            self.assertTrue(not s1 >= s5)
            self.assertTrue(not s2 >= s5)
            self.assertTrue(not s1 <= s3)
            self.assertTrue(not s2 <= s3)
            self.assertTrue(not s1 <= s4)
            self.assertTrue(not s2 <= s4)
            self.assertTrue(not s1 <= s5)
            self.assertTrue(not s2 <= s5)
            self.assertEqual(s3.cardinality(), 2)
            self.assertEqual(s4.cardinality(), 2)
            self.assertEqual(s5.cardinality(), 2)
            s3 = s1.symmetric_difference(["2001:db8:5:6::7:8",
                                          "2001:db8:9:10::11:12"])
            s4 = s2.symmetric_difference(["2001:db8:1:2::3:4",
                                          "2001:db8:5:6::7:8"])
            s5 = s1.copy()
            s5.symmetric_difference_update(["2001:db8:5:6::7:8",
                                            "2001:db8:9:10::11:12"])
            self.assertTrue(s3 == s4 == s5)
            self.assertTrue(not s1 >= s3)
            self.assertTrue(not s2 >= s3)
            self.assertTrue(not s1 >= s4)
            self.assertTrue(not s2 >= s4)
            self.assertTrue(not s1 >= s5)
            self.assertTrue(not s2 >= s5)
            self.assertTrue(not s1 <= s3)
            self.assertTrue(not s2 <= s3)
            self.assertTrue(not s1 <= s4)
            self.assertTrue(not s2 <= s4)
            self.assertTrue(not s1 <= s5)
            self.assertTrue(not s2 <= s5)
            self.assertEqual(s3.cardinality(), 2)
            self.assertEqual(s4.cardinality(), 2)
            self.assertEqual(s5.cardinality(), 2)
            s6 = IPSet(["1.2.3.4", "3.4.5.6", "8.9.10.11"])
            s7 = IPSet(["::", "::ffff:8.9.10.11", "::ffff:6.5.4.3"])
            s8 = IPSet(["3.4.5.6", "6.5.4.3", "2.7.6.5"]).convert(6)
            (a, b, c) = (s7 ^ s8), (s7 ^ s6), (s8 ^ s6)
            (d, e, f) = (s8 ^ s7), (s6 ^ s7), (s6 ^ s8)
            self.assertTrue(a == d and b == e and c == f)
            for x in (a, b, c, d, e, f):
                self.assertTrue(x.cardinality() == 4)
            self.assertRaises(TypeError, operator.xor, s1,
                              ["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])
            self.assertRaises(TypeError, operator.xor, s2,
                              ["2001:db8:1:2::3:4", "2001:db8:5:6::7:8"])
            self.assertRaises(TypeError, operator_ixor, s5,
                              ["2001:db8:5:6::7:8", "2001:db8:9:10::11:12"])

    def testIPSetIsDisjoint(self):
        s1 = IPSet(IPAddr(x) for x in ["1.1.1.1", "2.2.2.2"])
        s2 = IPSet(IPAddr(x) for x in ["3.3.3.3", "4.4.4.4"])
        s3 = IPSet(IPAddr(x) for x in ["1.1.1.1", "3.3.3.3"])
        self.assertEqual(s1.isdisjoint(s1), False)
        self.assertEqual(s1.isdisjoint(s2), True)
        self.assertEqual(s2.isdisjoint(s1), True)
        self.assertEqual(s2.isdisjoint(s3), False)
        self.assertEqual(s3.isdisjoint(s2), False)
        self.assertEqual(s1.isdisjoint(s3), False)
        self.assertEqual(s3.isdisjoint(s1), False)

        s7 = IPSet(IPAddr("255.255.255.255"))
        for i in range(32, 0, -1):
            w1 = IPWildcard("255.255.255.255/" + str(i))
            self.assertEqual(s7.isdisjoint(w1), False,
                             "isdisjoint failure for %d" % i)

        if IPSet.supports_ipv6():
            s4 = IPSet(IPAddr(x) for x in ["2001:db8::1", "2001:db8::2:0"])
            s5 = IPSet(IPAddr(x) for x in ["2001:db8::3:0:0", "2001:db8:4::"])
            s6 = IPSet(IPAddr(x) for x in ["2001:db8::2:0", "2001:db8::3:0:0"])
            self.assertEqual(s4.isdisjoint(s4), False)
            self.assertEqual(s4.isdisjoint(s5), True)
            self.assertEqual(s5.isdisjoint(s4), True)
            self.assertEqual(s5.isdisjoint(s6), False)
            self.assertEqual(s6.isdisjoint(s5), False)
            self.assertEqual(s4.isdisjoint(s6), False)
            self.assertEqual(s6.isdisjoint(s4), False)
            self.assertEqual(s1.isdisjoint(s4), True)
            self.assertEqual(s4.isdisjoint(s1), True)
            self.assertEqual(s2.isdisjoint(s5), True)
            self.assertEqual(s5.isdisjoint(s2), True)
            self.assertEqual(s3.isdisjoint(s6), True)
            self.assertEqual(s6.isdisjoint(s3), True)
            s4.update(s1)
            self.assertEqual(s1.isdisjoint(s4), False)
            self.assertEqual(s4.isdisjoint(s1), False)
            self.assertEqual(s2.isdisjoint(s4), True)
            self.assertEqual(s4.isdisjoint(s2), True)
            self.assertEqual(s3.isdisjoint(s4), False)
            self.assertEqual(s4.isdisjoint(s3), False)
            s5.update(s2)
            self.assertEqual(s1.isdisjoint(s5), True)
            self.assertEqual(s5.isdisjoint(s1), True)
            self.assertEqual(s2.isdisjoint(s5), False)
            self.assertEqual(s5.isdisjoint(s2), False)
            self.assertEqual(s3.isdisjoint(s5), False)
            self.assertEqual(s5.isdisjoint(s3), False)
            self.assertEqual(s4.isdisjoint(s5), True)
            self.assertEqual(s5.isdisjoint(s4), True)
            s6.update(s3)
            self.assertEqual(s1.isdisjoint(s6), False)
            self.assertEqual(s6.isdisjoint(s1), False)
            self.assertEqual(s2.isdisjoint(s6), False)
            self.assertEqual(s6.isdisjoint(s2), False)
            self.assertEqual(s3.isdisjoint(s6), False)
            self.assertEqual(s6.isdisjoint(s3), False)
            self.assertEqual(s5.isdisjoint(s6), False)
            self.assertEqual(s6.isdisjoint(s5), False)
            self.assertEqual(s4.isdisjoint(s6), False)
            self.assertEqual(s6.isdisjoint(s4), False)

            s8 = IPSet(IPAddr("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"))
            for i in range(128, 0, -1):
                w2 = IPWildcard("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/"
                                + str(i))
                self.assertEqual(s8.isdisjoint(w2), False,
                                 "isdisjoint failure for %d" % i)

    def testIPSetPop(self):
        s = IPSet(IPAddr(x) for x in ["1.1.1.1", "2.2.2.2"])
        self.assertEqual(len(s), 2)
        a = s.pop()
        self.assertEqual(len(s), 1)
        b = s.pop()
        self.assertEqual(len(s), 0)
        self.assertTrue(a == IPAddr("1.1.1.1") or a == IPAddr("2.2.2.2"))
        self.assertTrue(b == IPAddr("1.1.1.1") or b == IPAddr("2.2.2.2"))
        self.assertNotEqual(a, b)
        self.assertRaises(KeyError, s.pop)

    def testIPSetIterators(self):
        s = IPSet()
        s.add("10.10.10.10")
        s.discard("10.10.10.10")
        cidrlist = list(s.cidr_iter())
        self.assertEqual(len(cidrlist), 0)
        ipaddrs = [IPAddr(x) for x in
                   ["1.2.3.4", "1.2.3.5", "1.2.3.6", "1.2.3.7",
                    "1.2.3.8", "1.2.3.9", "0.0.0.0"]]
        s = IPSet(ipaddrs)
        count = 0
        for x in s:
            self.assertTrue(x in s)
            self.assertTrue(x in ipaddrs)
            count += 1
        self.assertEqual(count, len(ipaddrs))
        cidrlist = list(s.cidr_iter())
        self.assertEqual(len(cidrlist), 3)
        blocks = [IPAddr(x) for x in ['0.0.0.0', '1.2.3.4', '1.2.3.8']]
        prefixes = [32, 30, 31]
        self.assertEqual(set(cidrlist), set(zip(blocks, prefixes)))
        if IPSet.supports_ipv6():
            s = IPSet()
            s.add("2001:db8:10:10::10:10")
            s.discard("2001:db8:10:10::10:10")
            cidrlist = list(s.cidr_iter())
            self.assertEqual(len(cidrlist), 0)
            ipaddrs = [IPAddr(x) for x in
                       ["2001:db8:1:2::3:4", "2001:db8:1:2::3:5",
                        "2001:db8:1:2::3:6", "2001:db8:1:2::3:7",
                        "2001:db8:1:2::3:8", "2001:db8:1:2::3:9",
                        "2001:db8::"]]
            s = IPSet(ipaddrs)
            count = 0
            for x in s:
                self.assertTrue(x in s)
                self.assertTrue(x in ipaddrs)
                count += 1
            self.assertEqual(count, len(ipaddrs))
            cidrlist = list(s.cidr_iter())
            self.assertEqual(len(cidrlist), 3)
            blocks = [IPAddr(x) for x in
                      ['2001:db8:0:0::0:0', '2001:db8:1:2::3:4',
                       '2001:db8:1:2::3:8']]
            prefixes = [128, 126, 127]
            self.assertEqual(set(cidrlist), set(zip(blocks, prefixes)))

    def testIPSetIO(self):
        s = IPSet(["1.2.3.4", "1.2.3.5", "1.2.3.6", "1.2.3.7",
                   "1.2.3.8", "1.2.3.9", "0.0.0.0"])
        s.save(self.tmpfile)
        ns = IPSet.load(self.tmpfile)
        self.assertTrue(s is not ns)
        self.assertEqual(s, ns)
        self.rmfile()
        if IPSet.supports_ipv6():
            s = IPSet(["2001:db8:1:2::3:4", "2001:db8:1:2::3:5",
                       "2001:db8:1:2::3:6", "2001:db8:1:2::3:7",
                       "2001:db8:1:2::3:8", "2001:db8:1:2::3:9",
                       "2001:db8::"])
            s.save(self.tmpfile)
            ns = IPSet.load(self.tmpfile)
            self.assertTrue(s is not ns)
            self.assertEqual(s, ns)
            self.rmfile()
            s = IPSet(["2001:db8:1:2::3:4", "127.0.0.1"])
            s.discard("2001:db8:1:2::3:4")
            s.save(self.tmpfile)
            ns = IPSet.load(self.tmpfile)
            self.assertTrue(s is not ns)
            # The following is a hack to ensure that both IPSets
            # represent their IPs as IPv6
            s.add("2001:db::1")
            ns.add("2001:db::1")
            self.assertEqual(s, ns)
            self.rmfile()

    def testPickle(self):
        self.assertRaises(TypeError, pickle.dumps,
                          IPSet())
        for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
            self.assertRaises(TypeError, pickle.dumps,
                              IPSet(), i)


class TestBag(unittest.TestCase):

    def setUp(self):
        warnings.simplefilter("ignore", RuntimeWarning)
        self.tmpdir = tempfile.mkdtemp()
        self.tmpfile = tempname(self.tmpdir)
        warnings.simplefilter("default", RuntimeWarning)

    def rmfile(self):
        os.remove(self.tmpfile)

    def tearDown(self):
        try:
            self.rmfile()
        except:
            pass
        os.rmdir(self.tmpdir)

    def simpleIPAddrBag(self):
        b = Bag(key_type=bag_types["any_ipv4"])
        b.add(IPAddr(x) for x in ["1.1.1.1", "2.2.2.2", "3.3.3.3", "4.4.4.4",
                                  "255.255.255.255"])
        b.incr(IPAddr("10.10.10.10"), 5)
        return b

    def simpleIPv6AddrBag(self):
        b = Bag.ipaddr()
        b.add(IPAddr(x) for x in ["::1", "2::", "3::4", "5::6.7.8.9",
                                  "::ffff:1.1.1.1",
                                  "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"])
        b.incr(IPAddr("10:10:10:10:10:10:10:10"), 5)
        return b

    def simpleIntBag(self):
        b = Bag.integer()
        b.add(1, 2, 3, 4, 0xffffffff)
        b.incr(10, 5)
        return b

    def simpleBags(self):
        a = Bag.integer({1: 5, 2: 10,
                         5: 5, 6: 10,
                         9: 5, 10: 10,
                         11: 1, 12: 0xfffffffffffffffd})
        b = Bag.integer({1: 5, 2: 10,
                         3: 5, 4: 10,
                         9: 10, 10: 5,
                         11: 0xfffffffffffffffd, 12: 1})
        return (a, b)

    def testBagConstruction(self):
        b = Bag()
        b.save(self.tmpfile)
        Bag.load(self.tmpfile)
        self.rmfile()
        b = Bag.ipaddr()
        b.save(self.tmpfile)
        Bag.load(self.tmpfile)
        self.rmfile()
        b = Bag.integer()
        b.save(self.tmpfile)
        Bag.load(self.tmpfile)
        self.rmfile()
        Bag({IPAddr("1.1.1.1"): 1, IPAddr("2.2.2.2"): 2,
             IPAddr("255.255.255.255"): 1})
        Bag([(IPAddr("1.1.1.1"), 1), (IPAddr("2.2.2.2"), 2),
             (IPAddr("255.255.255.255"), 1)])
        Bag.integer({1: 1, 2: 2, 0xFFFFFFFF: 1})
        Bag.integer([(1, 1), (2, 2), (0xFFFFFFFF, 1)])
        Bag(key_type=bag_types["custom"], key_len=2,
            counter_type=bag_types["custom"], counter_len=8)

    def testBagIO(self):
        a = self.simpleIntBag()
        a.save(self.tmpfile)
        b = Bag.load(self.tmpfile)
        self.assertEqual(a, b)
        self.assertEqual(a.get_info(), b.get_info())
        self.rmfile()
        a = self.simpleIPAddrBag()
        a.save(self.tmpfile)
        b = Bag.load(self.tmpfile)
        self.assertEqual(a, b)
        self.assertEqual(a.get_info(), b.get_info())
        self.rmfile()
        if ipv6_enabled():
            a = self.simpleIPv6AddrBag()
            a.save(self.tmpfile)
            b = Bag.load(self.tmpfile)
            self.assertEqual(a, b)
            self.assertEqual(a.get_info(), b.get_info())
            self.rmfile()

    def testBagAddInAndIndex(self):
        b = Bag.integer()
        self.assertEqual(1 in b, False)
        self.assertEqual(0 in b, False)
        self.assertEqual(0xffffffff in b, False)
        self.assertEqual(1 not in b, True)
        self.assertEqual(0 not in b, True)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 0)
        self.assertEqual(b[0xffffffff], 0)
        b.add(1)
        self.assertEqual(1 in b, True)
        self.assertEqual(0 in b, False)
        self.assertEqual(0xffffffff in b, False)
        self.assertEqual(1 not in b, False)
        self.assertEqual(0 not in b, True)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[0xffffffff], 0)
        b.add(1)
        self.assertEqual(1 in b, True)
        self.assertEqual(0 in b, False)
        self.assertEqual(0xffffffff in b, False)
        self.assertEqual(1 not in b, False)
        self.assertEqual(0 not in b, True)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 2)
        self.assertEqual(b[0xffffffff], 0)
        b.add(0xffffffff)
        self.assertEqual(1 in b, True)
        self.assertEqual(0 in b, False)
        self.assertEqual(0xffffffff in b, True)
        self.assertEqual(1 not in b, False)
        self.assertEqual(0 not in b, True)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 2)
        self.assertEqual(b[0xffffffff], 1)
        b.add([2,3])
        self.assertEqual(2 in b, True)
        self.assertEqual(3 in b, True)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        b.add(2,3)
        self.assertEqual(2 in b, True)
        self.assertEqual(3 in b, True)
        self.assertEqual(b[2], 2)
        self.assertEqual(b[3], 2)
        self.assertRaises(TypeError, b.add, IPv4Addr(0))
        b = Bag.ipaddr()
        self.assertEqual(IPAddr("1.1.1.1") in b, False)
        self.assertEqual(IPAddr("0.0.0.0") in b, False)
        self.assertEqual(IPAddr("255.255.255.255") in b, False)
        self.assertEqual(IPAddr("1.1.1.1") not in b, True)
        self.assertEqual(IPAddr("0.0.0.0") not in b, True)
        self.assertEqual(b[IPAddr("0.0.0.0")], 0)
        self.assertEqual(b[IPAddr("1.1.1.1")], 0)
        self.assertEqual(b[IPAddr("255.255.255.255")], 0)
        if ipv6_enabled():
            self.assertEqual(IPAddr("::ffff:1.1.1.1") in b, False)
            self.assertEqual(IPAddr("1::") in b, False)
            self.assertEqual(IPAddr("1::") not in b, True)
            self.assertEqual(b[IPAddr("1::")], 0)
        b.add(IPAddr("1.1.1.1"))
        self.assertEqual(IPAddr("1.1.1.1") in b, True)
        self.assertEqual(IPAddr("0.0.0.0") in b, False)
        self.assertEqual(IPAddr("255.255.255.255") in b, False)
        self.assertEqual(IPAddr("1.1.1.1") not in b, False)
        self.assertEqual(IPAddr("0.0.0.0") not in b, True)
        self.assertEqual(b[IPAddr("0.0.0.0")], 0)
        self.assertEqual(b[IPAddr("1.1.1.1")], 1)
        self.assertEqual(b[IPAddr("255.255.255.255")], 0)
        if ipv6_enabled():
            self.assertEqual(IPAddr("::ffff:1.1.1.1") in b, True)
            self.assertEqual(IPAddr("1::") in b, False)
            self.assertEqual(IPAddr("1::") not in b, True)
            self.assertEqual(b[IPAddr("1::")], 0)
        b.add(IPAddr("1.1.1.1"))
        self.assertEqual(IPAddr("1.1.1.1") in b, True)
        self.assertEqual(IPAddr("0.0.0.0") in b, False)
        self.assertEqual(IPAddr("255.255.255.255") in b, False)
        self.assertEqual(IPAddr("1.1.1.1") not in b, False)
        self.assertEqual(IPAddr("0.0.0.0") not in b, True)
        self.assertEqual(b[IPAddr("0.0.0.0")], 0)
        self.assertEqual(b[IPAddr("1.1.1.1")], 2)
        self.assertEqual(b[IPAddr("255.255.255.255")], 0)
        if ipv6_enabled():
            self.assertEqual(IPAddr("::ffff:1.1.1.1") in b, True)
            self.assertEqual(IPAddr("1::") in b, False)
            self.assertEqual(IPAddr("1::") not in b, True)
            self.assertEqual(b[IPAddr("1::")], 0)
        b.add(IPAddr("255.255.255.255"))
        self.assertEqual(IPAddr("1.1.1.1") in b, True)
        self.assertEqual(IPAddr("0.0.0.0") in b, False)
        self.assertEqual(IPAddr("255.255.255.255") in b, True)
        self.assertEqual(IPAddr("1.1.1.1") not in b, False)
        self.assertEqual(IPAddr("0.0.0.0") not in b, True)
        self.assertEqual(b[IPAddr("0.0.0.0")], 0)
        self.assertEqual(b[IPAddr("1.1.1.1")], 2)
        self.assertEqual(b[IPAddr("255.255.255.255")], 1)
        if ipv6_enabled():
            self.assertEqual(IPAddr("::ffff:1.1.1.1") in b, True)
            self.assertEqual(IPAddr("1::") in b, False)
            self.assertEqual(IPAddr("1::") not in b, True)
            self.assertEqual(b[IPAddr("1::")], 0)

            b.add(IPAddr("1::"))
            self.assertEqual(IPAddr("1.1.1.1") in b, True)
            self.assertEqual(IPAddr("::ffff:1.1.1.1") in b, True)
            self.assertEqual(IPAddr("0.0.0.0") in b, False)
            self.assertEqual(IPAddr("1::") in b, True)
            self.assertEqual(IPAddr("255.255.255.255") in b, True)
            self.assertEqual(IPAddr("1.1.1.1") not in b, False)
            self.assertEqual(IPAddr("0.0.0.0") not in b, True)
            self.assertEqual(IPAddr("1::") not in b, False)
            self.assertEqual(b[IPAddr("0.0.0.0")], 0)
            self.assertEqual(b[IPAddr("1.1.1.1")], 2)
            self.assertEqual(b[IPAddr("255.255.255.255")], 1)
            self.assertEqual(b[IPAddr("1::")], 1)

        self.assertRaises(TypeError, b.add, 0)

    def testBagCopy(self):
        b1 = Bag.integer()
        b2 = b1
        b3 = b1.copy()
        self.assertTrue(b1 == b2 == b3)
        self.assertTrue(b1 is b2)
        self.assertTrue(b1 is not b3)
        b1.add(0)
        self.assertTrue(b1 == b2)
        self.assertTrue(b1 != b3)
        b1.add(1)
        b1.add(2)
        b3 = b1.copy()
        self.assertTrue(b1 == b2 == b3)
        self.assertTrue(b1 is b2)
        self.assertTrue(b1 is not b3)
        b1.add(0)
        self.assertTrue(b1 == b2)
        self.assertTrue(b1 != b3)

    def testBagRemove(self):
        b = Bag.integer()
        b.add(1)
        b.add(2)
        b.add(3)
        self.assertTrue(1 in b)
        self.assertTrue(2 in b)
        self.assertTrue(3 in b)
        b.remove(1)
        self.assertTrue(1 not in b)
        self.assertTrue(2 in b)
        self.assertTrue(3 in b)
        b.add(1)
        b.add(1)
        b.remove(1)
        self.assertTrue(1 in b)
        self.assertTrue(2 in b)
        self.assertTrue(3 in b)
        b.remove(1)
        self.assertTrue(1 not in b)
        self.assertTrue(2 in b)
        self.assertTrue(3 in b)
        b.remove([2,3])
        self.assertTrue(1 not in b)
        self.assertTrue(2 not in b)
        self.assertTrue(3 not in b)
        b.add(1,3)
        self.assertTrue(1 in b)
        self.assertTrue(2 not in b)
        self.assertTrue(3 in b)
        b.remove(1, 3)
        self.assertTrue(1 not in b)
        self.assertTrue(2 not in b)
        self.assertTrue(3 not in b)
        self.assertRaises(ValueError, b.remove, 1)
        self.assertRaises(TypeError, b.remove, "2")
        self.assertRaises(TypeError, b.remove, "0.0.0.2")
        self.assertRaises(TypeError, b.remove, IPAddr("0.0.0.2"))

    def testBagSimpleGetitem(self):
        b = self.simpleIntBag()
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        self.assertRaises(IndexError, b.__getitem__, -1)
        self.assertRaises(IndexError, b.__getitem__, 0x100000000)
        self.assertRaises(TypeError, b.__getitem__, "1")
        b = self.simpleIPAddrBag()
        self.assertEqual(b[IPAddr("0.0.0.0")], 0)
        self.assertEqual(b[IPAddr("1.1.1.1")], 1)
        self.assertEqual(b[IPAddr("2.2.2.2")], 1)
        self.assertEqual(b[IPAddr("9.9.9.9")], 0)
        self.assertEqual(b[IPAddr("10.10.10.10")], 5)
        self.assertEqual(b[IPAddr("255.255.255.255")], 1)
        self.assertRaises(TypeError, b.__getitem__, -1)
        self.assertRaises(TypeError, b.__getitem__, 0x100000000)
        self.assertRaises(TypeError, b.__getitem__, 1)
        self.assertRaises(TypeError, b.__getitem__, "1.1.1.1")
        if ipv6_enabled():
            b = self.simpleIPv6AddrBag()
            self.assertEqual(b[IPAddr("::0")], 0)
            self.assertEqual(b[IPAddr("::1")], 1)
            self.assertEqual(b[IPAddr("2::")], 1)
            self.assertEqual(b[IPAddr("::9")], 0)
            self.assertEqual(b[IPAddr("1.1.1.1")], 1)
            self.assertEqual(b[IPAddr("10:10:10:10:10:10:10:10")], 5)
            self.assertEqual(
                b[IPAddr("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")], 1)
            self.assertRaises(TypeError, b.__getitem__, -1)
            self.assertRaises(TypeError, b.__getitem__, 0x100000000)
            self.assertRaises(TypeError, b.__getitem__, 1)
            self.assertRaises(TypeError, b.__getitem__, "1.1.1.1")

    def testBagSlice(self):
        b = self.simpleIntBag()
        c = b[2:4]
        self.assertEqual(c[0], 0)
        self.assertEqual(c[1], 0)
        self.assertEqual(c[2], 1)
        self.assertEqual(c[3], 1)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[9], 0)
        self.assertEqual(c[10], 0)
        self.assertEqual(c[0xffffffff], 0)
        c = b[2:4,10]
        self.assertEqual(c[0], 0)
        self.assertEqual(c[1], 0)
        self.assertEqual(c[2], 1)
        self.assertEqual(c[3], 1)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[9], 0)
        self.assertEqual(c[10], 5)
        self.assertEqual(c[0xffffffff], 0)
        self.assertRaises(ValueError, c.__getitem__, slice(2,4,2))
        b = self.simpleIPAddrBag()
        d = IPSet(["2.2.2.2", "4.4.4.4", "10.10.10.10"])
        c = b[d]
        self.assertEqual(c[IPAddr("0.0.0.0")], 0)
        self.assertEqual(c[IPAddr("1.1.1.1")], 0)
        self.assertEqual(c[IPAddr("2.2.2.2")], 1)
        self.assertEqual(c[IPAddr("3.3.3.3")], 0)
        self.assertEqual(c[IPAddr("4.4.4.4")], 1)
        self.assertEqual(c[IPAddr("5.5.5.5")], 0)
        self.assertEqual(c[IPAddr("9.9.9.9")], 0)
        self.assertEqual(c[IPAddr("10.10.10.10")], 5)
        self.assertEqual(c[IPAddr("255.255.255.255")], 0)
        e = IPWildcard("10.10.10.x")
        c = b[e]
        self.assertEqual(c[IPAddr("0.0.0.0")], 0)
        self.assertEqual(c[IPAddr("1.1.1.1")], 0)
        self.assertEqual(c[IPAddr("2.2.2.2")], 0)
        self.assertEqual(c[IPAddr("3.3.3.3")], 0)
        self.assertEqual(c[IPAddr("4.4.4.4")], 0)
        self.assertEqual(c[IPAddr("5.5.5.5")], 0)
        self.assertEqual(c[IPAddr("9.9.9.9")], 0)
        self.assertEqual(c[IPAddr("10.10.10.10")], 5)
        self.assertEqual(c[IPAddr("255.255.255.255")], 0)
        c = b[d, IPAddr("255.255.255.255")]
        self.assertEqual(c[IPAddr("0.0.0.0")], 0)
        self.assertEqual(c[IPAddr("1.1.1.1")], 0)
        self.assertEqual(c[IPAddr("2.2.2.2")], 1)
        self.assertEqual(c[IPAddr("3.3.3.3")], 0)
        self.assertEqual(c[IPAddr("4.4.4.4")], 1)
        self.assertEqual(c[IPAddr("5.5.5.5")], 0)
        self.assertEqual(c[IPAddr("9.9.9.9")], 0)
        self.assertEqual(c[IPAddr("10.10.10.10")], 5)
        self.assertEqual(c[IPAddr("255.255.255.255")], 1)
        self.assertRaises(TypeError, c.__getitem__, slice(2,4))
        if IPSet.supports_ipv6():
            b = self.simpleIPv6AddrBag()
            d = IPSet(["::1", "::2", "1.1.1.1", "10:10:10:10:10:10:10:10"])
            c = b[d]
            self.assertEqual(c[IPAddr("::1")], 1)
            self.assertEqual(c[IPAddr("::2")], 0)
            self.assertEqual(c[IPAddr("2::")], 0)
            self.assertEqual(c[IPAddr("3::4")], 0)
            self.assertEqual(c[IPAddr("5::6.7.8.9")], 0)
            self.assertEqual(c[IPAddr("1.1.1.1")], 1)
            self.assertEqual(c[IPAddr("10:10:10:10:10:10:10:10")], 5)
            self.assertEqual(
                c[IPAddr("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")], 0)

    def testBagDelItem(self):
        b = self.simpleIntBag()
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        del b[2]
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 0)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        del b[10]
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 0)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 0)
        self.assertEqual(b[0xffffffff], 1)
        del b[0xffffffff]
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 0)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 0)
        self.assertEqual(b[0xffffffff], 0)
        del b[0]
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 0)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 0)
        self.assertEqual(b[0xffffffff], 0)
        self.assertRaises(TypeError, b.__delitem__, IPv4Addr(0))

    def testBagSetItem(self):
        b = self.simpleIntBag()
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        b[2] = 5
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 5)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        b[10] = 0
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 5)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 0)
        self.assertEqual(b[0xffffffff], 1)
        b[0xffffffff] = 15
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 5)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 0)
        self.assertEqual(b[0xffffffff], 15)
        self.assertRaises(TypeError, b.__setitem__, IPv4Addr(0), 0)
        self.assertRaises(TypeError, b.__setitem__, 0, IPv4Addr(0))

    def testBagIterKeys(self):
        b = self.simpleIntBag()
        c = [1, 2, 3, 4, 10, 0xffffffff]
        self.assertEqual(sorted(b), c)
        self.assertEqual(sorted(b.iterkeys()), c)
        b = self.simpleIPAddrBag()
        c = [IPAddr(x) for x in ["1.1.1.1", "2.2.2.2", "3.3.3.3", "4.4.4.4",
                                 "10.10.10.10", "255.255.255.255"]]
        self.assertEqual(sorted(b), c)
        self.assertEqual(sorted(b.iterkeys()), c)
        if ipv6_enabled():
            b = self.simpleIPv6AddrBag()
            c = [IPAddr(x) for x in
                 ["::1", "::ffff:1.1.1.1", "2::",
                  "3::4", "5::6.7.8.9",
                  "10:10:10:10:10:10:10:10",
                  "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"]]
            self.assertEqual(sorted(b), c)
            self.assertEqual(sorted(b.iterkeys()), c)

    def testBagGet(self):
        b = self.simpleIntBag()
        self.assertEqual(b.get(0), None)
        self.assertEqual(b.get(0, "Foo"), "Foo")
        self.assertEqual(b.get(1), 1)
        self.assertEqual(b.get(1, "Foo"), 1)
        self.assertEqual(b.get(0XFFFFFFFE), None)
        self.assertEqual(b.get(0xFFFFFFFE, "Foo"), "Foo")
        self.assertEqual(b.get(0XFFFFFFFF), 1)
        self.assertEqual(b.get(0xFFFFFFFF, "Foo"), 1)
        self.assertRaises(IndexError, b.get, -1)
        self.assertRaises(IndexError, b.get, 0x100000000)
        self.assertRaises(TypeError, b.get, "foo")
        self.assertRaises(TypeError, b.get, "foo", "bar")
        self.assertRaises(TypeError, b.get, IPv4Addr(0), "bar")
        b = self.simpleIPAddrBag()
        self.assertEqual(b.get(IPAddr("0.0.0.0")), None)
        self.assertEqual(b.get(IPAddr("0.0.0.0"), "Foo"), "Foo")
        self.assertEqual(b.get(IPAddr("1.1.1.1")), 1)
        self.assertEqual(b.get(IPAddr("1.1.1.1"), "Foo"), 1)
        self.assertEqual(b.get(IPAddr("255.255.255.254")), None)
        self.assertEqual(b.get(IPAddr("255.255.255.254"), "Foo"), "Foo")
        self.assertEqual(b.get(IPAddr("255.255.255.255")), 1)
        self.assertEqual(b.get(IPAddr("255.255.255.255"), "Foo"), 1)
        self.assertRaises(TypeError, b.get, "foo")
        self.assertRaises(TypeError, b.get, "foo", "bar")
        self.assertRaises(TypeError, b.get, 0, "bar")

    def testBagIterItems(self):
        b = self.simpleIntBag()
        d = [1, 2, 3, 4, 10, 0xffffffff]
        e = [1, 1, 1, 1, 5, 1]
        f = [1, 1, 1, 1, 1, 5, 1]
        c = sorted(zip(d,e))
        self.assertEqual(sorted(b.iteritems()), c)
        b = self.simpleIPAddrBag()
        d = [IPAddr(x) for x in ["1.1.1.1", "2.2.2.2", "3.3.3.3", "4.4.4.4",
                                 "10.10.10.10", "255.255.255.255"]]
        c = sorted(zip(d,e))
        self.assertEqual(sorted(b.iteritems()), c)
        if ipv6_enabled():
            b = self.simpleIPv6AddrBag()
            d = [IPAddr(x) for x in
                 ["::1", "::ffff:1.1.1.1", "2::",
                  "3::4", "5::6.7.8.9",
                  "10:10:10:10:10:10:10:10",
                  "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"]]
            c = sorted(zip(d, f))
            self.assertEqual(sorted(b.iteritems()), c)

    def testBagSortedIter(self):
        b = self.simpleIntBag()
        d = [1, 2, 3, 4, 10, 0xffffffff]
        e = [1, 1, 1, 1, 5, 1]
        f = [1, 1, 1, 1, 1, 5, 1]
        c = list(zip(d,e))
        self.assertEqual(list(b.sorted_iter()), c)
        b = self.simpleIPAddrBag()
        d = [IPAddr(x) for x in ["1.1.1.1", "2.2.2.2", "3.3.3.3", "4.4.4.4",
                                 "10.10.10.10", "255.255.255.255"]]
        c = list(zip(d,e))
        self.assertEqual(list(b.sorted_iter()), c)
        if ipv6_enabled():
            b = self.simpleIPv6AddrBag()
            d = [IPAddr(x) for x in
                 ["::1", "::ffff:1.1.1.1", "2::",
                  "3::4", "5::6.7.8.9",
                  "10:10:10:10:10:10:10:10",
                  "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"]]
            c = list(zip(d, f))
            self.assertEqual(list(b.sorted_iter()), c)

    def testBagIterValues(self):
        b = self.simpleIntBag()
        c = sorted([1, 1, 1, 1, 5, 1])
        self.assertEqual(sorted(b.itervalues()), c)
        b = self.simpleIPAddrBag()
        self.assertEqual(sorted(b.itervalues()), c)

    def testBagUpdate(self):
        b = self.simpleIntBag()
        c = b.copy()
        del c[3]
        c[9] = 2
        c[10] = 2
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        b.update(c)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 2)
        self.assertEqual(b[10], 2)
        self.assertEqual(b[0xffffffff], 1)
        b = self.simpleIntBag()
        b.update({0:3, 10:3})
        self.assertEqual(b[0], 3)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 3)
        self.assertEqual(b[0xffffffff], 1)
        b = self.simpleIntBag()
        b.update([(0,3), (10,3)])
        self.assertEqual(b[0], 3)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 3)
        self.assertEqual(b[0xffffffff], 1)
        self.assertRaises(TypeError, b.update, [0, 1, 2])

    def testBagRemove(self):
        b = self.simpleIntBag()
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        b.remove(10)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 4)
        self.assertEqual(b[0xffffffff], 1)
        b.remove(1, 3)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 0)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 0)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 4)
        self.assertEqual(b[0xffffffff], 1)
        b.remove([10,0xffffffff])
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 0)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 0)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 3)
        self.assertEqual(b[0xffffffff], 0)
        self.assertRaises(ValueError, b.remove, 0)

    def testBagIncrDecr(self):
        b = self.simpleIntBag()
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 1)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        b.incr(1)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 2)
        self.assertEqual(b[2], 1)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        b.decr(2)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 2)
        self.assertEqual(b[2], 0)
        self.assertEqual(b[3], 1)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        b.incr(3, 4)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 2)
        self.assertEqual(b[2], 0)
        self.assertEqual(b[3], 5)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 5)
        self.assertEqual(b[0xffffffff], 1)
        b.decr(10, 4)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 2)
        self.assertEqual(b[2], 0)
        self.assertEqual(b[3], 5)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 1)
        self.assertEqual(b[0xffffffff], 1)
        b.incr(1, 0xffffffffffffff00)
        self.assertEqual(b[0], 0)
        self.assertEqual(b[1], 0xffffffffffffff02)
        self.assertEqual(b[2], 0)
        self.assertEqual(b[3], 5)
        self.assertEqual(b[9], 0)
        self.assertEqual(b[10], 1)
        self.assertEqual(b[0xffffffff], 1)
        self.assertRaises(TypeError, b.incr, 3, "2")
        self.assertRaises(TypeError, b.decr, 3, "2")
        self.assertRaises(TypeError, b.incr, (3, 2))
        self.assertRaises(TypeError, b.decr, (3, 2))
        self.assertRaises(ValueError, b.incr, 1, 0xffffffff)
        self.assertRaises(ValueError, b.decr, 10, 2)

    def testBagAdd(self):
        a, b = self.simpleBags()
        c = a + b
        self.assertEqual(c[1], 10)
        self.assertEqual(c[2], 20)
        self.assertEqual(c[3], 5)
        self.assertEqual(c[4], 10)
        self.assertEqual(c[5], 5)
        self.assertEqual(c[6], 10)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 15)
        self.assertEqual(c[10], 15)
        self.assertEqual(c[11], 0xfffffffffffffffe)
        self.assertEqual(c[12], 0xfffffffffffffffe)
        c = a.copy()
        c += b
        self.assertEqual(c[1], 10)
        self.assertEqual(c[2], 20)
        self.assertEqual(c[3], 5)
        self.assertEqual(c[4], 10)
        self.assertEqual(c[5], 5)
        self.assertEqual(c[6], 10)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 15)
        self.assertEqual(c[10], 15)
        self.assertEqual(c[11], 0xfffffffffffffffe)
        self.assertEqual(c[12], 0xfffffffffffffffe)
        self.assertRaises(TypeError, operator.add, a, 1)
        self.assertRaises(TypeError, operator.add, b, "d")
        self.assertEqual(a.__iadd__(1), NotImplemented)
        self.assertEqual(b.__iadd__("d"), NotImplemented)
        self.assertRaises(ValueError, operator.add, a, a)

    def testBagSub(self):
        a, b = self.simpleBags()
        c = a - b
        self.assertEqual(c[1], 0)
        self.assertEqual(c[2], 0)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 5)
        self.assertEqual(c[6], 10)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 0)
        self.assertEqual(c[10], 5)
        self.assertEqual(c[11], 0)
        self.assertEqual(c[12], 0xfffffffffffffffc)
        c = a.copy()
        c -= b
        self.assertEqual(c[1], 0)
        self.assertEqual(c[2], 0)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 5)
        self.assertEqual(c[6], 10)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 0)
        self.assertEqual(c[10], 5)
        self.assertEqual(c[11], 0)
        self.assertEqual(c[12], 0xfffffffffffffffc)
        self.assertRaises(TypeError, operator.sub, a, 1)
        self.assertRaises(TypeError, operator.sub, b, "d")
        self.assertEqual(a.__iadd__(1), NotImplemented)
        self.assertEqual(b.__iadd__("d"), NotImplemented)

    def testBagGroupIterator(self):
        a, b = self.simpleBags()
        self.assertEqual(
            sorted(a.group_iterator(b)),
            [(1, 5, 5), (2, 10, 10),
             (3, None, 5), (4, None, 10),
             (5, 5, None), (6, 10, None),
             (9, 5, 10), (10, 10, 5),
             (11, 1, 0xfffffffffffffffd),
             (12, 0xfffffffffffffffd, 1)])
        a = Bag.integer({1: 1, 2: 2})
        b = Bag.integer()
        self.assertEqual(
            sorted(a.group_iterator(b)),
            [(1, 1, None), (2, 2, None)])
        self.assertEqual(
            sorted(b.group_iterator(a)),
            [(1, None, 1), (2, None, 2)])
        a = Bag.integer({1: 1, 2: 2, 3: 3})
        b = Bag.integer({1: 4})
        self.assertEqual(
            sorted(a.group_iterator(b)),
            [(1, 1, 4), (2, 2, None), (3, 3, None)])
        self.assertEqual(
            sorted(b.group_iterator(a)),
            [(1, 4, 1), (2, None, 2), (3, None, 3)])

    def testBagMin(self):
        a, b = self.simpleBags()
        c = a.min(b)
        self.assertEqual(c[1], 5)
        self.assertEqual(c[2], 10)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 0)
        self.assertEqual(c[6], 0)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 5)
        self.assertEqual(c[10], 5)
        self.assertEqual(c[11], 1)
        self.assertEqual(c[12], 1)
        self.assertRaises(TypeError, a.min, 1)
        self.assertRaises(TypeError, a.min, "d")

    def testBagMax(self):
        a, b = self.simpleBags()
        c = a.max(b)
        self.assertEqual(c[1], 5)
        self.assertEqual(c[2], 10)
        self.assertEqual(c[3], 5)
        self.assertEqual(c[4], 10)
        self.assertEqual(c[5], 5)
        self.assertEqual(c[6], 10)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 10)
        self.assertEqual(c[10], 10)
        self.assertEqual(c[11], 0xfffffffffffffffd)
        self.assertEqual(c[12], 0xfffffffffffffffd)
        self.assertRaises(TypeError, a.max, 1)
        self.assertRaises(TypeError, a.max, "d")

    def testBagDiv(self):
        a, b = self.simpleBags()
        c = a / b
        self.assertEqual(c[1], 1)
        self.assertEqual(c[2], 1)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 0)
        self.assertEqual(c[6], 0)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 1)
        self.assertEqual(c[10], 2)
        self.assertEqual(c[11], 0)
        self.assertEqual(c[12], 0xfffffffffffffffd)
        a[9] = 4
        a /= b
        c = a
        self.assertEqual(c[1], 1)
        self.assertEqual(c[2], 1)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 0)
        self.assertEqual(c[6], 0)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 0)
        self.assertEqual(c[10], 2)
        self.assertEqual(c[11], 0)
        self.assertEqual(c[12], 0xfffffffffffffffd)
        if sys.hexversion >= 0x03000000:
            # Python 3.x uses truediv instead of div
            self.assertRaises(TypeError, operator.truediv, b, 1)
            self.assertRaises(TypeError, operator.truediv, b, "d")
        else:
            self.assertRaises(TypeError, operator.div, b, 1)
            self.assertRaises(TypeError, operator.div, b, "d")

    def testBagScalarMul(self):
        a, b = self.simpleBags()
        self.assertRaises(OverflowError, operator.mul, a, 2)
        self.assertRaises(OverflowError, operator.mul, 2, a)
        a[12] = 0
        c = a * 2
        self.assertEqual(c[1], 10)
        self.assertEqual(c[2], 20)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 10)
        self.assertEqual(c[6], 20)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 10)
        self.assertEqual(c[10], 20)
        self.assertEqual(c[11], 2)
        self.assertEqual(c[12], 0)
        c = 2 * a
        self.assertEqual(c[1], 10)
        self.assertEqual(c[2], 20)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 10)
        self.assertEqual(c[6], 20)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 10)
        self.assertEqual(c[10], 20)
        self.assertEqual(c[11], 2)
        self.assertEqual(c[12], 0)
        a *= 2
        c = a
        self.assertEqual(c[1], 10)
        self.assertEqual(c[2], 20)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 10)
        self.assertEqual(c[6], 20)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 10)
        self.assertEqual(c[10], 20)
        self.assertEqual(c[11], 2)
        self.assertEqual(c[12], 0)
        self.assertRaises(TypeError, operator.mul, b, Bag.integer())
        self.assertRaises(TypeError, operator.mul, b, "d")

    def testBagIntersect(self):
        a, b = self.simpleBags()
        c = a.intersect(b)
        self.assertEqual(c[1], 5)
        self.assertEqual(c[2], 10)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 0)
        self.assertEqual(c[6], 0)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 5)
        self.assertEqual(c[10], 10)
        self.assertEqual(c[11], 1)
        self.assertEqual(c[12], 0xfffffffffffffffd)
        c = b.intersect(a)
        self.assertEqual(c[1], 5)
        self.assertEqual(c[2], 10)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 0)
        self.assertEqual(c[6], 0)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 10)
        self.assertEqual(c[10], 5)
        self.assertEqual(c[11], 0xfffffffffffffffd)
        self.assertEqual(c[12], 1)
        c = a.intersect(set([1, 2]))
        self.assertEqual(sorted(c.iteritems()),
                         [(1, 5), (2, 10)])

    def testBagComplementIntersect(self):
        a, b = self.simpleBags()
        c = a.complement_intersect(b)
        self.assertEqual(c[1], 0)
        self.assertEqual(c[2], 0)
        self.assertEqual(c[3], 0)
        self.assertEqual(c[4], 0)
        self.assertEqual(c[5], 5)
        self.assertEqual(c[6], 10)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 0)
        self.assertEqual(c[10], 0)
        self.assertEqual(c[11], 0)
        self.assertEqual(c[12], 0)
        c = b.complement_intersect(a)
        self.assertEqual(c[1], 0)
        self.assertEqual(c[2], 0)
        self.assertEqual(c[3], 5)
        self.assertEqual(c[4], 10)
        self.assertEqual(c[5], 0)
        self.assertEqual(c[6], 0)
        self.assertEqual(c[7], 0)
        self.assertEqual(c[8], 0)
        self.assertEqual(c[9], 0)
        self.assertEqual(c[10], 0)
        self.assertEqual(c[11], 0)
        self.assertEqual(c[12], 0)
        c = a.complement_intersect(set([1, 2, 9, 10, 11, 12]))
        self.assertEqual(sorted(c.iteritems()),
                         [(5, 5), (6, 10)])

    def testBagIPSet(self):
        a = self.simpleIPAddrBag()
        b = a.ipset()
        self.assertEqual(type(b), IPSet)
        self.assertEqual(sorted(b),
                         [IPAddr(x) for x in ["1.1.1.1", "2.2.2.2", "3.3.3.3",
                                              "4.4.4.4", "10.10.10.10",
                                              "255.255.255.255"]])
        if IPSet.supports_ipv6():
            a = self.simpleIPv6AddrBag()
            b = a.ipset()
            self.assertEqual(type(b), IPSet)
            self.assertEqual(sorted(b),
                             [IPAddr(x) for x in
                              ["::1", "::ffff:1.1.1.1", "2::",
                               "3::4", "5::6.7.8.9",
                               "10:10:10:10:10:10:10:10",
                               "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"]])
        a = self.simpleIntBag()
        self.assertRaises(TypeError, a.ipset)

    def testBagConstrain(self):
        a = self.simpleIntBag()
        a.add(2, 3)
        a.constrain_values(2, 10)
        self.assertEqual(sorted(a.iteritems()),
                         [(2, 2), (3, 2), (10, 5)])
        a = self.simpleIntBag()
        a.constrain_keys(2, 10)
        self.assertEqual(sorted(a.iteritems()),
                         [(2, 1), (3, 1), (4, 1), (10, 5)])

    def testBagInversion(self):
        a = self.simpleIntBag()
        b = a.inversion()
        self.assertEqual(sorted(b.iteritems()),
                         [(1, 5), (5, 1)])

    def testBagKeyLengths(self):
        a = Bag.integer(key_len=1)
        a[0] = 1
        a[0xff] = 1
        self.assertRaises(IndexError, a.__setitem__, 0x100, 1)
        self.assertEqual(a[0xff], 1)
        self.assertEqual(a[0x100], 0)
        a = Bag.integer(key_len=2)
        a[0] = 1
        a[0xff] = 1
        a[0xffff] = 1
        self.assertRaises(IndexError, a.__setitem__, 0x10000, 1)
        self.assertEqual(a[0xff], 1)
        self.assertEqual(a[0xffff], 1)
        self.assertEqual(a[0x10000], 0)
        if ipv6_enabled():
            a = Bag(key_type=bag_types["any_ipv4"])
            a[IPAddr("::ffff:1.1.1.1")] = 1
            self.assertRaises(IndexError, a.__setitem__, IPAddr("::1"), 1)
            self.assertEqual(a[IPAddr("::ffff:1.1.1.1")], 1)
            self.assertEqual(a[IPAddr("::1")], 0)

    def testBagConversion(self):
        a = Bag.integer(key_len=2)
        a[1] = 1
        a[0x100] = 1
        ai = a.get_info()
        self.assertEqual(a[1], 1)
        self.assertEqual(a[0x100], 1)
        self.assertEqual(ai["key_len"], 2)
        self.assertEqual(ai["key_type"], bag_types["custom"])
        a.set_info(key_len=4)
        ai = a.get_info()
        self.assertEqual(a[1], 1)
        self.assertEqual(a[0x100], 1)
        self.assertEqual(ai["key_len"], 4)
        self.assertEqual(ai["key_type"], bag_types["custom"])
        a.set_info(key_len=2)
        ai = a.get_info()
        self.assertEqual(a[1], 1)
        self.assertEqual(a[0x100], 1)
        self.assertEqual(ai["key_len"], 2)
        self.assertEqual(ai["key_type"], bag_types["custom"])
        a.set_info(key_len=1)
        ai = a.get_info()
        self.assertEqual(a[1], 1)
        self.assertEqual(a[0x100], 0)
        self.assertEqual(ai["key_len"], 1)
        self.assertEqual(ai["key_type"], bag_types["custom"])
        self.assertRaises(IndexError, a.__setitem__, 0x100, 1)
        a.set_info(key_type=bag_types['any_ipv4'])
        ai = a.get_info()
        self.assertEqual(a[IPAddr("0.0.0.1")], 1)
        self.assertEqual(a[IPAddr("0.0.1.0")], 0)
        self.assertEqual(ai["key_len"], 1)
        self.assertEqual(ai["key_type"], bag_types["any_ipv4"])
        self.assertRaises(IndexError, a.__setitem__, IPAddr("0.0.1.0"), 1)
        a.set_info(key_len=4)
        ai = a.get_info()
        a[IPAddr("0.0.1.0")] = 1
        self.assertEqual(a[IPAddr("0.0.0.1")], 1)
        self.assertEqual(a[IPAddr("0.0.1.0")], 1)
        self.assertEqual(ai["key_len"], 4)
        self.assertEqual(ai["key_type"], bag_types["any_ipv4"])

    def testBagArithConversions(self):
        a = Bag({1: 2, 22: 8, 2048: 16}, key_type=bag_types["sport"])
        b = Bag({1: 9, 53: 3, 2048: 5}, key_type=bag_types["dport"])
        ai = a.get_info()
        bi = b.get_info()
        self.assertEqual(ai["key_type"], bag_types["sport"])
        self.assertEqual(bi["key_type"], bag_types["dport"])
        c = a + b
        d = a - b
        self.assertEqual(ai["key_type"], bag_types["sport"])
        self.assertEqual(bi["key_type"], bag_types["dport"])
        self.assertEqual(c.get_info()["key_type"], bag_types["any_port"])
        self.assertEqual(d.get_info()["key_type"], bag_types["any_port"])
        self.assertEqual(len(c), 4)
        self.assertEqual(len(d), 2)
        c = b + a
        d = b - a
        self.assertEqual(ai["key_type"], bag_types["sport"])
        self.assertEqual(bi["key_type"], bag_types["dport"])
        self.assertEqual(c.get_info()["key_type"], bag_types["any_port"])
        self.assertEqual(d.get_info()["key_type"], bag_types["any_port"])
        self.assertEqual(len(c), 4)
        self.assertEqual(len(d), 2)
        c = a.copy()
        d = a.copy()
        c += b
        d -= b
        self.assertEqual(c.get_info()["key_type"], bag_types["any_port"])
        self.assertEqual(d.get_info()["key_type"], bag_types["any_port"])
        self.assertEqual(len(c), 4)
        self.assertEqual(len(d), 2)
        c = b.copy()
        d = b.copy()
        c += a
        d -= a
        self.assertEqual(c.get_info()["key_type"], bag_types["any_port"])
        self.assertEqual(d.get_info()["key_type"], bag_types["any_port"])
        self.assertEqual(len(c), 4)
        self.assertEqual(len(d), 2)

    def testPickle(self):
        self.assertRaises(TypeError, pickle.dumps,
                          Bag.integer())
        for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
            self.assertRaises(TypeError, pickle.dumps,
                              Bag.integer(), i)


class TestSilkFile(unittest.TestCase):

    def setUp(self):
        warnings.simplefilter("ignore", RuntimeWarning)
        self.tmpdir = tempfile.mkdtemp()
        self.tmpfile = tempname(self.tmpdir)
        warnings.simplefilter("default", RuntimeWarning)
        self.baserec = RWRec(application = 1, bytes = 2, dip = "3.4.5.6",
                             dport = 7, duration = datetime.timedelta(8),
                             initial_tcpflags = TCPFlags(9), input = 10,
                             nhip = "11.12.13.14", output = 15, packets = 16,
                             protocol = 6, session_tcpflags = TCPFlags(18),
                             sip = "19.20.21.22", sport = 23,
                             stime = datetime.datetime.utcnow(),
                             tcpflags = TCPFlags(25))

    def rmfile(self):
        os.remove(self.tmpfile)

    def tearDown(self):
        try:
            self.rmfile()
        except:
            pass
        os.rmdir(self.tmpdir)

    def testSilkFileReadWriteDefault(self):
        recs = []
        for i in range(10):
            recs.append(RWRec(self.baserec, input=i))
        f = SilkFile(self.tmpfile, WRITE)
        for x in recs:
            f.write(x)
        f.close()
        nf = SilkFile(self.tmpfile, READ)
        nf = SilkFile(self.tmpfile, READ)
        nrecs = []
        for x in nf:
            nrecs.append(x)
        nf.close()
        self.assertEqual(recs, nrecs)
        nf = SilkFile(self.tmpfile, READ)
        nrecs = []
        x = nf.read()
        while x:
            nrecs.append(x)
            x = nf.read()
        nf.close()
        self.assertEqual(recs, nrecs)
        nf = SilkFile(self.tmpfile, READ)
        nrecs = list(nf)
        nf.close()
        self.assertEqual(recs, nrecs)
        self.rmfile()

    def testSilkFileWriteSkipDefault(self):
        num_recs = 10
        recs = []
        for i in range(num_recs):
            recs.append(RWRec(self.baserec, input=i))
        f = SilkFile(self.tmpfile, WRITE)
        for x in recs:
            f.write(x)
        f.close()
        # Read every third record
        nf = SilkFile(self.tmpfile, READ)
        remaining = num_recs
        nrecs = []
        x = nf.read()
        while x:
            nrecs.append(x)
            remaining = remaining - 1
            skipped = nf.skip(2)
            self.assertEqual(skipped, min(2, remaining))
            remaining = remaining - skipped
            x = nf.read()
        nf.close()
        self.assertEqual(len(nrecs), 4)
        srecs = []
        for i in range(0, num_recs, 3):
            srecs.append(recs[i])
        self.assertEqual(nrecs, srecs)
        # Skip exactly everything
        nf = SilkFile(self.tmpfile, READ)
        skipped = nf.skip(num_recs)
        self.assertEqual(skipped, num_recs)
        x = nf.read()
        self.assertEqual(x, None)
        skipped = nf.skip(num_recs)
        self.assertEqual(skipped, 0)
        nf.close()
        # Skip more than everything
        nf = SilkFile(self.tmpfile, READ)
        skipped = nf.skip(2 * num_recs)
        self.assertEqual(skipped, num_recs)
        x = nf.read()
        self.assertEqual(x, None)
        # Skip all but final
        nf = SilkFile(self.tmpfile, READ)
        nrecs = []
        skipped = nf.skip(num_recs - 1)
        self.assertEqual(skipped, num_recs - 1)
        x = nf.read()
        while x:
            nrecs.append(x)
            x = nf.read()
        nf.close()
        self.assertEqual(len(nrecs), 1)
        srecs = []
        for i in range(num_recs - 1, num_recs):
            srecs.append(recs[i])
        self.assertEqual(nrecs, srecs)
        self.rmfile()

    def testSilkFileReadWriteAnnotations(self):
        recs = []
        for i in range(10):
            recs.append(RWRec(self.baserec, input=i))
        f = SilkFile(self.tmpfile, WRITE,
                     notes=["Annot1", "Annot2"],
                     invocations=["Invoc1", "Invoc2"])
        for x in recs:
            f.write(x)
        f.close()
        nf = SilkFile(self.tmpfile, READ)
        self.assertEqual(nf.notes(), ["Annot1", "Annot2"])
        self.assertEqual(nf.invocations(), ["Invoc1", "Invoc2"])
        nrecs = list(nf)
        nf.close()
        self.assertEqual(recs, nrecs)
        self.rmfile()
        f = SilkFile(self.tmpfile, WRITE)
        for x in recs:
            f.write(x)
        f.close()
        nf = SilkFile(self.tmpfile, READ)
        self.assertEqual(nf.notes(), [])
        self.assertEqual(nf.invocations(), [])
        self.rmfile()
        self.assertRaises(TypeError, SilkFile, self.tmpfile, WRITE,
                          notes="Annot1")
        self.assertRaises(TypeError, SilkFile, self.tmpfile, WRITE,
                          notes="Invoc1")

    def testSilkFileReadWriteCompression(self):
        recs = []
        for i in range(10):
            recs.append(RWRec(self.baserec, input=i))
        f = SilkFile(self.tmpfile, WRITE, compression=DEFAULT)
        for x in recs:
            f.write(x)
        f.close()
        nf = SilkFile(self.tmpfile, READ)
        nrecs = list(nf)
        nf.close()
        self.assertEqual(recs, nrecs)
        self.rmfile()

        f = SilkFile(self.tmpfile, WRITE, compression=NO_COMPRESSION)
        for x in recs:
            f.write(x)
        f.close()
        nf = SilkFile(self.tmpfile, READ)
        nrecs = list(nf)
        nf.close()
        self.assertEqual(recs, nrecs)
        self.rmfile()

        try:
            f = SilkFile(self.tmpfile, WRITE, compression=ZLIB)
        except IOError:
            pass
        else:
            for x in recs:
                f.write(x)
            f.close()
            nf = SilkFile(self.tmpfile, READ)
            nrecs = list(nf)
            nf.close()
            self.assertEqual(recs, nrecs)
            self.rmfile()

        try:
            f = SilkFile(self.tmpfile, WRITE, compression=LZO1X)
        except IOError:
            pass
        else:
            for x in recs:
                f.write(x)
            f.close()
            nf = SilkFile(self.tmpfile, READ)
            nrecs = list(nf)
            nf.close()
            self.assertEqual(recs, nrecs)
            self.rmfile()

    def testPickle(self):
        recs = []
        for i in range(10):
            recs.append(RWRec(self.baserec, input=i))
        f = SilkFile(self.tmpfile, WRITE)
        for x in recs:
            f.write(x)
        f.close()
        nf = SilkFile(self.tmpfile, READ)
        self.assertRaises(TypeError, pickle.dumps,
                          nf)
        for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
            self.assertRaises(TypeError, pickle.dumps,
                              nf, i)
        self.rmfile()


class TestPrefixMapHelper(object):

    def __init__(self):
        testloc = "../../tests"
        testmaps = {"ipmap": "ip-map.pmap",
                    "ppmap": "proto-port-map.pmap",
                    "ipmapv6": "ip-map-v6.pmap"}
        v6maps = set(["ipmapv6"])
        self.testmaps = {}
        script = sys.argv[0]
        norm = os.path.abspath(script)
        loc = os.path.dirname(norm)
        for mapname in testmaps:
            fileloc = os.path.join(loc, testloc, testmaps[mapname])
            if not os.path.exists(fileloc):
                if ipv6_enabled() or mapname not in v6maps:
                    raise TestSetupException("Cannot find %s" % fileloc)
            else:
                self.testmaps[mapname] = fileloc

class TestPrefixMap(unittest.TestCase):

    def setUp(self):
        self.testmaps = TestPrefixMapHelper().testmaps

    def testPrefixMapLoad(self):
        ipmap = PrefixMap(self.testmaps["ipmap"])
        self.assertEqual(type(ipmap), AddressPrefixMap)
        ppmap = PrefixMap(self.testmaps["ppmap"])
        self.assertEqual(type(ppmap), ProtoPortPrefixMap)
        if ipv6_enabled():
            PrefixMap(self.testmaps["ipmapv6"])

    def testPrefixMapGetIPAddr(self):
        ipmap = PrefixMap(self.testmaps["ipmap"])
        self.assertEqual(ipmap[IPAddr("192.168.4.5")], "internal")
        self.assertEqual(ipmap[IPAddr("192.168.0.0")], "internal")
        self.assertEqual(ipmap[IPAddr("192.168.255.255")], "internal")
        self.assertEqual(ipmap[IPAddr("172.17.0.0")], "internal services")
        self.assertEqual(ipmap[IPAddr("172.31.0.0")], "internal services")
        self.assertEqual(ipmap[IPAddr("172.16.0.0")], "ntp")
        self.assertEqual(ipmap[IPAddr("172.24.0.0")], "dns")
        self.assertEqual(ipmap[IPAddr("172.30.0.0")], "dhcp")
        self.assertEqual(ipmap[IPAddr("0.0.0.0")], "external")
        self.assertEqual(ipmap[IPAddr("255.255.255.255")], "external")
        self.assertEqual(ipmap.get(IPAddr("192.168.4.5")), "internal")
        self.assertEqual(ipmap.get(IPAddr("192.168.0.0")), "internal")
        self.assertEqual(ipmap.get(IPAddr("192.168.255.255")), "internal")
        self.assertEqual(ipmap.get(IPAddr("172.17.0.0")), "internal services")
        self.assertEqual(ipmap.get(IPAddr("172.31.0.0")), "internal services")
        self.assertEqual(ipmap.get(IPAddr("172.16.0.0")), "ntp")
        self.assertEqual(ipmap.get(IPAddr("172.24.0.0")), "dns")
        self.assertEqual(ipmap.get(IPAddr("172.30.0.0")), "dhcp")
        self.assertEqual(ipmap.get(IPAddr("0.0.0.0")), "external")
        self.assertEqual(ipmap.get(IPAddr("255.255.255.255")), "external")
        self.assertRaises(TypeError, ipmap.__getitem__, "192.168.0.0")
        self.assertRaises(TypeError, ipmap.__getitem__, (1, 1))
        self.assertEqual(ipmap.get("192.168.0.0"), None)
        self.assertEqual(ipmap.get("192.168.0.0", "default"), "default")
        self.assertEqual(ipmap.get(IPAddr("0.0.0.0"), "default"), "external")
        if ipv6_enabled():
            self.assertEqual(ipmap[IPAddr("::")], "UNKNOWN")
            self.assertEqual(ipmap[IPAddr("::ffff:192.168.0.0")], "internal")
            self.assertEqual(ipmap[IPAddr("::ffff:0.0.0.0")], "external")
            ipmapv6 = PrefixMap(self.testmaps["ipmapv6"])
            self.assertEqual(ipmapv6[IPAddr("2001:db8:c0:a8::1")], "internal")
            self.assertEqual(ipmapv6[IPAddr("2001:db8:ac:11::1")],
                             "internal services")
            self.assertEqual(ipmapv6[IPAddr("2001:db8:ac:1f::1")],
                             "internal services")
            self.assertEqual(ipmapv6[IPAddr("2001:db8:ac:10::1")], "ntp")
            self.assertEqual(ipmapv6[IPAddr("2001:db8:ac:18::1")], "dns")
            self.assertEqual(ipmapv6[IPAddr("2001:db8:ac:1e::1")], "dhcp")
            self.assertRaises(TypeError, ipmapv6.__getitem__, "192.168.0.0")
            self.assertRaises(TypeError, ipmapv6.__getitem__, (1, 1))
            self.assertEqual(ipmapv6[IPAddr("0.0.0.0")], "external")
            self.assertEqual(ipmapv6[IPAddr("192.168.0.0")], "external")


    def testPrefixMapGetProtoPort(self):
        ppmap = PrefixMap(self.testmaps["ppmap"])
        self.assertEqual(ppmap[1, 0], "ICMP")
        self.assertEqual(ppmap[1, 0xffff], "ICMP")
        self.assertEqual(ppmap[17, 1], "UDP")
        self.assertEqual(ppmap[17, 0xffff], "UDP")
        self.assertEqual(ppmap[17, 53], "UDP/DNS")
        self.assertEqual(ppmap[17, 66], "UDP")
        self.assertEqual(ppmap[17, 67], "UDP/DHCP")
        self.assertEqual(ppmap[17, 68], "UDP/DHCP")
        self.assertEqual(ppmap[17, 69], "UDP")
        self.assertEqual(ppmap[17, 122], "UDP")
        self.assertEqual(ppmap[17, 123], "UDP/NTP")
        self.assertEqual(ppmap[17, 124], "UDP")
        self.assertEqual(ppmap[6, 0], "TCP")
        self.assertEqual(ppmap[6, 0xffff], "TCP")
        self.assertEqual(ppmap[6, 22], "TCP/SSH")
        self.assertEqual(ppmap[6, 24], "TCP")
        self.assertEqual(ppmap[6, 25], "TCP/SMTP")
        self.assertEqual(ppmap[6, 26], "TCP")
        self.assertEqual(ppmap[6, 80], "TCP/HTTP")
        self.assertEqual(ppmap[6, 443], "TCP/HTTPS")
        self.assertEqual(ppmap[6, 8080], "TCP/HTTP")
        self.assertEqual(ppmap[2, 80], "unknown")
        self.assertEqual(ppmap[5, 80], "unknown")
        self.assertEqual(ppmap[7, 80], "unknown")
        self.assertEqual(ppmap.get((1, 0)), "ICMP")
        self.assertEqual(ppmap.get((1, 0xffff)), "ICMP")
        self.assertEqual(ppmap.get((17, 1)), "UDP")
        self.assertEqual(ppmap.get((17, 0xffff)), "UDP")
        self.assertEqual(ppmap.get((17, 53)), "UDP/DNS")
        self.assertEqual(ppmap.get((17, 66)), "UDP")
        self.assertEqual(ppmap.get((17, 67)), "UDP/DHCP")
        self.assertEqual(ppmap.get((17, 68)), "UDP/DHCP")
        self.assertEqual(ppmap.get((17, 69)), "UDP")
        self.assertEqual(ppmap.get((17, 122)), "UDP")
        self.assertEqual(ppmap.get((17, 123)), "UDP/NTP")
        self.assertEqual(ppmap.get((17, 124)), "UDP")
        self.assertEqual(ppmap.get((6, 0)), "TCP")
        self.assertEqual(ppmap.get((6, 0xffff)), "TCP")
        self.assertEqual(ppmap.get((6, 22)), "TCP/SSH")
        self.assertEqual(ppmap.get((6, 24)), "TCP")
        self.assertEqual(ppmap.get((6, 25)), "TCP/SMTP")
        self.assertEqual(ppmap.get((6, 26)), "TCP")
        self.assertEqual(ppmap.get((6, 80)), "TCP/HTTP")
        self.assertEqual(ppmap.get((6, 443)), "TCP/HTTPS")
        self.assertEqual(ppmap.get((6, 8080)), "TCP/HTTP")
        self.assertEqual(ppmap.get((2, 80)), "unknown")
        self.assertEqual(ppmap.get((5, 80)), "unknown")
        self.assertEqual(ppmap.get((7, 80)), "unknown")
        self.assertRaises(TypeError, ppmap.__getitem__, 1)
        self.assertRaises(TypeError, ppmap.__getitem__, IPAddr("0.0.0.0"))
        self.assertEqual(ppmap.get(1), None)
        self.assertEqual(ppmap.get(IPAddr("0.0.0.0")), None)
        self.assertEqual(ppmap.get(IPAddr("0.0.0.0"), "default"), "default")
        self.assertEqual(ppmap.get((0, 0), "default"), "unknown")
        self.assertRaises(OverflowError, ppmap.__getitem__, (0x100, 1))
        self.assertRaises(ValueError, ppmap.__getitem__, (1, 0x10000))
        self.assertRaises(OverflowError, ppmap.__getitem__, (-1, 1))
        self.assertRaises(ValueError, ppmap.__getitem__, (1, -1))

    def testPrefixMapValues(self):
        ipmap = PrefixMap(self.testmaps["ipmap"])
        self.assertEqual(set(ipmap.values()),
                         set(["external", "internal", "internal services",
                              "ntp", "dns", "dhcp"]))
        ppmap = PrefixMap(self.testmaps["ppmap"])
        self.assertEqual(set(ppmap.values()),
                         set(["unknown", "ICMP", "UDP", "UDP/DNS",
                              "UDP/DHCP", "UDP/NTP", "TCP", "TCP/SSH",
                              "TCP/SMTP", "TCP/HTTP", "TCP/HTTPS",
                              "TCP/HTTP"]))

    def testPrefixMapIterranges(self):
        ipmap = PrefixMap(self.testmaps["ipmap"])
        self.assertEqual(
            list(ipmap.iterranges()),
            [(IPAddr('0.0.0.0'), IPAddr('172.15.255.255'), 'external'),
             (IPAddr('172.16.0.0'), IPAddr('172.16.255.255'), 'ntp'),
             (IPAddr('172.17.0.0'), IPAddr('172.23.255.255'),
              'internal services'),
             (IPAddr('172.24.0.0'), IPAddr('172.24.255.255'), 'dns'),
             (IPAddr('172.25.0.0'), IPAddr('172.29.255.255'),
              'internal services'),
             (IPAddr('172.30.0.0'), IPAddr('172.30.255.255'), 'dhcp'),
             (IPAddr('172.31.0.0'), IPAddr('172.31.255.255'),
              'internal services'),
             (IPAddr('172.32.0.0'), IPAddr('192.167.255.255'), 'external'),
             (IPAddr('192.168.0.0'), IPAddr('192.168.255.255'), 'internal'),
             (IPAddr('192.169.0.0'), IPAddr('255.255.255.255'), 'external')])
        ppmap = PrefixMap(self.testmaps["ppmap"])
        self.assertEqual(
            list(ppmap.iterranges()),
            [((0, 0), (0, 65535), 'unknown'),
             ((1, 0), (1, 65535), 'ICMP'),
             ((2, 0), (5, 65535), 'unknown'),
             ((6, 0), (6, 21), 'TCP'),
             ((6, 22), (6, 22), 'TCP/SSH'),
             ((6, 23), (6, 24), 'TCP'),
             ((6, 25), (6, 25), 'TCP/SMTP'),
             ((6, 26), (6, 79), 'TCP'),
             ((6, 80), (6, 80), 'TCP/HTTP'),
             ((6, 81), (6, 442), 'TCP'),
             ((6, 443), (6, 443), 'TCP/HTTPS'),
             ((6, 444), (6, 8079), 'TCP'),
             ((6, 8080), (6, 8080), 'TCP/HTTP'),
             ((6, 8081), (6, 65535), 'TCP'),
             ((7, 0), (16, 65535), 'unknown'),
             ((17, 0), (17, 52), 'UDP'),
             ((17, 53), (17, 53), 'UDP/DNS'),
             ((17, 54), (17, 66), 'UDP'),
             ((17, 67), (17, 68), 'UDP/DHCP'),
             ((17, 69), (17, 122), 'UDP'),
             ((17, 123), (17, 123), 'UDP/NTP'),
             ((17, 124), (17, 65535), 'UDP'),
             ((18, 0), (255, 65535), 'unknown')])
        if ipv6_enabled():
            ipmapv6 = PrefixMap(self.testmaps["ipmapv6"])
            self.assertEqual(
                list(ipmapv6.iterranges()),
                [(IPAddr('::'),
                  IPAddr('2001:db8:ac:f:ffff:ffff:ffff:ffff'),
                  'external'),
                 (IPAddr('2001:db8:ac:10::'),
                  IPAddr('2001:db8:ac:10:ffff:ffff:ffff:ffff'),
                  'ntp'),
                 (IPAddr('2001:db8:ac:11::'),
                  IPAddr('2001:db8:ac:17:ffff:ffff:ffff:ffff'),
                  'internal services'),
                 (IPAddr('2001:db8:ac:18::'),
                  IPAddr('2001:db8:ac:18:ffff:ffff:ffff:ffff'),
                  'dns'),
                 (IPAddr('2001:db8:ac:19::'),
                  IPAddr('2001:db8:ac:1d:ffff:ffff:ffff:ffff'),
                  'internal services'),
                 (IPAddr('2001:db8:ac:1e::'),
                  IPAddr('2001:db8:ac:1e:ffff:ffff:ffff:ffff'),
                  'dhcp'),
                 (IPAddr('2001:db8:ac:1f::'),
                  IPAddr('2001:db8:ac:1f:ffff:ffff:ffff:ffff'),
                  'internal services'),
                 (IPAddr('2001:db8:ac:20::'),
                  IPAddr('2001:db8:c0:a7:ffff:ffff:ffff:ffff'),
                  'external'),
                 (IPAddr('2001:db8:c0:a8::'),
                  IPAddr('2001:db8:c0:a8:ffff:ffff:ffff:ffff'),
                  'internal'),
                 (IPAddr('2001:db8:c0:a9::'),
                  IPAddr('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'),
                  'external')])

    def testPickle(self):
        ipmap = PrefixMap(self.testmaps["ipmap"])
        self.assertRaises(TypeError, pickle.dumps,
                          ipmap)
        for i in range(-1, 1+pickle.HIGHEST_PROTOCOL):
            self.assertRaises(TypeError, pickle.dumps,
                              ipmap, i)


def suite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestIPAddr))
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestIPWildcard))
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestTCPFlags))
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestRWRec))
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestIPSet))
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestBag))
    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestSilkFile))
    try:
        TestPrefixMapHelper()
        suite.addTest(unittest.TestLoader().
                      loadTestsFromTestCase(TestPrefixMap))
    except TestSetupException:
        sys.stderr.write("Cannot find test prefix maps.  "
                         "Skipping prefix map tests.\n")
    return suite

if __name__ == '__main__':
    result = unittest.TextTestRunner(verbosity=3).run(suite())
    if result.errors or result.failures:
        sys.exit(1)
    sys.exit(0)
