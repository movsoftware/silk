=pod

=head1 NAME

B<rwsort> - Sort SiLK Flow records on one or more fields

=head1 SYNOPSIS

  rwsort --fields=KEY [--presorted-input] [--reverse]
        [--temp-directory=DIR_PATH] [--sort-buffer-size=SIZE]
        [--note-add=TEXT] [--note-file-add=FILE]
        [--compression-method=COMP_METHOD] [--print-filenames]
        [--output-path=PATH] [--site-config-file=FILENAME]
        [--plugin=PLUGIN [--plugin=PLUGIN ...]]
        [--python-file=PATH [--python-file=PATH ...]]
        [--pmap-file=MAPNAME:PATH [--pmap-file=MAPNAME:PATH ...]]
        {[--input-pipe=PATH] | [--xargs]|[--xargs=FILE] | [FILES...]}

  rwsort [--pmap-file=MAPNAME:PATH [--pmap-file=MAPNAME:PATH ...]]
        [--plugin=PLUGIN ...] [--python-file=PATH ...] --help

  rwsort [--pmap-file=MAPNAME:PATH [--pmap-file=MAPNAME:PATH ...]]
        [--plugin=PLUGIN ...] [--python-file=PATH ...] --help-fields

  rwsort --version

=head1 DESCRIPTION

B<rwsort> reads SiLK Flow records, sorts the records by the field(s)
listed in the B<--fields> switch, and writes the records to the
B<--output-path> or to the standard output if it is not connected to a
terminal.  The output from B<rwsort> is binary SiLK Flow records; the
output must be passed into another tool for human-readable output.

Sorting records is an expensive operation, and it should only be used
when necessary.  The tools that bin flow records (B<rwcount(1)>,
B<rwuniq(1)>, B<rwstats(1)>, etc) do not require sorted data.

B<rwsort> reads SiLK Flow records from the files named on the command
line or from the standard input when no file names are specified and
neither B<--xargs> nor B<--input-pipe> is present.  To read the
standard input in addition to the named files, use C<-> or C<stdin> as
a file name.  If an input file name ends in C<.gz>, the file is
uncompressed as it is read.  When the B<--xargs> switch is provided,
B<rwsort> reads the names of the files to process from the named text
file or from the standard input if no file name argument is provided
to the switch.  The input to B<--xargs> must contain one file name per
line.  The B<--input-pipe> switch is deprecated and it is provided for
legacy reasons; its use is not required since B<rwsort> will
automatically read form the standard input.  The B<--input-pipe>
switch will be removed in the SiLK 4.0 release.

The amount of fast memory used by B<rwsort> will increase until it
reaches a maximum near 2GB.  (Use the B<--sort-buffer-size> switch to
change this upper limit on the buffer size.)  If more records are read
than will fit into memory, the in-core records are sorted and
temporarily stored on disk as described by the B<--temp-directory>
switch.  When all records have been read, the on-disk files are
merged and the sorted records written to the output.

By default, the temporary files are stored in the F</tmp> directory.
Because these temporary files will be large, it is strongly
recommended that F</tmp> I<not> be used as the temporary directory.
To modify the temporary directory used by B<rwsort>, provide the
B<--temp-directory> switch, set the SILK_TMPDIR environment variable,
or set the TMPDIR environment variable.

To merge previously sorted SiLK data files into a sorted stream, run
B<rwsort> with the B<--presorted-input> switch.  B<rwsort> will
merge-sort all the input files, reducing it's memory requirements
considerably.  It is the user's responsibility to ensure that all the
input files have been sorted with the same B<--fields> value (and
B<--reverse> if applicable).  B<rwsort> may still require use of a
temporary directory while merging the files (for example, if B<rwsort>
does not have enough available file handles to open all the input
files at once).

=head1 OPTIONS

Option names may be abbreviated if the abbreviation is unique or is an
exact match for an option.  A parameter to an option may be specified
as B<--arg>=I<param> or B<--arg> I<param>, though the first form is
required for options that take optional parameters.

The B<--fields> switch is required.  B<rwsort> will fail when it is
not provided.

=over 4

=item B<--fields>=I<KEY>

I<KEY> contains the list of flow attributes (a.k.a. fields or columns)
that make up the key by which flows are sorted.  The fields are in
listed in order from primary sort key, secondary key, etc.  Each field
may be specified once only.  I<KEY> is a comma separated list of
field-names, field-integers, and ranges of field-integers; a range is
specified by separating the start and end of the range with a hyphen
(B<->).  Field-names are case insensitive.  Example:

 --fields=stime,10,1-5

There is no default value for the B<--fields> switch; the switch must
be specified.

The complete list of built-in fields that the SiLK tool suite supports
follows, though note that not all fields are present in all SiLK file
formats; when a field is not present, its value is 0.

=over 4

=item sIP,1

source IP address

=item dIP,2

destination IP address

=item sPort,3

source port for TCP and UDP, or equivalent

=item dPort,4

destination port for TCP and UDP, or equivalent.  See note at C<iType>.

=item protocol,5

IP protocol

=item packets,pkts,6

packet count

=item bytes,7

byte count

=item flags,8

bit-wise OR of TCP flags over all packets

=item sTime,9,sTime+msec,22

starting time of flow (milliseconds resolution)

=item duration,10,dur+msec,24

duration of flow (milliseconds resolution)

=item eTime,11,eTime+msec,23

end time of flow (milliseconds resolution)

=item sensor,12

name or ID of sensor where flow was collected

=item class,20,type,21

integer value of the class/type pair assigned to the flow by
B<rwflowpack(8)>

=item iType

the ICMP type value for ICMP or ICMPv6 flows and zero for non-ICMP
flows.  Internally, SiLK stores the ICMP type and code in the C<dPort>
field, so there is no need have both C<dPort> and C<iType> or C<iCode>
in the sort key.  This field was introduced in SiLK 3.8.1.

=item iCode

the ICMP code value for ICMP or ICMPv6 flows and zero for non-ICMP
flows.  See note at C<iType>.

=item icmpTypeCode,25

equivalent to C<iType>,C<iCode>.  This field may not be mixed with
C<iType> or C<iCode>, and this field is deprecated as of SiLK 3.8.1.
Prior to SiLK 3.8.1, specifying the C<icmpTypeCode> field was
equivalent to specifying the C<dPort> field.

=back

Many SiLK file formats do not store the following fields and their
values will always be 0; they are listed here for completeness:

=over 4

=item in,13

router SNMP input interface or vlanId if packing tools were
configured to capture it (see B<sensor.conf(5)>)

=item out,14

router SNMP output interface or postVlanId

=item nhIP,15

router next hop IP

=back

SiLK can store flows generated by enhanced collection software that
provides more information than NetFlow v5.  These flows may support
some or all of these additional fields; for flows without this
additional information, the field's value is always 0.

=over 4

=item initialFlags,26

TCP flags on first packet in the flow

=item sessionFlags,27

bit-wise OR of TCP flags over all packets except the first in the flow

=item attributes,28

flow attributes set by the flow generator:

=over 4

=item C<S>

all the packets in this flow record are exactly the same size

=item C<F>

flow generator saw additional packets in this flow following a packet
with a FIN flag (excluding ACK packets)

=item C<T>

flow generator prematurely created a record for a long-running
connection due to a timeout.  (When the flow generator B<yaf(1)> is
run with the B<--silk> switch, it will prematurely create a flow and
mark it with C<T> if the byte count of the flow cannot be stored in a
32-bit value.)

=item C<C>

flow generator created this flow as a continuation of long-running
connection, where the previous flow for this connection met a timeout
(or a byte threshold in the case of B<yaf>).

=back

Consider a long-running ssh session that exceeds the flow generator's
I<active> timeout.  (This is the active timeout since the flow
generator creates a flow for a connection that still has activity).
The flow generator will create multiple flow records for this ssh
session, each spanning some portion of the total session.  The first
flow record will be marked with a C<T> indicating that it hit the
timeout.  The second through next-to-last records will be marked with
C<TC> indicating that this flow both timed out and is a continuation
of a flow that timed out.  The final flow will be marked with a C<C>,
indicating that it was created as a continuation of an active flow.

=item application,29

guess as to the content of the flow.  Some software that generates flow
records from packet data, such as B<yaf>, will inspect the contents of
the packets that make up a flow and use traffic signatures to label
the content of the flow.  SiLK calls this label the I<application>;
B<yaf> refers to it as the I<appLabel>.  The application is the port
number that is traditionally used for that type of traffic (see the
F</etc/services> file on most UNIX systems).  For example, traffic
that the flow generator recognizes as FTP will have a value of 21,
even if that traffic is being routed through the standard HTTP/web
S<port (80)>.

=back

The following fields provide a way to label the IPs or ports on a
record.  These fields require external files to provide the mapping
from the IP or port to the label:

=over 4

=item sType,16

categorize the source IP address as C<non-routable>, C<internal>, or
C<external> and sort based on the category.  Uses the mapping file
specified by the SILK_ADDRESS_TYPES environment variable, or the
F<address_types.pmap> mapping file, as described in B<addrtype(3)>.

=item dType,17

as B<sType> for the destination IP address

=item scc,18

the country code of the source IP address.  Uses the mapping file
specified by the SILK_COUNTRY_CODES environment variable, or the
F<country_codes.pmap> mapping file, as described in B<ccfilter(3)>.

=item dcc,19

as B<scc> for the destination IP

=item src-I<map-name>

label contained in the prefix map file associated with I<map-name>.
If the prefix map is for IP addresses, the label is that associated
with the source IP address.  If the prefix map is for protocol/port
pairs, the label is that associated with the protocol and source port.
See also the description of the B<--pmap-file> switch below and the
B<pmapfilter(3)> manual page.

=item dst-I<map-name>

as B<src-I<map-name>> for the destination IP address or the protocol
and destination port.

=item sval

as B<src-I<map-name>> when no map-name is associated with the prefix
map file

=item dval

as B<dst-I<map-name>> when no map-name is associated with the prefix
map file

=back

Finally, the list of built-in fields may be augmented by the run-time
loading of PySiLK code or plug-ins written in C (also called shared
object files or dynamic libraries), as described by the
B<--python-file> and B<--plugin> switches.

=for comment
##########################################################################
# Whew!  We've finally reached the end of the --fields help

=item B<--presorted-input>

Instruct B<rwsort> to merge-sort the input files; that is, B<rwsort>
assumes the input files have been previously sorted using the same
values for the B<--fields> and B<--reverse> switches as was given for
this invocation.  This switch can greatly reduce B<rwsort>'s memory
requirements as a large buffer is not required for sorting the
records.  If the input files were created with B<rwsort>, you can run
B<rwfileinfo(1)> on the files to see the B<rwsort> invocation that
created them.

=item B<--reverse>

Cause B<rwsort> to reverse the sort order, causing larger values to
occur in the output before smaller values.  Normally smaller values
appear before larger values.

=item B<--plugin>=I<PLUGIN>

Augment the list of fields by using run-time loading of the plug-in
(shared object) whose path is I<PLUGIN>.  The switch may be repeated
to load multiple plug-ins.  The creation of plug-ins is described in
the B<silk-plugin(3)> manual page.  When I<PLUGIN> does not contain a
slash (C</>), B<rwsort> will attempt to find a file named I<PLUGIN> in
the directories listed in the L</FILES> section.  If B<rwsort> finds
the file, it uses that path.  If I<PLUGIN> contains a slash or if
B<rwsort> does not find the file, B<rwsort> relies on your operating
system's B<dlopen(3)> call to find the file.  When the
SILK_PLUGIN_DEBUG environment variable is non-empty, B<rwsort> prints
status messages to the standard error as it attempts to find and open
each of its plug-ins.

=item B<--temp-directory>=I<DIR_PATH>

Specify the name of the directory in which to store data files
temporarily when more records have been read that will fit into RAM.
This switch overrides the directory specified in the SILK_TMPDIR
environment variable, which overrides the directory specified in the
TMPDIR variable, which overrides the default, F</tmp>.

=item B<--sort-buffer-size>=I<SIZE>

Set the maximum size of the buffer used for sorting the records, in
bytes.  A larger buffer means fewer temporary files need to be
created, reducing the I/O wait times.  When this switch is not
specified, the default maximum for this buffer is near 2GB.  The
I<SIZE> may be given as an ordinary integer, or as a real number
followed by a suffix C<K>, C<M> or C<G>, which represents the
numerical value multiplied by 1,024 (kilo), 1,048,576 (mega), and
1,073,741,824 (giga), respectively.  For example, 1.5K represents
1,536 bytes, or one and one-half kilobytes.  (This value does B<not>
represent the absolute maximum amount of RAM that B<rwsort> will
allocate, since additional buffers will be allocated for reading the
input and writing the output.)  The sort buffer is not used when the
B<--presorted-input> switch is specified.

=item B<--note-add>=I<TEXT>

Add the specified I<TEXT> to the header of the output file as an
annotation.  This switch may be repeated to add multiple annotations
to a file.  To view the annotations, use the B<rwfileinfo(1)> tool.

=item B<--note-file-add>=I<FILENAME>

Open I<FILENAME> and add the contents of that file to the header of
the output file as an annotation.    This switch may be repeated to
add multiple annotations.  Currently the application makes no effort
to ensure that I<FILENAME> contains text; be careful that you do not
attempt to add a SiLK data file as an annotation.

=item B<--compression-method>=I<COMP_METHOD>

Specify the compression library to use when writing output files.  If
this switch is not given, the value in the SILK_COMPRESSION_METHOD
environment variable is used if the value names an available
compression method.  When no compression method is specified,
output to the standard output or to named pipes is not compressed, and
output to files is compressed using the default chosen when SiLK was
compiled.  The valid values for I<COMP_METHOD> are determined by which
external libraries were found when SiLK was compiled.  To see the
available compression methods and the default method, use the
B<--help> or B<--version> switch.  SiLK can support the following
I<COMP_METHOD> values when the required libraries are available.

=over 4

=item none

Do not compress the output using an external library.

=item zlib

Use the B<zlib(3)> library for compressing the output, and always
compress the output regardless of the destination.  Using zlib
produces the smallest output files at the cost of speed.

=item lzo1x

Use the I<lzo1x> algorithm from the LZO real time compression library
for compression, and always compress the output regardless of the
destination.  This compression provides good compression with less
memory and CPU overhead.

=item snappy

Use the I<snappy> library for compression, and always compress the
output regardless of the destination.  This compression provides good
compression with less memory and CPU overhead.  I<Since SiLK 3.13.0.>

=item best

Use lzo1x if available, otherwise use snappy if available, otherwise
use zlib if available.  Only compress the output when writing to a
file.

=back

=item B<--print-filenames>

Print to the standard error the names of input files as they are
opened.

=item B<--output-path>=I<PATH>

Write the binary SiLK Flow records to I<PATH>, where I<PATH> is a
filename, a named pipe, the keyword C<stderr> to write the output to
the standard error, or the keyword C<stdout> or C<-> to write the
output to the standard output.  If I<PATH> names an existing file,
B<rwsort> exits with an error unless the SILK_CLOBBER environment
variable is set, in which case I<PATH> is overwritten.  If this switch
is not given, the output is written to the standard output.
Attempting to write the binary output to a terminal causes B<rwsort>
to exit with an error.

=item B<--site-config-file>=I<FILENAME>

Read the SiLK site configuration from the named file I<FILENAME>.
When this switch is not provided, B<rwsort> searches for the site
configuration file in the locations specified in the L</FILES>
section.

=item B<--input-pipe>=I<PATH>

Read the SiLK Flow records to be sorted from the named pipe at
I<PATH>.  If I<PATH> is C<stdin> or C<->, records are read from the
standard input.  Use of this switch is not required, since B<rwsort>
will automatically read data from the standard input when no file
names are specified on the command line.  This switch is deprecated
and will be removed in the SiLK 4.0 release.

=item B<--xargs>

=item B<--xargs>=I<FILENAME>

Read the names of the input files from I<FILENAME> or from the
standard input if I<FILENAME> is not provided.  The input is expected
to have one filename per line.  B<rwsort> opens each named file in
turn and reads records from it as if the filenames had been listed on
the command line.

=item B<--help>

Print the available options and exit.  Specifying switches that add
new fields or additional switches before B<--help> will allow the
output to include descriptions of those fields or switches.

=item B<--help-fields>

Print the description and alias(es) of each field and exit.
Specifying switches that add new fields before B<--help-fields> will
allow the output to include descriptions of those fields.

=item B<--version>

Print the version number and information about how SiLK was
configured, then exit the application.

=item B<--pmap-file>=I<PATH>

=item B<--pmap-file>=I<MAPNAME>:I<PATH>

Load the prefix map file located at I<PATH> and create fields named
src-I<map-name> and dst-I<map-name> where I<map-name> is either the
I<MAPNAME> part of the argument or the map-name specified when the
file was created (see B<rwpmapbuild(1)>).  If no map-name is
available, B<rwsort> names the fields C<sval> and C<dval>.  Specify
I<PATH> as C<-> or C<stdin> to read from the standard input.  The
switch may be repeated to load multiple prefix map files, but each
prefix map must use a unique map-name.  The B<--pmap-file> switch(es)
must precede the B<--fields> switch.  See also B<pmapfilter(3)>.

=item B<--python-file>=I<PATH>

When the SiLK Python plug-in is used, B<rwsort> reads the Python code
from the file I<PATH> to define additional fields that can be used as
part of the sort key.  This file should call B<register_field()> for
each field it wishes to define.  For details and examples, see the
B<silkpython(3)> and B<pysilk(3)> manual pages.

=back

=head1 LIMITATIONS

When the temporary files and the final output are stored on the
same file volume, B<rwsort> will require approximately twice as
much free disk space as the size of data to be sorted.

When the temporary files and the final output are on different
volumes, B<rwsort> will require between 1 and 1.5 times as much free
space on the temporary volume as the size of the data to be sorted.

=head1 EXAMPLES

In the following examples, the dollar sign (C<$>) represents the shell
prompt.  The text after the dollar sign represents the command line.

=for comment
Lines have been wrapped for improved readability, and the back slash
(C<\>) is used to indicate a wrapped line.

To sort the records in F<infile.rw> based primarily on destination
port and secondarily on source IP and write the binary output to
F<outfile.rw>, run:

 $ rwsort --fields=dport,sip --output-path=outfile.rw infile.rw

The B<silkpython(3)> manual page provides examples that use PySiLK to
create arbitrary fields to use as part of the key for B<rwsort>.

=head1 ENVIRONMENT

=over 4

=item SILK_TMPDIR

When set and B<--temp-directory> is not specified, B<rwsort> writes
the temporary files it creates to this directory.  SILK_TMPDIR
overrides the value of TMPDIR.

=item TMPDIR

When set and SILK_TMPDIR is not set, B<rwsort> writes the temporary
files it creates to this directory.

=item PYTHONPATH

This environment variable is used by Python to locate modules.  When
B<--python-file> is specified, B<rwsort> must load the Python files
that comprise the PySiLK package, such as F<silk/__init__.py>.  If
this F<silk/> directory is located outside Python's normal search path
(for example, in the SiLK installation tree), it may be necessary to
set or modify the PYTHONPATH environment variable to include the
parent directory of F<silk/> so that Python can find the PySiLK
module.

=item SILK_PYTHON_TRACEBACK

When set, Python plug-ins will output traceback information on Python
errors to the standard error.

=item SILK_COUNTRY_CODES

This environment variable allows the user to specify the country code
mapping file that B<rwsort> uses when computing the scc and dcc
fields.  The value may be a complete path or a file relative to the
SILK_PATH.  See the L</FILES> section for standard locations of this
file.

=item SILK_ADDRESS_TYPES

This environment variable allows the user to specify the address type
mapping file that B<rwsort> uses when computing the sType and dType
fields.  The value may be a complete path or a file relative to the
SILK_PATH.  See the L</FILES> section for standard locations of this
file.

=item SILK_CLOBBER

The SiLK tools normally refuse to overwrite existing files.  Setting
SILK_CLOBBER to a non-empty value removes this restriction.

=item SILK_COMPRESSION_METHOD

This environment variable is used as the value for
B<--compression-method> when that switch is not provided.  I<Since
SiLK 3.13.0.>

=item SILK_CONFIG_FILE

This environment variable is used as the value for the
B<--site-config-file> when that switch is not provided.

=item SILK_DATA_ROOTDIR

This environment variable specifies the root directory of data
repository.  As described in the L</FILES> section, B<rwsort> may
use this environment variable when searching for the SiLK site
configuration file.

=item SILK_PATH

This environment variable gives the root of the install tree.  When
searching for configuration files and plug-ins, B<rwsort> may use this
environment variable.  See the L</FILES> section for details.

=item SILK_PLUGIN_DEBUG

When set to 1, B<rwsort> prints status messages to the standard error
as it attempts to find and open each of its plug-ins.  In addition,
when an attempt to register a field fails, the application prints a
message specifying the additional function(s) that must be defined to
register the field in the application.  Be aware that the output can
be rather verbose.

=item SILK_TEMPFILE_DEBUG

When set to 1, B<rwsort> prints debugging messages to the standard
error as it creates, re-opens, and removes temporary files.

=back

=head1 FILES

=over 4

=item F<${SILK_ADDRESS_TYPES}>

=item F<${SILK_PATH}/share/silk/address_types.pmap>

=item F<${SILK_PATH}/share/address_types.pmap>

=item F<@prefix@/share/silk/address_types.pmap>

=item F<@prefix@/share/address_types.pmap>

Possible locations for the address types mapping file required by the
sType and dType fields.

=item F<${SILK_CONFIG_FILE}>

=item F<${SILK_DATA_ROOTDIR}/silk.conf>

=item F<@SILK_DATA_ROOTDIR@/silk.conf>

=item F<${SILK_PATH}/share/silk/silk.conf>

=item F<${SILK_PATH}/share/silk.conf>

=item F<@prefix@/share/silk/silk.conf>

=item F<@prefix@/share/silk.conf>

Possible locations for the SiLK site configuration file which are
checked when the B<--site-config-file> switch is not provided.

=item F<${SILK_COUNTRY_CODES}>

=item F<${SILK_PATH}/share/silk/country_codes.pmap>

=item F<${SILK_PATH}/share/country_codes.pmap>

=item F<@prefix@/share/silk/country_codes.pmap>

=item F<@prefix@/share/country_codes.pmap>

Possible locations for the country code mapping file required by the
scc and dcc fields.

=item F<${SILK_PATH}/lib64/silk/>

=item F<${SILK_PATH}/lib64/>

=item F<${SILK_PATH}/lib/silk/>

=item F<${SILK_PATH}/lib/>

=item F<@prefix@/lib64/silk/>

=item F<@prefix@/lib64/>

=item F<@prefix@/lib/silk/>

=item F<@prefix@/lib/>

Directories that B<rwsort> checks when attempting to load a plug-in.

=item F<${SILK_TMPDIR}/>

=item F<${TMPDIR}/>

=item F</tmp/>

Directory in which to create temporary files.

=back

=head1 SEE ALSO

B<rwcount(1)>, B<rwcut(1)>, B<rwfileinfo(1)>, B<rwstats(1)>,
B<rwuniq(1)>, B<rwpmapbuild(1)>, B<addrtype(3)>, B<ccfilter(3)>,
B<pmapfilter(3)>, B<pysilk(3)>, B<silkpython(3)>, B<silk-plugin(3)>,
B<sensor.conf(5)>, B<rwflowpack(8)>, B<silk(7)>, B<yaf(1)>,
B<dlopen(3)>, B<zlib(3)>

=head1 NOTES

If an output path is not specified, B<rwsort> will write to the
standard output unless it is connected to a terminal, in which case an
error is printed and B<rwsort> exits.

If an input pipe or a set of input files are not specified, B<rwsort>
will read records from the standard input unless it is connected to a
terminal, in which case an error is printed and B<rwsort> exits.

Note that B<rwsort> produces binary output.  Use B<rwcut(1)> to view
the records.

Do not spend the resources to sort the data if you are going to be
passing it to an aggregation tool like B<rwtotal> or B<rwaddrcount>,
which have their own internal data structures that will ignore the
sorted data.

Both B<rwuniq(1)> and B<rwstats(1)> can take advantage of previously
sorted data, but you must explicitly inform them that the input is
sorted by providing the B<--presorted-input> switch.

=cut

$SiLK: rwsort.pod 118af073bc56 2017-06-05 18:13:10Z mthomas $

Local Variables:
mode:text
indent-tabs-mode:nil
End:
