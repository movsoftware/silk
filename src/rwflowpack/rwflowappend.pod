=pod

=head1 NAME

B<rwflowappend> - Append incremental SiLK Flow files to hourly files

=head1 SYNOPSIS

  rwflowappend --incoming-directory=DIR_PATH --root-directory=DIR_PATH
        --error-directory=DIR_PATH [--archive-directory=DIR_PATH]
        [--flat-archive] [--post-command=COMMAND]
        [--hour-file-command=COMMAND] [--threads=N]
        [--reject-hours-past=NUM] [--reject-hours-future=NUM]
        [--no-file-locking] [--polling-interval=NUM]
        [--byte-order=ENDIAN] [--pad-header]
        [--compression-method=COMP_METHOD]
        [--site-config-file=FILENAME]
        { --log-destination=DESTINATION
          | --log-pathname=FILE_PATH
          | --log-directory=DIR_PATH [--log-basename=LOG_BASENAME]
            [--log-post-rotate=COMMAND] }
        [--log-level=LEVEL] [--log-sysfacility=NUMBER]
        [--pidfile=FILE_PATH] [--no-chdir] [--no-daemon]

  rwflowappend --help

  rwflowappend --version

=head1 DESCRIPTION

B<rwflowappend> is a daemon that watches a directory for files that
contain small numbers of SiLK Flow records---these files are called
I<incremental files>---as generated by B<rwflowpack(8)> when it is run
with B<--output-mode=incremental-files> or B<--output-mode=sending>.
B<rwflowappend> appends these SiLK Flow records to the hourly files
stored in the SiLK data repository whose directory tree root is
specified by the B<--root-directory> switch.

The directory that B<rwflowappend> watches for incremental files is
specified by B<--incoming-directory>.  As B<rwflowappend> scans this
directory, it ignores a file if its size is 0 bytes or if its name
begins with a dot (C<.>).  On each scan, if B<rwflowappend> detects a
file name that was not present in the previous scan, it records the
name and size of the file.  If the file has a different size on the
next scan, the new size is recorded.  Once the file has the same size
on two consecutive scans, B<rwflowappend> appends the file to the
appropriate hourly file.

After B<rwflowappend> processes an incremental file, the file is
deleted unless the B<--archive-directory> switch is specified, in
which case the incremental file is moved to that directory or to a
subdirectory of that directory depending on whether B<--flat-archive>
was specified.  The B<--post-command> switch allows a command to be
executed on the incremental file after it has been moved to the
archive directory.

If a fatal write error occurs (for example, the disk containing the
data repository becomes full), B<rwflowappend> exits.  Before exiting,
B<rwflowappend> attempts to truncate the hourly file to the size it
had when it was opened, and B<rwflowappend> moves the incremental file
it was reading to the directory specified by B<--error-directory>.

Running B<rwflowappend> separately from B<rwflowpack> is used when
you wish to copy the packed SiLK Flow records from the machine doing
the packing to multiple machines for use by analysts.  Almost any
network file transport protocol may be used to move the files from the
packing machine to the destination machine where B<rwflowappend> is
running, though we have written the B<rwsender(8)> and
B<rwreceiver(8)> to perform this task.

Separate B<rwflowpack> and B<rwflowappend> processes are also
recommended if you want another process (such as the Analysis Pipeline
L<http://tools.netsa.cert.org/analysis-pipeline/>) to process the SiLK
Flow records as they are generated.

=head1 OPTIONS

Option names may be abbreviated if the abbreviation is unique or is an
exact match for an option.  A parameter to an option may be specified
as B<--arg>=I<param> or B<--arg> I<param>, though the first form is
required for options that take optional parameters.

=head2 General Configuration

The following switches are required:

=over 4

=item B<--incoming-directory>=I<DIR_PATH>

Periodically scan the directory I<DIR_PATH> for incremental files to
append to the hourly files.  As B<rwflowappend> scans I<DIR_PATH>, it
ignores a file if its name begins with a dot (C<.>) or if its size is
0 bytes.  When a file is first detected, its size is recorded, and the
file must have the same size for two consecutive scans before
B<rwflowappend> will append it to the appropriate hourly file.  The
interval between scans is set by B<--polling-interval>.  I<DIR_PATH>
must be a complete directory path.

=item B<--root-directory>=I<DIR_PATH>

Append to existing hourly files and create new hourly files in the
directory tree rooted at this location.  The directory tree has the
same subdirectory structure as that created by B<rwflowpack>.
I<DIR_PATH> must be a complete directory path.

=item B<--error-directory>=I<DIR_PATH>

Store in this directory incremental files that were NOT successfully
appended to an hourly file.  I<DIR_PATH> must be a complete directory
path.

=back

The following switches are optional:

=over 4

=item B<--archive-directory>=I<DIR_PATH>

Move each incremental file to I<DIR_PATH> or a subdirectory of it
after B<rwflowappend> has successfully appended the incremental file
to an hourly file.  If this switch is not provided, the incremental
files are deleted once they are successfully appended to an hourly
file.  When the B<--flat-archive> switch is also provided, incremental
files are moved into the top of I<DIR_PATH>; when B<--flat-archive> is
not given, each incremental file is moved to a subdirectory of
I<DIR_PATH> that mirrors the path of the hourly file to which the
incremental file was appended.  Removing files from the
archive-directory is not the job of B<rwflowappend>; the system
administrator should implement a separate process to clean this
directory.  This switch is required when the B<--post-command> switch
is present.

=item B<--flat-archive>

When archiving incremental files via B<--archive-directory>, move the
files into the top of the archive-directory, not into subdirectories
of it.  This switch has no effect if B<--archive-directory> is not
also specified.  This switch may be used to allow another process to
watch for new files appearing in the archive-directory.

=item B<--post-command>=I<COMMAND>

Run I<COMMAND> on each incremental file after B<rwflowappend> has
successfully appended it to an hourly file and moved it into the
archive-directory.  Each occurrence of the string C<%s> in I<COMMAND>
is replaced with the full path to the incremental file in the
archive-directory, and each occurrence of C<%%> is replaced with C<%>.
If any other character follows C<%>, B<rwflowappend> exits with an
error.  When using this feature, the B<--archive-directory> must be
specified.  The exit status of I<COMMAND> is ignored.  See also the
B<rwpollexec(8)> daemon.

=item B<--hour-file-command>=I<COMMAND>

Run I<COMMAND> upon creation of a new hourly file.  The string C<%s>
in I<COMMAND> is replaced with the full path to the hourly file, and
the string C<%%> is replaced with C<%>.  If any other character
follows C<%>, B<rwflowappend> exits with an error.  The exit status of
I<COMMAND> is ignored.

=item B<--threads>=I<N>

Invoke B<rwflowappend> with I<N> threads reading the incremental files
and writing to the repository.  When this switch is not provided,
B<rwflowappend> runs with a single thread.  I<Since SiLK 3.8.2.>

=item B<--reject-hours-past>=I<NUM>

Reject incremental files containing records whose starting hour occurs
more than this number of hours in the past relative to the current
hour.  Incremental files that violate this value are moved into the
error directory.  Times are compared using the starting hour of the
flow record and the current hour.  For example, flow records that
start at 18:02:56 and 18:58:04 are considered 1 hour in the past
whether the current time is 19:01:47 or 19:59:33.  When performing
live data collection, it is not uncommon to get flows one to two hours
in the past due to the flow generator's active timeout (often 30
minutes) and the time to transfer the flow records through the
collection system.  The default is to accept all incremental files.

=item B<--reject-hours-future>=I<NUM>

Similar to B<--reject-hours-past>, but reject incremental files
containing records whose starting hour occurs more than this number of
hours in the future relative to the current hour.  Future dated flow
records are rare, but can occur due to time drift at the sensor.  The
default is to accept all incremental files.

=item B<--no-file-locking>

Do not use advisory write locks.  Normally, B<rwflowappend> obtains a
write lock on an hourly file prior to writing records to it.  The
write lock prevents two instances of B<rwflowappend> from writing to
the same hourly file simultaneously.  However, attempting to use a
write lock on some file systems causes B<rwflowappend> to exit with an
error, and this switch can be use when writing data to these file
systems.

=item B<--polling-interval>=I<NUM>

Check the incoming directory for new incremental files every I<NUM>
seconds.  The default polling interval is 15 seconds.

=item B<--byte-order>=I<ENDIAN>

Set the byte order for newly created SiLK Flow files.  When appending
records to an existing file, the byte order of the file is maintained.
The argument is one of the following:

=over 4

=item C<as-is>

Maintain the byte order of the incremental files (i.e., the byte order
specified to B<rwflowpack>).  This is the default.

=item C<native>

Use the byte order of the machine where B<rwflowappend> is running.

=item C<big>

Use network byte order (big endian) for the flow files.

=item C<little>

Write the flow files in little endian format.

=back

=item B<--compression-method>=I<COMP_METHOD>

Specify the compression library to use when creating new hourly files.
When this switch
is not given, newly created hourly files maintain the compression
method used by the incremental file (i.e., the compression method
specified to B<rwflowpack>).  When appending to an existing hourly
file, the compression method of the file is maintained.  The valid
values for I<COMP_METHOD> are determined by which external libraries
were found when SiLK was compiled.  To see the available compression
methods and the default method. use the B<--help> or B<--version>
switch. SiLK can support the following I<COMP_METHOD> values when the
required libraries are available.

=over 4

=item none

Do not compress the output using an external library.

=item zlib

Use the B<zlib(3)> library for compressing the output.  Using zlib
produces the smallest output files at the cost of speed.

=item lzo1x

Use the I<lzo1x> algorithm from the LZO real time compression library
for compression.  This compression provides good compression with less
memory and CPU overhead.

=item snappy

Use the I<snappy> library for compression, and always compress the
output regardless of the destination.  This compression provides good
compression with less memory and CPU overhead.  I<Since SiLK 3.13.0.>

=item best

Use lzo1x if available, otherwise use snappy if available, otherwise
use zlib if available.

=back

=item B<--site-config-file>=I<FILENAME>

Read the SiLK site configuration from the named file I<FILENAME>.
When this switch is not provided, B<rwflowappend> searches for the
site configuration file in the locations specified in the L</FILES>
section.

=back

=head2 Logging and Daemon Configuration

One of the following mutually-exclusive switches is required:

=over 4

=item B<--log-destination>=I<DESTINATION>

Specify the destination where logging messages are written.  When
I<DESTINATION> begins with a slash C</>, it is treated as a file
system path and all log messages are written to that file; there is no
log rotation.  When I<DESTINATION> does not begin with C</>, it must
be one of the following strings:

=over 4

=item C<none>

Messages are not written anywhere.

=item C<stdout>

Messages are written to the standard output.

=item C<stderr>

Messages are written to the standard error.

=item C<syslog>

Messages are written using the B<syslog(3)> facility.

=item C<both>

Messages are written to the syslog facility and to the standard error
(this option is not available on all platforms).

=back

=item B<--log-directory>=I<DIR_PATH>

Use I<DIR_PATH> as the directory where the log files are written.
I<DIR_PATH> must be a complete directory path.  The log files have the
form

 DIR_PATH/LOG_BASENAME-YYYYMMDD.log

where I<YYYYMMDD> is the current date and I<LOG_BASENAME> is the
application name or the value passed to the B<--log-basename> switch
when provided.  The log files are rotated: At midnight local time, a
new log is opened, the previous file is closed, and the command
specified by B<--log-post-rotate> is invoked on the previous day's log
file.  (Old log files are not removed by B<rwflowappend>; the
administrator should use another tool to remove them.)  When this
switch is provided, a process-ID file (PID) is also written in this
directory unless the B<--pidfile> switch is provided.

=item B<--log-pathname>=I<FILE_PATH>

Use I<FILE_PATH> as the complete path to the log file.  The log file
is not rotated.

=back

The following set of switches is optional:

=over 4

=item B<--log-level>=I<LEVEL>

Set the severity of messages that are logged.  The levels from most
severe to least are: C<emerg>, C<alert>, C<crit>, C<err>, C<warning>,
C<notice>, C<info>, C<debug>.  The default is C<info>.

=item B<--log-sysfacility>=I<NUMBER>

Set the facility that B<syslog(3)> uses for logging messages.  This
switch takes a number as an argument.  The default is a value that
corresponds to C<LOG_USER> on the system where B<rwflowappend> is
running.  This switch produces an error unless
B<--log-destination>=syslog is specified.

=item B<--log-basename>=I<LOG_BASENAME>

Use I<LOG_BASENAME> in place of the application name in the name of
I<log> files in the log directory.  See the description of the
B<--log-directory> switch.  This switch does B<not> affect the name of
the process-ID file.

=item B<--log-post-rotate>=I<COMMAND>

Run I<COMMAND> on the previous day's log file after log rotation.
When this switch is not specified, the previous day's log file is
compressed with B<gzip(1)>.  When the switch is specified and
I<COMMAND> is the empty string, no action is taken on the log file.
Each occurrence of the string C<%s> in I<COMMAND> is replaced with the
full path to the log file, and each occurrence of C<%%> is replaced
with C<%>.  If any other character follows C<%>, B<rwflowappend> exits
with an error.  Specifying this switch without also using
B<--log-directory> is an error.

=item B<--pidfile>=I<FILE_PATH>

Set the complete path to the file in which B<rwflowappend> writes its
process ID (PID) when it is running as a daemon.  No PID file is
written when B<--no-daemon> is given.  When this switch is not
present, no PID file is written unless the B<--log-directory> switch
is specified, in which case the PID is written to
F<I<LOGPATH>/rwflowappend.pid>.

=item B<--no-chdir>

Do not change directory to the root directory.  When B<rwflowappend>
becomes a daemon process, it changes its current directory to the root
directory so as to avoid potentially running on a mounted file system.
Specifying B<--no-chdir> prevents this behavior, which may be useful
during debugging.  The application does not change its directory when
B<--no-daemon> is given.

=item B<--no-daemon>

Force B<rwflowappend> to run in the foreground---it does not become a
daemon process.  This may be useful during debugging.

=item B<--help>

Print the available options and exit.

=item B<--version>

Print the version number and information about how SiLK was
configured, then exit the application.

=back

=head1 ENVIRONMENT

=over 4

=item SILK_CONFIG_FILE

This environment variable is used as the value for the
B<--site-config-file> when that switch is not provided.

=item SILK_PATH

This environment variable gives the root of the install tree.  When
searching for configuration files, B<rwflowappend> may use this
environment variable.  See the L</FILES> section for details.

=back

=head1 FILES

=over 4

=item F<${SILK_CONFIG_FILE}>

=item F<ROOT_DIRECTORY/silk.conf>

=item F<${SILK_PATH}/share/silk/silk.conf>

=item F<${SILK_PATH}/share/silk.conf>

=item F<@prefix@/share/silk/silk.conf>

=item F<@prefix@/share/silk.conf>

Possible locations for the SiLK site configuration file which are
checked when the B<--site-config-file> switch is not provided, where
F<ROOT_DIRECTORY/> is the directory specified to the
B<--root-directory> switch.

=back

=head1 SEE ALSO

B<rwflowpack(8)>, B<rwreceiver(8)>, B<rwsender(8)>, B<rwpollexec(8)>,
B<rwfilter(1)>, B<silk(7)>, B<gzip(1)>, B<syslog(3)>, B<zlib(3)>,
I<The SiLK Installation Handbook>

=head1 NOTES

B<rwflowappend> does not check the integrity of an hourly file before
appending records to it.

Prior to SiLK 3.6.0 when a write error occurred, B<rwflowappend> could
leave a partially written record or compressed block in the hourly
file.  If a partially written compressed block remained and additional
compressed blocks were appended, these compressed blocks could not be
read by other SiLK tools.  If a partially written record remained and
additional records were appended, SiLK tools would read the unaligned
data as if it were aligned and produce garbage records.  Although
SiLK 3.6.0 works around the issue on write errors, similar issues can
occur if B<rwflowappend> is suddenly killed (e.g., by C<kill -9>).

When a write error occurs, B<rwflowappend> may leave a zero byte file
in the data repository.  Such files do affect the exit status of
B<rwfilter(1)>, though B<rwfilter> warns about being unable to read
the header from the file.

As of SiLK 3.1.0, B<rwflowappend> obtains an advisory write lock on
the hourly file it is writing, allowing multiple B<rwflowappend>
processes to write to the same hourly file.  File locking may be
disabled by using the B<--no-file-locking> switch.  If this switch is
enabled, the administrator must ensure that multiple B<rwflowappend>
processes do not attempt to write to the same hourly file
simultaneously.

=cut

$SiLK: rwflowappend.pod 38c3071a03ba 2017-04-26 20:55:19Z mthomas $

Local Variables:
mode:text
indent-tabs-mode:nil
End:
