=pod

=head1 NAME

B<flowkey> - SiLK plug-in providing YAF flow key filter and field

=head1 SYNOPSIS

  rwfilter --plugin=flowkey.so [--flow-key=VALUE_LIST]

  rwcut --plugin=flowkey.so --fields=FIELDS ...

  rwgroup --plugin=flowkey.so --fields=FIELDS ...

  rwsort --plugin=flowkey.so --fields=FIELDS ...

  rwstats --plugin=flowkey.so --fields=FIELDS --values=FIELDS ...

  rwuniq --plugin=flowkey.so --fields=FIELDS --values=FIELDS ...

=head1 DESCRIPTION

The YAF I<flow key hash> is a numeric value that the B<yaf(1)> IPFIX
generator computes for every flow record.  The flow key hash is
computed from the IP protocol, the source and destination IP
addresses, the source and destination ports, and the vlan identifier.
The B<getFlowKeyHash(1)> tool in YAF distribution reads IPFIX data and
computes the flow key hash for each flow record.

The B<flowkey> plug-in uses the same formula as YAF to compute the
flow key hash for a record.  The flow key hash may be printed by
B<rwcut(1)>, may be used as part of the sorting key in B<rwsort(1)>,
may be used as a grouping key in B<rwgroup(1)>, B<rwstats(1)>, and
B<rwuniq(1)>, and may be used as a partitioning criterion in
B<rwfilter(1)>.

Note that the flow key hash computed by this plug-in may be different
than the value computed by YAF:

=over 4

=item *

When SiLK processes a bi-directional IPFIX record (a I<bi-flow>), it
splits the record into two uni-directional records and reverses the
source and destination fields when it stores the reverse record.  The
flow key hash for this reverse record is different than that of the
forward record.  The B<getFlowKeyHash> tool has a B<--reverse> switch
to duplicate this behavior.

=item *

YAF computes the flow key hash using the vlan identifier, but SiLK
ignores the vlan ID unless it is explicitly instructed to use it.
When SiLK is told to the use the vlan ID, the vlan ID is stored in the
the B<in> field of the SiLK Flow record.  That field normally holds
the SNMP ingress value.

(Instructing SiLK to use the vlan ID depends on whether one is using
B<rwipfix2silk(1)>, B<rwflowpack(8)>, or B<flowcap(8)>.  For
B<rwipfix2silk>, run the tool with the B<--interface-values=vlan>
switch.  For B<rwflowpack> and B<flowcap>, edit the B<sensor.conf(5)>
file and specify C<interface-values vlan> in the probe block where the
flow is collected.)

=item *

Even when SiLK has been told to store the vlan identifier in the field
normally used for the ingress interface, B<rwflowpack> typically does
not store that field in the files it creates in the data repository.
When reading these files, the B<in> field is set to 0.  To tell
B<rwflowpack> to store the field, run it with the command line switch
B<--pack-interfaces>.  To tell B<getFlowKeyHash> to ignore the value,
specify the B<--snmp> switch.

=back

The B<flowkey> plug-in must be explicitly loaded into an application
via the B<--plugin> switch.

=head1 OPTIONS

The B<flowkey> plug-in provides the following options to the
indicated applications.

=head2 B<rwfilter> Switches

When the B<flowkey> plug-in has been loaded, the following switch is
added to B<rwfilter>.  To pass the filter, the record must pass the
test implied by the switch.

=over 4

=item B<--flowkey>=I<VALUE_LIST>

Check whether the flow key hash of the flow record matches one of the
values in I<VALUE_LIST>, where I<VALUE_LIST> is a comma-separated list
of values expressed as either decimal or hexadecimal numbers.
Hexadecimal numbers must be preceded by C<0x>.

=back

=head2 B<rwcut>, B<rwgroup>, B<rwsort>, B<rwstats>, and B<rwuniq> Switch

=over 4

=item B<--fields>=I<FIELDS>

I<FIELDS> refers to a list of fields to use for the operation.  The
B<flowkey> plug-in adds the following field for display, sorting,
and grouping using the B<rwcut(1)>, B<rwgroup(1)>, B<rwsort(1)>,
B<rwstats(1)>, and B<rwuniq(1)> tools:

=over 4

=item flowkey

Print, sort by, or group by the flow key hash.

=back

=back

=head1 EXAMPLES

In the following examples, the dollar sign (C<$>) represents the shell
prompt.  The text after the dollar sign represents the command line.
Lines have been wrapped for improved readability, and the back slash
(C<\>) is used to indicate a wrapped line.

The file B<vlan.pcap> is a packet capture file created by
B<tcpdump(1)>.  The packets in the file include vlan identifiers.

In the following command, B<yaf(1)> creates IPFIX flow records from
the PCAP file, B<rwipfix2silk(1)>) converts the IPFIX records to SiLK
Flow records, and B<rwcut(1)> prints the SiLK records as text.  Note
the use of the B<--interface-values=vlan> switch on B<rwipfix2silk>,
and see how the B<--plugin> switch is used on B<rwcut>.  The
C<flowkey> field contains the flow key hash.

 $ yaf < vlan.pcap                                              \
   | rwipfix2silk --interface-values=vlan                       \
   | rwcut --plugin=flowkey.so --fields=1-5,in,flowkey,stime    \
        --ipv6=ignore --timestamp=epoch --num-rec=9
           sIP|          dIP|sPort|dPort|pro|   in|   flowkey|         sTime|
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|2148415270|1252941224.465|
      10.0.0.4| 10.128.87.50|   80|32942|  6|    2|  15775704|1252941224.465|
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|2148415270|1252941224.505|
  10.128.34.93|     10.0.0.3|41443|46612|  6|    2|2705585162|1252941224.505|
      10.0.0.3| 10.128.34.93|46612|41443|  6|    2|3065308157|1252941224.505|
  10.128.34.93|     10.0.0.3|41442|   21|  6|    2|2705474059|1252941224.465|
      10.0.0.3| 10.128.34.93|   21|41442|  6|    2|  11920380|1252941224.465|
  10.128.44.78|     10.0.0.4|48081|   80|  6|    2|3144764506|1252941276.278|
      10.0.0.4| 10.128.44.78|   80|48081|  6|    2|  15792091|1252941276.279|

Here is the output from B<getFlowKeyHash(1)> when it is run with no
arguments.  The C<hash> column is the flow key hash and the C<ms>
column is the flow's time stamp.

 $ yaf < vlan.pcap              \
   | getFlowKeyHash             \
   | head -10
           sIP|          dIP|sPort|dPort|pro| vlan|      hash|            ms
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|2148415270| 1252941224465
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|2148415270| 1252941224505
  10.128.34.93|     10.0.0.3|41443|46612|  6|    2|2705585162| 1252941224505
  10.128.34.93|     10.0.0.3|41442|   21|  6|    2|2705474059| 1252941224465
  10.128.44.78|     10.0.0.4|48081|   80|  6|    2|3144764506| 1252941276278
  10.128.44.78|     10.0.0.4|48081|   80|  6|    2|3144764506| 1252941276279
  10.128.30.43|     10.0.0.4|20803|   80|  6|    2|1373863487| 1252941276278
  10.128.30.43|     10.0.0.4|20803|   80|  6|    2|1373863487| 1252941276280
  10.128.67.47|     10.0.0.4|10912|   80|  6|    2| 704652091| 1252941276278

The B<rwcut> output has two records for each bi-flow record in the
B<getFlowKeyHash> output.  The hash values match for every-other
record.

Adding the B<--reverse> switch to B<getFlowKeyHash> produces the
following:

 $ yaf < vlan.pcap              \
   | getFlowKeyHash --reverse   \
   | head -10
           sIP|          dIP|sPort|dPort|pro| vlan|      hash|            ms
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|  15775704| 1252941224465
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|  15775704| 1252941224505
  10.128.34.93|     10.0.0.3|41443|46612|  6|    2|3065308157| 1252941224505
  10.128.34.93|     10.0.0.3|41442|   21|  6|    2|  11920380| 1252941224465
  10.128.44.78|     10.0.0.4|48081|   80|  6|    2|  15792091| 1252941276278
  10.128.44.78|     10.0.0.4|48081|   80|  6|    2|  15792091| 1252941276279
  10.128.30.43|     10.0.0.4|20803|   80|  6|    2|  15740716| 1252941276278
  10.128.30.43|     10.0.0.4|20803|   80|  6|    2|  15740716| 1252941276280
  10.128.67.47|     10.0.0.4|10912|   80|  6|    2|  15731147| 1252941276278

The values for every-other flow record match nearly match, but things
appear to get out of sync.

A different approach is to run B<yaf> with the B<--uniflow> switch:

 $ yaf --uniflow < vlan.pcap    \
   | getFlowKeyHash             \
   | head -10
           sIP|          dIP|sPort|dPort|pro| vlan|      hash|            ms
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|2148415270| 1252941224465
      10.0.0.4| 10.128.87.50|   80|32942|  6|    2|  15775704| 1252941224465
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|2148415270| 1252941224505
  10.128.34.93|     10.0.0.3|41443|46612|  6|    2|2705585162| 1252941224505
      10.0.0.3| 10.128.34.93|46612|41443|  6|    2|3065308157| 1252941224505
  10.128.34.93|     10.0.0.3|41442|   21|  6|    2|2705474059| 1252941224465
      10.0.0.3| 10.128.34.93|   21|41442|  6|    2|  11920380| 1252941224465
  10.128.44.78|     10.0.0.4|48081|   80|  6|    2|3144764506| 1252941276278
      10.0.0.4| 10.128.44.78|   80|48081|  6|    2|  15792091| 1252941276279

This result exactly matches that from B<rwcut>.

When B<rwipfix2silk> does not include the B<--interface-values=vlan>
switch, the result is:

 $ yaf < vlan.pcap                                              \
   | rwipfix2silk                                               \
   | rwcut --plugin=flowkey.so --fields=1-5,in,flowkey,stime    \
        --ipv6=ignore --timestamp=epoch --num-rec=9
           sIP|          dIP|sPort|dPort|pro|   in|   flowkey|         sTime|
  10.128.87.50|     10.0.0.4|32942|   80|  6|    0|2150512422|1252941224.465|
      10.0.0.4| 10.128.87.50|   80|32942|  6|    0|  13678552|1252941224.465|
  10.128.87.50|     10.0.0.4|32942|   80|  6|    0|2150512422|1252941224.505|
  10.128.34.93|     10.0.0.3|41443|46612|  6|    0|2707682314|1252941224.505|
      10.0.0.3| 10.128.34.93|46612|41443|  6|    0|3063211005|1252941224.505|

To get the same result from B<getFlowKeyHash>, use the B<--snmp>
switch:

 $ yaf --uniflow < vlan.pcap    \
   | getFlowKeyHash --snmp      \
   | head -6
           sIP|          dIP|sPort|dPort|pro| vlan|      hash|            ms
  10.128.87.50|     10.0.0.4|32942|   80|  6|    0|2150512422| 1252941224465
      10.0.0.4| 10.128.87.50|   80|32942|  6|    0|  13678552| 1252941224465
  10.128.87.50|     10.0.0.4|32942|   80|  6|    0|2150512422| 1252941224505
  10.128.34.93|     10.0.0.3|41443|46612|  6|    0|2707682314| 1252941224505
      10.0.0.3| 10.128.34.93|46612|41443|  6|    0|3063211005| 1252941224505


To find SiLK flow records that have a particular flow key hash, use
B<rwfilter(1)>:

 $ yaf < vlan.pcap                                              \
   | rwipfix2silk --interface-values=vlan                       \
   | rwfilter --plugin=flowkey.so --flowkey=2148415270,15775704 \
        --pass=stdout -                                         \
   | rwcut --plugin=flowkey.so --fields=1-5,in,flowkey,stime    \
        --ipv6=ignore --timestamp=epoch --num-rec=9
           sIP|          dIP|sPort|dPort|pro|   in|   flowkey|         sTime|
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|2148415270|1252941224.465|
      10.0.0.4| 10.128.87.50|   80|32942|  6|    2|  15775704|1252941224.465|
  10.128.87.50|     10.0.0.4|32942|   80|  6|    2|2148415270|1252941224.505|

When using B<rwfilter>, it is best to specify the flow hash key for
both the forward and reverse records.

Use B<rwuniq(1)> to check if records with the same flow key hash
appear more than twice.

 $ yaf < vlan.pcap                                              \
   | rwipfix2silk --interface-values=vlan                       \
   | rwuniq --plugin=flowkey.so --fields=flowkey --flows=3-
    flowkey|   Records|

Since no flow records are printed, the maximum number of times a flow
key hash appears is 2.

=head1 ENVIRONMENT

=over 4

=item SILK_PATH

This environment variable gives the root of the install tree.  When
searching for plug-ins, a SiLK application may use this environment
variable.  See the L</FILES> section for details.

=item SILK_PLUGIN_DEBUG

When set to 1, the SiLK applications print status messages to the
standard error as they attempt to find and open the F<flowkey.so>
plug-in.  A typical invocation using this variable is:

 env SILK_PLUGIN_DEBUG=1 rwcut --plugin=flowkey.so --version

=back

=head1 FILES

=over 4

=item F<${SILK_PATH}/lib64/silk/flowkey.so>

=item F<${SILK_PATH}/lib64/flowkey.so>

=item F<${SILK_PATH}/lib/silk/flowkey.so>

=item F<${SILK_PATH}/lib/flowkey.so>

=item F<@prefix@/lib64/silk/flowkey.so>

=item F<@prefix@/lib64/flowkey.so>

=item F<@prefix@/lib/silk/flowkey.so>

=item F<@prefix@/lib/flowkey.so>

Possible locations for the plug-in.

=back

=head1 SEE ALSO

B<rwcut(1)>, B<rwfilter(1)>, B<rwgroup(1)>, B<rwsort(1)>,
B<rwstats(1)>, B<rwuniq(1)>, B<rwipfix2silk(1)>, B<rwflowpack(8)>,
B<flowcap(8)>, B<sensor.conf(5)>, B<silk(7)>, B<yaf(1)>,
B<getFlowKeyHash(1)>, B<tcpdump(1)>

=head1 NOTES

The B<flowkey> plug-in was added in SiLK 3.15.0.

=cut

$SiLK: flowkey.pod 051cadca977b 2019-04-16 18:12:18Z mthomas $

Local Variables:
mode:text
indent-tabs-mode:nil
End:
