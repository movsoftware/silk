dnl Copyright (C) 2003-2020 by Carnegie Mellon University.
dnl
dnl @OPENSOURCE_LICENSE_START@
dnl See license information in LICENSE.txt
dnl @OPENSOURCE_LICENSE_END@

dnl RCSIDENT("$SiLK: configure.ac 09f20fda742a 2020-04-16 20:58:11Z mthomas $")

AC_PREREQ(2.64)
AC_INIT([SiLK],[3.19.1],[netsa-help@cert.org],[silk],[http://tools.netsa.cert.org/silk/])
AC_CONFIG_SRCDIR([src/libsilk/silk.h])
AC_CONFIG_AUX_DIR([autoconf])
AC_CONFIG_MACRO_DIR([m4])
# Note: automake 1.11 works for building, but automake 1.12 is
# required for "make check" since we use the AM_TESTS_ENVIRONMENT
# feature.
AM_INIT_AUTOMAKE([1.12 foreign no-exeext no-installinfo std-options nostdinc parallel-tests subdir-objects])

# silk_config1.h.in is generated by autoheader.  the values in
# AH_TOP() and AH_BOTTOM() will be added to that header.  When the
# user runs ./configure, AX_PREFIX_CONFIG_H() will rewrite
# silk_config1.h to silk_config.h, prefixing the macros with "SK_".
# silk_config2.h is included by silk_config.h, silk_config2.h.in is
# created by hand.
AC_CONFIG_HEADER([src/include/silk/silk_config1.h:src/libsilk/silk_config1.h.in  src/include/silk/silk_config2.h:src/libsilk/silk_config2.h.in])
AH_TOP([/*
 *    The silk_config.h file is the first of two header files
 *    generated when you run configure.  The second is
 *    silk_config2.h, which this file #includes.
 *
 *    The template file silk_config1.h.in is created by autoheader.
 *    When you run configure, a silk_config1.h file is created, and
 *    then all values in that file are prefixed by "SK_" and the
 *    result is written to silk_config.h.  The silk_config1.h file is
 *    only used to create silk_config.h.
 *
 *    The template file silk_config2.h.in is maintained manually.
 *    silk_config2.h contains values that the system headers
 *    use/require, and as such they should NOT be prefixed with "SK_"
 *
 *    If you manually uncomment any of the "#undef" lines in this
 *    file, you must add an "SK_" prefix to the name of the macro.
 */
#include <silk/silk_config2.h>
])
AX_PREFIX_CONFIG_H([src/include/silk/silk_config.h], [SK], [src/include/silk/silk_config1.h])

AC_REVISION($SiLK: configure.ac 09f20fda742a 2020-04-16 20:58:11Z mthomas $)
AC_COPYRIGHT([Copyright (C) 2001-2020 by Carnegie Mellon University
GNU General Public License (GPL) Rights pursuant to Version 2, June 1991
Government Purpose License Rights (GPLR) pursuant to DFARS 252.227.7013])

# Disable the horribly annoying automatic rebuild of configure, Makefile.in, &c
AM_MAINTAINER_MODE

# Check for whitespace in absolute path (which causes libtool to fail)
# This is taken from a check that configure itself does on $srcdir;
# the double square brakets are because m4 will strip one set.
case `pwd` in
  *[[\\\"\#\$\&\'\`$am_lf\ \	]]*)
    AC_MSG_ERROR([unsafe absolute working directory name])
    ;;
esac


# Initialize our stuff
SILK_AC_INIT

# These required before libtool
AC_USE_SYSTEM_EXTENSIONS
AC_LANG(C)

dnl XXXX hack to kill off all the libtool tags ...
dnl it isn't like we are using C++ or Fortran.
dnl (copied from libglade/configure.in)
m4_define([_LT_AC_TAGCONFIG],[])
LT_PREREQ([2.2.6])
LT_INIT([disable-static])

#  Do not allow the LT_INIT pattern when the macro is not defined.
#  When the libtool m4 files are not known to aclocal and this line is
#  not present, automake complains that SiLK uses libtool but has not
#  called the LT_INIT() macro.
#
#  If you are here because "autoreconf" gave the following error
#
#      error: possibly undefined macro: LT_INIT
#
#  then "aclocal" did not find the "libtool.m4" file, which should be
#  in "/usr/share/aclocal/libtool.m4" or similar.  Re-run "autoreconf"
#  and include the switch "-I/usr/share/aclocal" or whatever the
#  correct path is on your system.
#
m4_ifdef([LT_INIT],[],[m4_pattern_forbid([LT_INIT])])


# Compiler
SILK_AC_COMPILER

# Check whether static applications were requested.  Need this before
# testing for the silk file.
SILK_AC_ARG_ENABLE_STATIC_APPLICATIONS

# Whether to compile in static packing logic for this installation
SILK_AC_ARG_ENABLE_PACKING_LOGIC

# Checks for programs.
AC_PROG_AWK
AC_PROG_EGREP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
dnl AC_CHECK_PROGS(AR,ar)
dnl AC_CHECK_PROGS(BZIP,bzip2)
dnl AC_CHECK_PROGS(CP,cp)
dnl AC_CHECK_PROGS(FIND,find)
dnl AC_CHECK_PROGS(LDCONFIG,ldconfig)
dnl AC_CHECK_PROGS(LN,ln)
dnl AC_CHECK_PROGS(LD,ld)
dnl AC_CHECK_PROGS(MAKEDEPEND,makedepend)
dnl AC_CHECK_PROGS(MD5,md5 md5sum)
dnl AC_CHECK_PROGS(MKDIR,mkdir)
dnl AC_CHECK_PROGS(MV,mv)

AC_ARG_VAR([GZIP],[The full path to the program to use to compress log files])
AC_PATH_PROG([GZIP], [gzip])
if test "X${GZIP}" != X
then
    AC_DEFINE_UNQUOTED([LOG_COMPRESSOR], ["${GZIP}"],
        [The full path to the program to use to compress log files])
fi

AC_ARG_VAR([PERL], [The full path to the Perl interpreter to use])
AC_PATH_PROGS([PERL], [perl perl5], [/usr/bin/perl])
AC_CHECK_PROGS([POD2HTML], [pod2html])
AC_CHECK_PROGS([POD2MAN], [pod2man])
AC_CHECK_PROGS([PODSELECT], [podselect])
# if pod2man is not found, do not build the man pages
AM_CONDITIONAL([HAVE_POD2MAN], [test -n "$POD2MAN"])
AM_CONDITIONAL([HAVE_PODSELECT], [test -n "$PODSELECT"])
# check for Perl's DBI module.  We do not install rwscanquery when
# DBI.pm is not available to avoid the creating a "perl(DBI)"
# dependency that prevents the RPM from being installed.
AC_MSG_CHECKING([for Perl DBI module])
sk_perl_dbi_cmd="${PERL-perl} -MDBI -e 1"
sk_perl_dbi_out="`${sk_perl_dbi_cmd} 2>&1`"
sk_perl_dbi_status=$?
if test "x${sk_perl_dbi_status}" = x0
then
    AC_MSG_RESULT([yes])
    sk_perl_dbi_result=1
else
    AC_MSG_RESULT([no])
    echo "$as_me:$LINENO: failed command was" >&AS_MESSAGE_LOG_FD
    echo "$as_me:$LINENO: $sk_perl_dbi_cmd" >&AS_MESSAGE_LOG_FD
    echo "$as_me:$LINENO: $sk_perl_dbi_out" >&AS_MESSAGE_LOG_FD
    sk_perl_dbi_result=
fi
AM_CONDITIONAL([HAVE_PERL_DBI], [test -n "$sk_perl_dbi_result"])

dnl AC_CHECK_PROGS(RATS,rats)
dnl AC_CHECK_PROGS(RM,rm)
dnl AC_CHECK_PROGS(SED,sed)
dnl AC_CHECK_PROGS(SPLINT,splint)
dnl AC_CHECK_PROGS(TAR,tar)
dnl AC_CHECK_PROGS(TEST,test)
dnl AC_CHECK_PROGS(TOUCH,touch)
dnl AC_CHECK_PROGS(TR,tr)
dnl AC_CHECK_PROGS(UNAME,uname)

# checks for lex and yacc
AM_PROG_LEX
AC_PROG_YACC

# add options to newer versions of flex to disable functions we don't
# use but which produce gcc warnings.
AC_SUBST([FLEX_NOFUNS])
if test "x$LEX" != "x:" && test "x$LEX" != "x${am_missing_run}flex"
then
    sk_maybe_flex_nofuns='noyyget_extra noyyset_extra noyyget_leng noyyget_text noyyget_lineno noyyset_lineno noyyget_in noyyset_in noyyget_out noyyset_out noyyget_lval noyyset_lval noyyget_lloc noyyset_lloc noyyget_debug noyyset_debug noyylex_destroy'

    echo '%%' > conftest.l
    for skarg in $sk_maybe_flex_nofuns
    do
        if $LEX --$skarg conftest.l >/dev/null 2>&1
        then
            FLEX_NOFUNS="$FLEX_NOFUNS --$skarg"
        fi
    done
    rm -f conftest.l $LEX_OUTPUT_ROOT.c
fi


# system type
AM_CONDITIONAL([HAVE_CYGWIN], [expr "$host" : '.*cygwin' >/dev/null 2>&1])


# HEADER CHECKS

# header existence
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
dnl AC_HEADER_STAT
dnl AC_HEADER_STDBOOL
AC_CHECK_HEADERS([arpa/inet.h assert.h ctype.h errno.h fcntl.h float.h glob.h inttypes.h limits.h locale.h malloc.h math.h memory.h netdb.h netinet/in.h netinet/tcp.h pthread.h regex.h signal.h stdarg.h stddef.h stdint.h stdio.h stdlib.h string.h strings.h sys/mman.h sys/msg.h sys/resource.h sys/select.h sys/socket.h sys/statvfs.h sys/time.h sys/types.h sys/uio.h sys/un.h sys/wait.h unistd.h])

# Handle the missing environ global on macOS
AC_CHECK_DECLS([environ], ,
    [AC_CHECK_DECLS([_NSGetEnviron], , , [#include <crt_externs.h>
    ])])


# LIBRARY CHECKS

# Standard libraries.
AC_SEARCH_LIBS([sqrt], [m])
AC_SEARCH_LIBS([dlopen], [dl])
AC_SEARCH_LIBS([nanosleep], [rt])
AC_SEARCH_LIBS([inet_ntoa], [nsl])
AC_SEARCH_LIBS([socket], [socket])

# Checks for library functions.
AC_CHECK_FUNCS([getaddrinfo getnameinfo imaxdiv inet_pton inet_ntop memccpy setenv setpriority socketpair statvfs strsep timegm])
AC_FUNC_FSEEKO

AC_CHECK_HEADER([getopt.h],[AC_CHECK_FUNCS([getopt_long_only])])
AM_CONDITIONAL([NEED_GETOPT_LONG_ONLY],
                [test "x${ac_cv_func_getopt_long_only}" != "xyes"])

# Large file support
AC_SYS_LARGEFILE

# External libraries/packages
AX_CHECK_PTHREAD
AX_CHECK_LIBZ
AX_CHECK_LIBLZO
AX_CHECK_LIBSNAPPY
AX_CHECK_LIBPCAP
AX_CHECK_LIBADNS
AX_CHECK_LIBCARES

# Checks for python
SILK_AC_ARG_WITH_PYTHON

#  Do not allow the PKG_CHECK_MODULES pattern when the macro is not
#  defined.  When that macro is not defined and this line is not
#  present, autoreconf successfully builds the configure script, but
#  users encounter a shell syntax error when the shell sees the
#  literal text "PKG_CHECK_MODULES".
#
#  If you are here because "autoreconf" gave the following error
#
#      error: possibly undefined macro: PKG_CHECK_MODULES
#
#  then "aclocal" did not find the "pkg.m4" file, which should be in
#  "/usr/share/aclocal/pkg.m4" or similar.  Re-run "autoreconf" and
#  include the switch "-I/usr/share/aclocal" or whatever the correct
#  path is on your system.
#
m4_ifdef([PKG_CHECK_MODULES],[],[m4_pattern_forbid([PKG_CHECK_MODULES])])

# pkg_config library checks
AX_PKG_CHECK_LIBMAXMINDDB([1.2.0])
AX_PKG_CHECK_GNUTLS([2.12.0])
AX_PKG_CHECK_LIBFIXBUF([1.7.0],[3.0.0])
AX_PKG_CHECK_LIBIPA([0.5.0])
#AX_ARG_WITH_PCRE


# Checks for typedefs and structures
AC_CHECK_TYPES([imaxdiv_t])
AC_TYPE_INT8_T
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_INTMAX_T
AC_TYPE_INTPTR_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_UINT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINTMAX_T
AC_TYPE_UINTPTR_T
dnl AC_STRUCT_ST_BLOCKS
dnl AC_STRUCT_TM
AC_CHECK_SIZEOF([long])
AC_CHECK_SIZEOF([size_t])
AC_CHECK_SIZEOF([ssize_t])
AC_CHECK_SIZEOF([uintptr_t])
AC_CHECK_SIZEOF([unsigned long long])
AC_CHECK_SIZEOF([void*])
if test "$ac_cv_sizeof_long" = 8 -o "$ac_cv_sizeof_unsigned_long_long" = 8 ;
then
    :
else
    AC_MSG_ERROR([${PACKAGE} needs a 64bit integer type])
fi
AX_CHECK_PRINTF_Z


# Various SiLK features

SILK_AC_ARG_ENABLE_EXTRA_CHECKS
SILK_AC_ARG_ENABLE_IPV6
SILK_AC_ARG_ENABLE_INET6_NETWORKING
SILK_AC_ARG_ENABLE_LOCALTIME
SILK_AC_ARG_ENABLE_IPSET_COMPATIBILITY
SILK_AC_ARG_DISABLE_ANALYSIS_TOOLS
SILK_AC_ARG_DISABLE_PACKING_TOOLS
SILK_AC_ARG_ENABLE_OUTPUT_COMPRESSION
SILK_AC_ARG_DATA_ROOTDIR

# Determine infomodel information (always do this so "make dist" works)
AM_MISSING_PROG(XSLTPROC, xsltproc)
INFOMODEL_AC_COLLECT_REGISTRIES([src/libflowsource/infomodel])

# Look for special #defines that we want on the compile line
SILK_AC_COMP_INCLUDE_TO_CFLAG

# Generate the values needed for the RPM .spec file
SILK_RPM_SPEC_SUBST

# Generate values used by the test scripts
SILK_TEST_SUBST

# All tests are complete
SILK_AC_FINALIZE

# Warn about use of --program-prefix, --program-suffix, or
# --program-transform-name
SILK_AC_WARN_TRANSFORM

# Generate list of makefiles
AC_CONFIG_FILES([
    Makefile
    src/Makefile
    src/flowcap/Makefile
    src/include/silk/Makefile
    src/libflowsource/Makefile
    src/libflowsource/infomodel/Makefile
    src/libsilk/Makefile
    src/libsilk/silk_config.c
    src/num2dot/Makefile
    src/plugins/Makefile
    src/pysilk/Makefile
    src/rwaddrcount/Makefile
    src/rwaggbag/Makefile
    src/rwappend/Makefile
    src/rwbag/Makefile
    src/rwcat/Makefile
    src/rwcompare/Makefile
    src/rwconvert/Makefile
    src/rwcount/Makefile
    src/rwcut/Makefile
    src/rwfileinfo/Makefile
    src/rwfilter/Makefile
    src/rwflowpack/Makefile
    src/rwgroup/Makefile
    src/rwids/Makefile
    src/rwipa/Makefile
    src/rwipfix/Makefile
    src/rwmatch/Makefile
    src/rwnetmask/Makefile
    src/rwpmap/Makefile
    src/rwpollexec/Makefile
    src/rwptoflow/Makefile
    src/rwrandomizeip/Makefile
    src/rwrecgenerator/Makefile
    src/rwresolve/Makefile
    src/rwscan/Makefile
    src/rwset/Makefile
    src/rwsiteinfo/Makefile
    src/rwsort/Makefile
    src/rwsplit/Makefile
    src/rwstats/Makefile
    src/rwswapbytes/Makefile
    src/rwtotal/Makefile
    src/rwtuc/Makefile
    src/sendrcv/Makefile
    doc/Makefile
    tests/Makefile
    tests/config-vars.pm
    tests/config_vars.py
])


AC_CONFIG_FILES([
    site/Makefile
])
SILK_AC_FIND_SITE_MAKEFILES

AC_CONFIG_FILES([
    silk-$PACKAGE_VERSION.spec:silk.spec.in
])


# Create symbolic links from header files in the library source
# directories to src/include/silk
#

dnl  sk_make_one_include_silk_link(HDR_PATH)
dnl
dnl     Takes HDR_PATH, which should be a relative path to a header
dnl     file (relative to the top srcdir), and creates a link suitable
dnl     for passing to AC_CONFIG_LINKS(), where the destination is the
dnl     src/include/silk directory.
dnl
dnl     For example, sk_make_one_include_silk_link(foo/bar.h) returns
dnl     src/include/silk/bar.h:foo/bar.h
dnl
m4_define([sk_make_one_include_silk_link], [dnl
  m4_bregexp(m4_strip([$1]), [\(.+/\)\(.+\)], [src/include/silk/\2:\1\2])])

dnl  sk_make_include_silk_list(STRING)
dnl
dnl     Takes a single string argument, which is a whitespace and/or
dnl     newline separated list of header paths, and calls
dnl     sk_make_one_include_silk_link() on each header path.  Returns
dnl     a whitespace separated list, suitable for passing to
dnl     AC_CONFIG_LINKS().
dnl
m4_define([sk_make_include_silk_list], [dnl
  m4_map_args([ sk_make_one_include_silk_link],
              m4_unquote(m4_join([, ], m4_split(m4_normalize([$1])))))])

# libsilk
AC_CONFIG_LINKS(sk_make_include_silk_list([
    src/libsilk/hashlib.h
    src/libsilk/iptree.h
    src/libsilk/redblack/redblack.h
    src/libsilk/rwascii.h
    src/libsilk/rwrec.h
    src/libsilk/silk.h
    src/libsilk/silk_files.h
    src/libsilk/silk_types.h
    src/libsilk/skaggbag.h
    src/libsilk/skbag.h
    src/libsilk/skcountry.h
    src/libsilk/skdaemon.h
    src/libsilk/skdeque.h
    src/libsilk/skdllist.h
    src/libsilk/skheader.h
    src/libsilk/skheap.h
    src/libsilk/skipaddr.h
    src/libsilk/skipset.h
    src/libsilk/sklog.h
    src/libsilk/skmempool.h
    src/libsilk/sknetstruct.h
    src/libsilk/skplugin.h
    src/libsilk/skpolldir.h
    src/libsilk/skprefixmap.h
    src/libsilk/sksite.h
    src/libsilk/skstream.h
    src/libsilk/skstringmap.h
    src/libsilk/sktempfile.h
    src/libsilk/skthread.h
    src/libsilk/sktimer.h
    src/libsilk/sktracemsg.h
    src/libsilk/skvector.h
    src/libsilk/utils.h
    src/pysilk/silkpython.h
]))

AC_CONFIG_LINKS(sk_make_include_silk_list([
    src/libsilk/bagtree.h
    src/libsilk/rwpack.h
]))

AM_COND_IF([NEED_GETOPT_LONG_ONLY], [
AC_CONFIG_LINKS(sk_make_include_silk_list([
    src/libsilk/gnu_getopt.h
]))
])

# libflowsource
if test "x$silk_enable_packing_tools" = "x1" || test "x$ENABLE_IPFIX" = "x1"
then
AC_CONFIG_LINKS(sk_make_include_silk_list([
    src/libflowsource/libflowsource.h
    src/libflowsource/probeconf.h
]))
fi

if test "x$ENABLE_IPFIX" = "x1"
then
AC_CONFIG_LINKS(sk_make_include_silk_list([
    src/libflowsource/skipfix.h
]))
fi

if test "x$silk_enable_packing_tools" = "x1"
then
AC_CONFIG_LINKS(sk_make_include_silk_list([
    src/rwflowpack/rwflowpack.h
]))
fi


SILK_AC_WRITE_SUMMARY

# Remove HAVE_CONFIG_H from DEFS
AC_CONFIG_COMMANDS_PRE([DEFS=])

# Generate the files
AC_OUTPUT

dnl Local Variables:
dnl mode:autoconf
dnl indent-tabs-mode:nil
dnl End:
