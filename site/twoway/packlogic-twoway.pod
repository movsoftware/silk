=pod

=head1 NAME

B<packlogic-twoway.so> - Packing logic for the B<twoway> site

=head1 SYNOPSIS

 rwflowpack --packing-logic=packlogic-twoway.so ...

=head1 DESCRIPTION

This manual page describes the F<packlogic-twoway.so> plug-in that
defines the packing logic that B<rwflowpack(8)> may use to categorize
flow records.  (This document uses the term I<plug-in>, but the
builder of SiLK may choose to compile the packing logic into
B<rwflowpack>.  See the I<SiLK Installation Handbook> for details.)

=head2 General Overview of rwflowpack

The primary job of B<rwflowpack> is to categorize flow records into
one or more I<class> and I<type> pairs.  The class and type pair (also
called a I<flowtype>) are used by the analyst when selecting flow
records from the data store using B<rwfilter(1)>.

The settings that B<rwflowpack> uses to categorize each flow record
are determined by two textual configuration files and a compiled
plug-in that is referred to as the I<packing logic>.

The first of the configuration files is B<silk.conf(5)> which
specifies the classes, types, and sensors that B<rwflowpack> uses when
writing files and that B<rwfilter> uses when selecting flow files.

The second configuration file is the B<sensor.conf(5)> file.  This
file contains multiple B<sensor> blocks, where each block contains
information which the packing logic uses to categorize flow records
collected by the probes specified for that sensor.

The combination of a F<silk.conf> file and a particular packing logic
plug-in define a I<site>.  By having the configuration and packing
logic outside of the core tools, users can more easily configure SiLK
for their particular installation and a single installation of SiLK
can support multiple sites.

This manual page describes the packing logic for the B<twoway> site.
For a description of the packing logic at another site, see that
site's manual page.

=over 4

=item *

B<packlogic-generic(3)>

=back


=for comment
##############################################################################
##############################################################################

=head2 Networks, Classes, and Types for the "twoway" Site

The F<silk.conf> file and F<packlogic-twoway.so> plug-in categorize a
flow record based on how the packets that comprise the flow record
moved between different I<networks>.

The F<packlogic-twoway.so> plug-in specifies three network names to
describe the logical address spaces that border the sensor:

=over 4

=item B<internal>

the space that is being monitored

=item B<external>

the space outside the monitored network

=item B<null>

the destination network for a flow that does not leave the router,
because either the flow was blocked by the router's access control
list or its destination was the router itself---e.g., a BGP message

=back

There is an implicit fourth network, B<unknown>, which is anything
that does not match the three networks above.

Given these networks, the following table describes how flows can move
between the networks.  Traffic between the networks is successfully
routed unless the description explicitly says "blocked".

 SOURCE    DESTINATION   DESCRIPTION
 external  internal      incoming traffic
 internal  external      outgoing traffic
 external  null          blocked incoming traffic
 internal  null          blocked outgoing traffic
 external  external      strictly external traffic
 internal  internal      strictly internal traffic
 null      any           unclear: null should never be a source
 external  unknown       unclear
 internal  unknown       unclear
 unknown   any           unclear

The F<silk.conf> file and F<packlogic-twoway.so> plug-in define a
single class, B<all>.

The type assigned to a flow record within the B<all> class depends on
the how the record moves between the networks, and the types follow
from the table above:

=over 4

=item B<in>, B<inicmp>, B<inweb>

Incoming traffic.  The traffic is split into multiple types, and
these types allow the analysts to query a subset of the flow records
depending on their needs.  Each incoming flow record is split into the
one of incoming types using the following rules:

=over 4

=item B<inweb>

Contains traffic where the protocol is TCP (6) and either the source
port or the destination port is one of 80, 443, or 8080

=item B<inicmp>

Contains flow records where either the protocol is ICMP (1) or the
flow record is IPv6 and the protocol is ICMPV6 (58).  By default, the
B<inicmp> and B<outicmp> types are not used by the
F<packlogic-twoway.so> plug-in.

=item B<in>

Contains all other incoming traffic.

=back

=item B<out>, B<outicmp>, B<outweb>

Outgoing traffic.  The traffic is split among the types using rules
similar to those for incoming traffic.

=item B<innull>

Blocked incoming traffic

=item B<outnull>

Blocked outgoing traffic

=item B<ext2ext>

Strictly external traffic

=item B<int2int>

Strictly internal traffic

=item B<other>

Either traffic from the B<null> network or traffic to or from the
B<unknown> network

=back

=head2 Assigning a flow to source and destination networks

Each B<sensor> block in the B<sensor.conf(5)> file must specify how to
determine the source and destination networks for each flow record
collected by the probes specified for that sensor.  There are two ways
to do this.

The first method sets the source and destination of all records to
particular networks.  This can be used, for example, when the physical
network device at the sensor only sees one direction of the traffic.
To do this, use the B<source-network> and B<destination-network>
statements in the B<sensor> block.  The following sensor, S1,
considers all traffic as blocked incoming:

 sensor S1
   ipfix-probes S1
   source-network external
   destination-network null
 end sensor

The second method to determine how a flow record moves between the
networks is to define the networks and use characteristics of the flow
record to determine its source and destination networks.

The F<sensor.conf> file provides two ways to define a network: use the
B<I<NET>-ipblocks> statement to specify the I<NET> network as a list
of IP address blocks, or use the B<I<NET>-interfaces> statement to
specify the I<NET> network using a list of SNMP interfaces.

For the source network of a flow record to be considered B<external>,
either the source IP (SiLK field C<sIP>) must appear in the list of
B<external-ipblocks> or the incoming SNMP interface (SiLK field C<in>)
must appear in the list of B<external-interfaces>.  B<Note:> If the
probe block that specifies where the flow was collected contains an
S<B<interface-values vlan>> statement, the SiLK C<in> field contains
the VLAN ID.

For the destination network of a flow record to be considered B<null>,
either the destination IP (C<dIP>) must appear in the list of
B<null-ipblocks> or the outgoing SNMP interface (C<out>) must appear
in the list of B<null-interfaces>.

Consider the following two sensors:

 sensor S2
   ipfix-probes S2
   external-ipblocks 172.16.0.0/16
   internal-ipblocks 172.20.0.0/16
 end sensor

 sensor S3
   ipfix-probes S3
   external-interfaces 17,18,19
   internal-interfaces 21,22,23
 end sensor

A flow record collected at probe S2 whose C<sIP> is 172.16.1.1 and
whose C<dIP> is 172.20.2.2 is considered incoming.

A flow record collected at probe S3 whose C<in> is 23 and whose
C<out> is 18 is considered outgoing.  A flow on S3 whose C<in> is 23
and whose C<out> is 27 is written to B<other> since the C<out> field
is not matched.

There are two constructs in the F<sensor.conf> file that help when
specifying these lists:

=over 4

=item 1

The B<I<NET>-interfaces> or B<I<NET>-ipblocks> statement in a
B<sensor> block may use B<remainder> to denote interfaces or IP
blocks that do not appear elsewhere in the block.

=item 2

A B<group> block can be used to give a name to a set of IP blocks or
SNMP interfaces which a B<sensor> block can reference.

=back

For details, see the B<sensor.conf(5)> manual page.

=head2 Valid sensors

When using the F<packlogic-twoway.so> plug-in, the B<sensor> blocks in
the F<sensor.conf> file supports the following types of probes:

=over 4

=item *

B<ipfix>

=item *

B<netflow-v5>

=item *

B<netflow-v9>

=item *

B<sflow>

=item *

B<silk>

=back

In addition, each B<sensor> block must meet the following rules:

=over 4

=item *

If the sensor has the B<source-network> and B<destination-network>
explicitly set, the sensor is valid and none of the following checks
are performed.  Otherwise,

=item *

At least one of B<I<NET>-interfaces> or B<I<NET>-ipblocks> must be
specified, where I<NET> is either B<internal> or B<external>.  And,

=item *

A sensor cannot mix B<I<NET>-ipblocks> and B<I<NET>-interfaces>, with
the exception that B<null-interfaces> are always allowed.  And,

=item *

Only one network on the sensor may use B<remainder>.  And,

=item *

If a sensor contains only one B<I<NET>-ipblocks> statement, that
statement may not use B<remainder>.  (The B<I<NET>-interfaces>
statement does not have this restriction.)  And,

=item *

When the B<remainder> keyword is not used and only one of the
B<internal> or B<external> networks is defined, the B<external> or
B<internal> network, respectively, is defined as having the
B<remainder>.

=back

=head2 Packing logic code

This section provides the logic used to assign the class and type at
the B<twoway> site.

A single B<sensor> block will assign the flow record to a single class
and type, and processing of the flow for that B<sensor> block stops as
soon as a type is assigned.  When multiple B<sensor> blocks reference
the same probe, the flow records collected by that probe are processed
by each of those B<sensor> blocks.

A flow record is always assigned to the class B<all> unless the flow
is ignored.

A textual description of the code used to assign the type is shown
here.  As of SiLK 3.8.0, the type may be determined by the presence of
certain IPFIX or NetFlowV9 information elements.

=over 4

=item *

Ignore any flow record that matches a B<discard-when> statement or
does not match a B<discard-unless> statement.

=item *

If B<source-network> is B<external>, if C<sIP> matches
B<external-ipblocks>, or if C<in> matches B<external-interfaces>, then

=over 4

=item *

If B<destination-network> is B<null>, if C<dIP> matches
B<null-ipblocks>, or if C<out> matches B<null-interfaces>, pack as
B<innull>.  Else,

=item *

If B<destination-network> is B<internal>, if C<dIP> matches
B<internal-ipblocks>, or if C<out> matches B<internal-interfaces>,
pack as B<in>, B<inicmp>, or B<inweb>.  Else,

=item *

If B<destination-network> is B<external>, if C<dIP> matches
B<external-ipblocks>, or if C<out> matches B<external-interfaces>,
pack as B<ext2ext>.  Else,

=item *

Pack as B<other>.

=back

=item *

Else, if B<source-network> is B<internal>, if C<sIP> matches
B<internal-ipblocks>, or if C<in> matches B<internal-interfaces>, then

=over 4

=item *

If B<destination-network> is B<null>, if C<dIP> matches
B<null-ipblocks>, or if C<out> matches B<null-interfaces>, pack as
B<outnull>.  Else,

=item *

If B<destination-network> is B<external>, if C<dIP> matches
B<external-ipblocks>, or if C<out> matches B<external-interfaces>,
pack as B<out>, B<outicmp>, or B<outweb>.  Else,

=item *

If B<destination-network> is B<internal>, if C<dIP> matches
B<internal-ipblocks>, or if C<out> matches B<internal-interfaces>,
pack as B<int2int>.  Else,

=item *

Pack as B<other>.

=back

=item *

Else, pack as B<other>.

=item *

Potentially modify the type: If the probe has a B<quirks> setting that
includes C<firewall-event> and if the incoming record contains the
C<firewallEvent> or C<NF_F_FW_EVENT> information element whose value
is 3 (flow denied), change the type where the flow is packed as
follows:

=over 4

=item *

If the flow was denied due to an ingress ACL (C<NF_F_FW_EXT_EVENT> of
1001), pack as B<innull>.

=item *

If the flow was denied due to an egress ACL (C<NF_F_FW_EXT_EVENT> of
1002), pack as B<outnull>.

=item *

If the flow's current type is B<in>, B<inweb>, B<inicmp>, or
B<ext2ext>, pack as B<innull>.

=item *

If the flow's current type is B<out>, B<outweb>, B<outicmp>, or
B<int2int>, pack as B<outnull>.

=item *

Else leave the type as is (B<innull>, B<outnull>, or B<other>).

=back

=back

=head1 SEE ALSO

B<rwfilter(1)>, B<rwflowpack(8)>, B<sensor.conf(5)>, B<silk.conf(5)>,
B<packlogic-generic(3)>, B<silk(7)>, I<SiLK Installation Handbook>

=cut

$SiLK: packlogic-twoway.pod 08b5c7864ed2 2015-05-14 18:35:23Z mthomas $

Local Variables:
mode:text
indent-tabs-mode:nil
End:
